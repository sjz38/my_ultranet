// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "relu_bn6.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic relu_bn6::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic relu_bn6::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> relu_bn6::ap_ST_fsm_state1 = "1";
const sc_lv<3> relu_bn6::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> relu_bn6::ap_ST_fsm_state4 = "100";
const bool relu_bn6::ap_const_boolean_1 = true;
const sc_lv<32> relu_bn6::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> relu_bn6::ap_const_lv32_1 = "1";
const bool relu_bn6::ap_const_boolean_0 = false;
const sc_lv<1> relu_bn6::ap_const_lv1_0 = "0";
const sc_lv<1> relu_bn6::ap_const_lv1_1 = "1";
const sc_lv<14> relu_bn6::ap_const_lv14_0 = "00000000000000";
const sc_lv<12> relu_bn6::ap_const_lv12_0 = "000000000000";
const sc_lv<7> relu_bn6::ap_const_lv7_0 = "0000000";
const sc_lv<14> relu_bn6::ap_const_lv14_3200 = "11001000000000";
const sc_lv<14> relu_bn6::ap_const_lv14_1 = "1";
const sc_lv<12> relu_bn6::ap_const_lv12_500 = "10100000000";
const sc_lv<7> relu_bn6::ap_const_lv7_40 = "1000000";
const sc_lv<7> relu_bn6::ap_const_lv7_1 = "1";
const sc_lv<12> relu_bn6::ap_const_lv12_1 = "1";
const sc_lv<32> relu_bn6::ap_const_lv32_A = "1010";
const sc_lv<32> relu_bn6::ap_const_lv32_18 = "11000";
const sc_lv<15> relu_bn6::ap_const_lv15_100 = "100000000";
const sc_lv<32> relu_bn6::ap_const_lv32_E = "1110";
const sc_lv<32> relu_bn6::ap_const_lv32_12 = "10010";
const sc_lv<5> relu_bn6::ap_const_lv5_0 = "00000";
const sc_lv<5> relu_bn6::ap_const_lv5_10 = "10000";
const sc_lv<32> relu_bn6::ap_const_lv32_2 = "10";

relu_bn6::relu_bn6(sc_module_name name) : sc_module(name), mVcdFile(0) {
    a_batchnorm6_V_U = new relu_bn6_a_batchnvld("a_batchnorm6_V_U");
    a_batchnorm6_V_U->clk(ap_clk);
    a_batchnorm6_V_U->reset(ap_rst);
    a_batchnorm6_V_U->address0(a_batchnorm6_V_address0);
    a_batchnorm6_V_U->ce0(a_batchnorm6_V_ce0);
    a_batchnorm6_V_U->q0(a_batchnorm6_V_q0);
    b_batchnorm6_V_U = new relu_bn6_b_batchnvmd("b_batchnorm6_V_U");
    b_batchnorm6_V_U->clk(ap_clk);
    b_batchnorm6_V_U->reset(ap_rst);
    b_batchnorm6_V_U->address0(b_batchnorm6_V_address0);
    b_batchnorm6_V_U->ce0(b_batchnorm6_V_ce0);
    b_batchnorm6_V_U->q0(b_batchnorm6_V_q0);
    test_mac_muladd_1vnd_U867 = new test_mac_muladd_1vnd<1,1,16,10,20,25>("test_mac_muladd_1vnd_U867");
    test_mac_muladd_1vnd_U867->din0(conv6_pipe_11_V_V_dout);
    test_mac_muladd_1vnd_U867->din1(a_batchnorm6_V_q0);
    test_mac_muladd_1vnd_U867->din2(b_batchnorm6_V_q0);
    test_mac_muladd_1vnd_U867->dout(grp_fu_328_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_batchnorm6_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln736_fu_236_p1 );

    SC_METHOD(thread_a_batchnorm6_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_add_ln729_fu_192_p2);
    sensitive << ( indvar_flatten11_reg_153 );

    SC_METHOD(thread_add_ln730_fu_248_p2);
    sensitive << ( indvar_flatten_reg_164 );

    SC_METHOD(thread_add_ln731_fu_242_p2);
    sensitive << ( select_ln731_fu_228_p3 );

    SC_METHOD(thread_and_ln730_fu_216_p2);
    sensitive << ( icmp_ln731_fu_210_p2 );
    sensitive << ( xor_ln730_fu_204_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( conv6_pipe_11_V_V_empty_n );
    sensitive << ( relu6_pipe_12_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln729_reg_339 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( conv6_pipe_11_V_V_empty_n );
    sensitive << ( relu6_pipe_12_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln729_reg_339 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( conv6_pipe_11_V_V_empty_n );
    sensitive << ( relu6_pipe_12_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln729_reg_339 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( conv6_pipe_11_V_V_empty_n );
    sensitive << ( relu6_pipe_12_V_V_full_n );
    sensitive << ( icmp_ln729_reg_339 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln729_fu_186_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_b_batchnorm6_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln736_fu_236_p1 );

    SC_METHOD(thread_b_batchnorm6_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_conv6_pipe_11_V_V_blk_n);
    sensitive << ( conv6_pipe_11_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln729_reg_339 );

    SC_METHOD(thread_conv6_pipe_11_V_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln729_reg_339 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln1495_fu_290_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln729_reg_339 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( trunc_ln_fu_274_p4 );

    SC_METHOD(thread_icmp_ln729_fu_186_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten11_reg_153 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln730_fu_198_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_164 );
    sensitive << ( icmp_ln729_fu_186_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln731_fu_210_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( args25_0_0_reg_175 );
    sensitive << ( icmp_ln729_fu_186_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_or_ln1495_fu_313_p2);
    sensitive << ( tmp_6_fu_283_p3 );
    sensitive << ( icmp_ln1495_fu_290_p2 );

    SC_METHOD(thread_or_ln731_fu_222_p2);
    sensitive << ( icmp_ln730_fu_198_p2 );
    sensitive << ( and_ln730_fu_216_p2 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_relu6_pipe_12_V_V_blk_n);
    sensitive << ( relu6_pipe_12_V_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln729_reg_339 );

    SC_METHOD(thread_relu6_pipe_12_V_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln729_reg_339 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( or_ln1495_fu_313_p2 );
    sensitive << ( select_ln1495_fu_305_p3 );
    sensitive << ( tmp_s_fu_296_p4 );

    SC_METHOD(thread_relu6_pipe_12_V_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln729_reg_339 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_select_ln1495_fu_305_p3);
    sensitive << ( tmp_6_fu_283_p3 );

    SC_METHOD(thread_select_ln730_fu_254_p3);
    sensitive << ( icmp_ln730_fu_198_p2 );
    sensitive << ( add_ln730_fu_248_p2 );

    SC_METHOD(thread_select_ln731_fu_228_p3);
    sensitive << ( args25_0_0_reg_175 );
    sensitive << ( or_ln731_fu_222_p2 );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_6_fu_283_p3);
    sensitive << ( grp_fu_328_p3 );

    SC_METHOD(thread_tmp_s_fu_296_p4);
    sensitive << ( grp_fu_328_p3 );

    SC_METHOD(thread_trunc_ln_fu_274_p4);
    sensitive << ( grp_fu_328_p3 );

    SC_METHOD(thread_xor_ln730_fu_204_p2);
    sensitive << ( icmp_ln730_fu_198_p2 );

    SC_METHOD(thread_zext_ln736_fu_236_p1);
    sensitive << ( select_ln731_fu_228_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln729_fu_186_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "relu_bn6_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, conv6_pipe_11_V_V_dout, "(port)conv6_pipe_11_V_V_dout");
    sc_trace(mVcdFile, conv6_pipe_11_V_V_empty_n, "(port)conv6_pipe_11_V_V_empty_n");
    sc_trace(mVcdFile, conv6_pipe_11_V_V_read, "(port)conv6_pipe_11_V_V_read");
    sc_trace(mVcdFile, relu6_pipe_12_V_V_din, "(port)relu6_pipe_12_V_V_din");
    sc_trace(mVcdFile, relu6_pipe_12_V_V_full_n, "(port)relu6_pipe_12_V_V_full_n");
    sc_trace(mVcdFile, relu6_pipe_12_V_V_write, "(port)relu6_pipe_12_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, a_batchnorm6_V_address0, "a_batchnorm6_V_address0");
    sc_trace(mVcdFile, a_batchnorm6_V_ce0, "a_batchnorm6_V_ce0");
    sc_trace(mVcdFile, a_batchnorm6_V_q0, "a_batchnorm6_V_q0");
    sc_trace(mVcdFile, b_batchnorm6_V_address0, "b_batchnorm6_V_address0");
    sc_trace(mVcdFile, b_batchnorm6_V_ce0, "b_batchnorm6_V_ce0");
    sc_trace(mVcdFile, b_batchnorm6_V_q0, "b_batchnorm6_V_q0");
    sc_trace(mVcdFile, conv6_pipe_11_V_V_blk_n, "conv6_pipe_11_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln729_reg_339, "icmp_ln729_reg_339");
    sc_trace(mVcdFile, relu6_pipe_12_V_V_blk_n, "relu6_pipe_12_V_V_blk_n");
    sc_trace(mVcdFile, indvar_flatten11_reg_153, "indvar_flatten11_reg_153");
    sc_trace(mVcdFile, indvar_flatten_reg_164, "indvar_flatten_reg_164");
    sc_trace(mVcdFile, args25_0_0_reg_175, "args25_0_0_reg_175");
    sc_trace(mVcdFile, icmp_ln729_fu_186_p2, "icmp_ln729_fu_186_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln729_fu_192_p2, "add_ln729_fu_192_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, add_ln731_fu_242_p2, "add_ln731_fu_242_p2");
    sc_trace(mVcdFile, select_ln730_fu_254_p3, "select_ln730_fu_254_p3");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, zext_ln736_fu_236_p1, "zext_ln736_fu_236_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, icmp_ln730_fu_198_p2, "icmp_ln730_fu_198_p2");
    sc_trace(mVcdFile, icmp_ln731_fu_210_p2, "icmp_ln731_fu_210_p2");
    sc_trace(mVcdFile, xor_ln730_fu_204_p2, "xor_ln730_fu_204_p2");
    sc_trace(mVcdFile, and_ln730_fu_216_p2, "and_ln730_fu_216_p2");
    sc_trace(mVcdFile, or_ln731_fu_222_p2, "or_ln731_fu_222_p2");
    sc_trace(mVcdFile, select_ln731_fu_228_p3, "select_ln731_fu_228_p3");
    sc_trace(mVcdFile, add_ln730_fu_248_p2, "add_ln730_fu_248_p2");
    sc_trace(mVcdFile, grp_fu_328_p3, "grp_fu_328_p3");
    sc_trace(mVcdFile, trunc_ln_fu_274_p4, "trunc_ln_fu_274_p4");
    sc_trace(mVcdFile, tmp_6_fu_283_p3, "tmp_6_fu_283_p3");
    sc_trace(mVcdFile, icmp_ln1495_fu_290_p2, "icmp_ln1495_fu_290_p2");
    sc_trace(mVcdFile, or_ln1495_fu_313_p2, "or_ln1495_fu_313_p2");
    sc_trace(mVcdFile, select_ln1495_fu_305_p3, "select_ln1495_fu_305_p3");
    sc_trace(mVcdFile, tmp_s_fu_296_p4, "tmp_s_fu_296_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

relu_bn6::~relu_bn6() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete a_batchnorm6_V_U;
    delete b_batchnorm6_V_U;
    delete test_mac_muladd_1vnd_U867;
}

void relu_bn6::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln729_fu_186_p2.read()))) {
        args25_0_0_reg_175 = add_ln731_fu_242_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        args25_0_0_reg_175 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln729_fu_186_p2.read()))) {
        indvar_flatten11_reg_153 = add_ln729_fu_192_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        indvar_flatten11_reg_153 = ap_const_lv14_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln729_fu_186_p2.read()))) {
        indvar_flatten_reg_164 = select_ln730_fu_254_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        indvar_flatten_reg_164 = ap_const_lv12_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln729_reg_339 = icmp_ln729_fu_186_p2.read();
    }
}

void relu_bn6::thread_a_batchnorm6_V_address0() {
    a_batchnorm6_V_address0 =  (sc_lv<6>) (zext_ln736_fu_236_p1.read());
}

void relu_bn6::thread_a_batchnorm6_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        a_batchnorm6_V_ce0 = ap_const_logic_1;
    } else {
        a_batchnorm6_V_ce0 = ap_const_logic_0;
    }
}

void relu_bn6::thread_add_ln729_fu_192_p2() {
    add_ln729_fu_192_p2 = (!indvar_flatten11_reg_153.read().is_01() || !ap_const_lv14_1.is_01())? sc_lv<14>(): (sc_biguint<14>(indvar_flatten11_reg_153.read()) + sc_biguint<14>(ap_const_lv14_1));
}

void relu_bn6::thread_add_ln730_fu_248_p2() {
    add_ln730_fu_248_p2 = (!ap_const_lv12_1.is_01() || !indvar_flatten_reg_164.read().is_01())? sc_lv<12>(): (sc_biguint<12>(ap_const_lv12_1) + sc_biguint<12>(indvar_flatten_reg_164.read()));
}

void relu_bn6::thread_add_ln731_fu_242_p2() {
    add_ln731_fu_242_p2 = (!ap_const_lv7_1.is_01() || !select_ln731_fu_228_p3.read().is_01())? sc_lv<7>(): (sc_biguint<7>(ap_const_lv7_1) + sc_biguint<7>(select_ln731_fu_228_p3.read()));
}

void relu_bn6::thread_and_ln730_fu_216_p2() {
    and_ln730_fu_216_p2 = (icmp_ln731_fu_210_p2.read() & xor_ln730_fu_204_p2.read());
}

void relu_bn6::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void relu_bn6::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void relu_bn6::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void relu_bn6::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void relu_bn6::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(icmp_ln729_reg_339.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, conv6_pipe_11_V_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(icmp_ln729_reg_339.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, relu6_pipe_12_V_V_full_n.read()))));
}

void relu_bn6::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(icmp_ln729_reg_339.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, conv6_pipe_11_V_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(icmp_ln729_reg_339.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, relu6_pipe_12_V_V_full_n.read()))));
}

void relu_bn6::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(icmp_ln729_reg_339.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, conv6_pipe_11_V_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(icmp_ln729_reg_339.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, relu6_pipe_12_V_V_full_n.read()))));
}

void relu_bn6::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void relu_bn6::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void relu_bn6::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(icmp_ln729_reg_339.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, conv6_pipe_11_V_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln729_reg_339.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, relu6_pipe_12_V_V_full_n.read())));
}

void relu_bn6::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln729_fu_186_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void relu_bn6::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void relu_bn6::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void relu_bn6::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void relu_bn6::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void relu_bn6::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void relu_bn6::thread_b_batchnorm6_V_address0() {
    b_batchnorm6_V_address0 =  (sc_lv<6>) (zext_ln736_fu_236_p1.read());
}

void relu_bn6::thread_b_batchnorm6_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        b_batchnorm6_V_ce0 = ap_const_logic_1;
    } else {
        b_batchnorm6_V_ce0 = ap_const_logic_0;
    }
}

void relu_bn6::thread_conv6_pipe_11_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln729_reg_339.read(), ap_const_lv1_0))) {
        conv6_pipe_11_V_V_blk_n = conv6_pipe_11_V_V_empty_n.read();
    } else {
        conv6_pipe_11_V_V_blk_n = ap_const_logic_1;
    }
}

void relu_bn6::thread_conv6_pipe_11_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln729_reg_339.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        conv6_pipe_11_V_V_read = ap_const_logic_1;
    } else {
        conv6_pipe_11_V_V_read = ap_const_logic_0;
    }
}

void relu_bn6::thread_icmp_ln1495_fu_290_p2() {
    icmp_ln1495_fu_290_p2 = (!trunc_ln_fu_274_p4.read().is_01() || !ap_const_lv15_100.is_01())? sc_lv<1>(): (sc_bigint<15>(trunc_ln_fu_274_p4.read()) > sc_bigint<15>(ap_const_lv15_100));
}

void relu_bn6::thread_icmp_ln729_fu_186_p2() {
    icmp_ln729_fu_186_p2 = (!indvar_flatten11_reg_153.read().is_01() || !ap_const_lv14_3200.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten11_reg_153.read() == ap_const_lv14_3200);
}

void relu_bn6::thread_icmp_ln730_fu_198_p2() {
    icmp_ln730_fu_198_p2 = (!indvar_flatten_reg_164.read().is_01() || !ap_const_lv12_500.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_164.read() == ap_const_lv12_500);
}

void relu_bn6::thread_icmp_ln731_fu_210_p2() {
    icmp_ln731_fu_210_p2 = (!args25_0_0_reg_175.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(args25_0_0_reg_175.read() == ap_const_lv7_40);
}

void relu_bn6::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void relu_bn6::thread_or_ln1495_fu_313_p2() {
    or_ln1495_fu_313_p2 = (tmp_6_fu_283_p3.read() | icmp_ln1495_fu_290_p2.read());
}

void relu_bn6::thread_or_ln731_fu_222_p2() {
    or_ln731_fu_222_p2 = (and_ln730_fu_216_p2.read() | icmp_ln730_fu_198_p2.read());
}

void relu_bn6::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void relu_bn6::thread_relu6_pipe_12_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln729_reg_339.read(), ap_const_lv1_0))) {
        relu6_pipe_12_V_V_blk_n = relu6_pipe_12_V_V_full_n.read();
    } else {
        relu6_pipe_12_V_V_blk_n = ap_const_logic_1;
    }
}

void relu_bn6::thread_relu6_pipe_12_V_V_din() {
    relu6_pipe_12_V_V_din = (!or_ln1495_fu_313_p2.read()[0].is_01())? sc_lv<5>(): ((or_ln1495_fu_313_p2.read()[0].to_bool())? select_ln1495_fu_305_p3.read(): tmp_s_fu_296_p4.read());
}

void relu_bn6::thread_relu6_pipe_12_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln729_reg_339.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        relu6_pipe_12_V_V_write = ap_const_logic_1;
    } else {
        relu6_pipe_12_V_V_write = ap_const_logic_0;
    }
}

void relu_bn6::thread_select_ln1495_fu_305_p3() {
    select_ln1495_fu_305_p3 = (!tmp_6_fu_283_p3.read()[0].is_01())? sc_lv<5>(): ((tmp_6_fu_283_p3.read()[0].to_bool())? ap_const_lv5_0: ap_const_lv5_10);
}

void relu_bn6::thread_select_ln730_fu_254_p3() {
    select_ln730_fu_254_p3 = (!icmp_ln730_fu_198_p2.read()[0].is_01())? sc_lv<12>(): ((icmp_ln730_fu_198_p2.read()[0].to_bool())? ap_const_lv12_1: add_ln730_fu_248_p2.read());
}

void relu_bn6::thread_select_ln731_fu_228_p3() {
    select_ln731_fu_228_p3 = (!or_ln731_fu_222_p2.read()[0].is_01())? sc_lv<7>(): ((or_ln731_fu_222_p2.read()[0].to_bool())? ap_const_lv7_0: args25_0_0_reg_175.read());
}

void relu_bn6::thread_start_out() {
    start_out = real_start.read();
}

void relu_bn6::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void relu_bn6::thread_tmp_6_fu_283_p3() {
    tmp_6_fu_283_p3 = grp_fu_328_p3.read().range(24, 24);
}

void relu_bn6::thread_tmp_s_fu_296_p4() {
    tmp_s_fu_296_p4 = grp_fu_328_p3.read().range(18, 14);
}

void relu_bn6::thread_trunc_ln_fu_274_p4() {
    trunc_ln_fu_274_p4 = grp_fu_328_p3.read().range(24, 10);
}

void relu_bn6::thread_xor_ln730_fu_204_p2() {
    xor_ln730_fu_204_p2 = (icmp_ln730_fu_198_p2.read() ^ ap_const_lv1_1);
}

void relu_bn6::thread_zext_ln736_fu_236_p1() {
    zext_ln736_fu_236_p1 = esl_zext<64,7>(select_ln731_fu_228_p3.read());
}

void relu_bn6::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln729_fu_186_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln729_fu_186_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

