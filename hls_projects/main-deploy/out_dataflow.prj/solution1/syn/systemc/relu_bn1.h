// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _relu_bn1_HH_
#define _relu_bn1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "test_mac_muladd_10iy.h"
#include "relu_bn1_a_batchnYie.h"
#include "relu_bn1_b_batchnZio.h"

namespace ap_rtl {

struct relu_bn1 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<16> > conv1_pipe_1_V_V_dout;
    sc_in< sc_logic > conv1_pipe_1_V_V_empty_n;
    sc_out< sc_logic > conv1_pipe_1_V_V_read;
    sc_out< sc_lv<5> > relu1_pipe_2_V_V_din;
    sc_in< sc_logic > relu1_pipe_2_V_V_full_n;
    sc_out< sc_logic > relu1_pipe_2_V_V_write;


    // Module declarations
    relu_bn1(sc_module_name name);
    SC_HAS_PROCESS(relu_bn1);

    ~relu_bn1();

    sc_trace_file* mVcdFile;

    relu_bn1_a_batchnYie* a_batchnorm1_V_U;
    relu_bn1_b_batchnZio* b_batchnorm1_V_U;
    test_mac_muladd_10iy<1,1,16,12,21,26>* test_mac_muladd_10iy_U50;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<4> > a_batchnorm1_V_address0;
    sc_signal< sc_logic > a_batchnorm1_V_ce0;
    sc_signal< sc_lv<12> > a_batchnorm1_V_q0;
    sc_signal< sc_lv<4> > b_batchnorm1_V_address0;
    sc_signal< sc_logic > b_batchnorm1_V_ce0;
    sc_signal< sc_lv<21> > b_batchnorm1_V_q0;
    sc_signal< sc_logic > conv1_pipe_1_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln177_reg_335;
    sc_signal< sc_logic > relu1_pipe_2_V_V_blk_n;
    sc_signal< sc_lv<20> > indvar_flatten11_reg_149;
    sc_signal< sc_lv<14> > indvar_flatten_reg_160;
    sc_signal< sc_lv<5> > args2_0_0_reg_171;
    sc_signal< sc_lv<1> > icmp_ln177_fu_182_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<20> > add_ln177_fu_188_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > add_ln179_fu_238_p2;
    sc_signal< sc_lv<14> > select_ln178_fu_250_p3;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<64> > zext_ln185_fu_232_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln178_fu_194_p2;
    sc_signal< sc_lv<1> > icmp_ln179_fu_206_p2;
    sc_signal< sc_lv<1> > xor_ln178_fu_200_p2;
    sc_signal< sc_lv<1> > and_ln178_fu_212_p2;
    sc_signal< sc_lv<1> > or_ln179_fu_218_p2;
    sc_signal< sc_lv<5> > select_ln179_fu_224_p3;
    sc_signal< sc_lv<14> > add_ln178_fu_244_p2;
    sc_signal< sc_lv<26> > grp_fu_324_p3;
    sc_signal< sc_lv<16> > trunc_ln_fu_270_p4;
    sc_signal< sc_lv<1> > tmp_11_fu_279_p3;
    sc_signal< sc_lv<1> > icmp_ln1495_fu_286_p2;
    sc_signal< sc_lv<1> > or_ln1495_fu_309_p2;
    sc_signal< sc_lv<5> > select_ln1495_fu_301_p3;
    sc_signal< sc_lv<5> > tmp_s_fu_292_p4;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<20> ap_const_lv20_C8000;
    static const sc_lv<20> ap_const_lv20_1;
    static const sc_lv<14> ap_const_lv14_1400;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<16> ap_const_lv16_100;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_batchnorm1_V_address0();
    void thread_a_batchnorm1_V_ce0();
    void thread_add_ln177_fu_188_p2();
    void thread_add_ln178_fu_244_p2();
    void thread_add_ln179_fu_238_p2();
    void thread_and_ln178_fu_212_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_b_batchnorm1_V_address0();
    void thread_b_batchnorm1_V_ce0();
    void thread_conv1_pipe_1_V_V_blk_n();
    void thread_conv1_pipe_1_V_V_read();
    void thread_icmp_ln1495_fu_286_p2();
    void thread_icmp_ln177_fu_182_p2();
    void thread_icmp_ln178_fu_194_p2();
    void thread_icmp_ln179_fu_206_p2();
    void thread_internal_ap_ready();
    void thread_or_ln1495_fu_309_p2();
    void thread_or_ln179_fu_218_p2();
    void thread_real_start();
    void thread_relu1_pipe_2_V_V_blk_n();
    void thread_relu1_pipe_2_V_V_din();
    void thread_relu1_pipe_2_V_V_write();
    void thread_select_ln1495_fu_301_p3();
    void thread_select_ln178_fu_250_p3();
    void thread_select_ln179_fu_224_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_11_fu_279_p3();
    void thread_tmp_s_fu_292_p4();
    void thread_trunc_ln_fu_270_p4();
    void thread_xor_ln178_fu_200_p2();
    void thread_zext_ln185_fu_232_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
