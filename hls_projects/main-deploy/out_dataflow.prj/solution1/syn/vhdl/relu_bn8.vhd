-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu_bn8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv8_pipe_15_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    conv8_pipe_15_V_V_empty_n : IN STD_LOGIC;
    conv8_pipe_15_V_V_read : OUT STD_LOGIC;
    m_axi_result_AWVALID : OUT STD_LOGIC;
    m_axi_result_AWREADY : IN STD_LOGIC;
    m_axi_result_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_result_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_result_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_result_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_result_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result_WVALID : OUT STD_LOGIC;
    m_axi_result_WREADY : IN STD_LOGIC;
    m_axi_result_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_result_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result_WLAST : OUT STD_LOGIC;
    m_axi_result_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result_ARVALID : OUT STD_LOGIC;
    m_axi_result_ARREADY : IN STD_LOGIC;
    m_axi_result_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_result_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_result_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_result_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_result_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result_RVALID : IN STD_LOGIC;
    m_axi_result_RREADY : OUT STD_LOGIC;
    m_axi_result_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_result_RLAST : IN STD_LOGIC;
    m_axi_result_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result_BVALID : IN STD_LOGIC;
    m_axi_result_BREADY : OUT STD_LOGIC;
    m_axi_result_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_result_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    result_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    result_offset_empty_n : IN STD_LOGIC;
    result_offset_read : OUT STD_LOGIC );
end;


architecture behav of relu_bn8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_3200 : STD_LOGIC_VECTOR (13 downto 0) := "11001000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_500 : STD_LOGIC_VECTOR (11 downto 0) := "010100000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv27_7FFFFFF : STD_LOGIC_VECTOR (26 downto 0) := "111111111111111111111111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal a_batchnorm8_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_batchnorm8_V_ce0 : STD_LOGIC;
    signal a_batchnorm8_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_batchnorm8_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_batchnorm8_V_ce0 : STD_LOGIC;
    signal b_batchnorm8_V_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal conv8_pipe_15_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln884_reg_878 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln884_reg_878_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal result_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln884_reg_878_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal result_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal icmp_ln884_reg_878_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal result_offset_blk_n : STD_LOGIC;
    signal indvar_flatten13_i_reg_258 : STD_LOGIC_VECTOR (13 downto 0);
    signal args07_0_0_i_reg_269 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_i_reg_280 : STD_LOGIC_VECTOR (11 downto 0);
    signal args17_0_0_i_reg_291 : STD_LOGIC_VECTOR (4 downto 0);
    signal args27_0_0_i_reg_302 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln894_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln894_reg_873 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln884_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln884_reg_878_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln884_reg_878_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln884_reg_878_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln884_reg_878_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln884_fu_333_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln894_1_fu_359_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln894_1_reg_887 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln894_3_fu_435_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln894_3_reg_892 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_addr_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_addr_reg_897_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln886_fu_488_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln885_fu_500_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln1495_1_fu_565_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1495_1_reg_923 : STD_LOGIC_VECTOR (4 downto 0);
    signal l_i_fu_591_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_i_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln943_fu_599_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_937 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln935_fu_854_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_reg_942 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_phi_mux_args07_0_0_i_phi_fu_273_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_args17_0_0_i_phi_fu_295_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln892_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln894_3_fu_477_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal result_offset1_i_fu_313_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln885_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln884_1_fu_339_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_i_fu_367_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_i_fu_379_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln894_2_fu_387_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln894_1_fu_375_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln886_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln894_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln894_fu_351_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln894_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln894_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln885_fu_415_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln894_fu_391_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln894_3_fu_443_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln894_1_fu_447_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_453_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln894_2_fu_427_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln894_4_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln894_2_fu_471_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln885_1_fu_494_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_862_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln_i_fu_520_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_529_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1495_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1495_fu_551_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_i_fu_542_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_i_fu_573_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_7_i_fu_583_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln944_fu_617_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_623_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_639_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln947_fu_643_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln947_fu_649_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln947_fu_653_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln947_fu_659_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln947_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_676_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln944_fu_613_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln949_fu_690_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_3_i_fu_696_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln947_1_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln958_fu_726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_741_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_751_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln957_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln958_2_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln958_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln958_1_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln958_fu_761_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_i_fu_715_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln961_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln958_fu_767_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln961_fu_779_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln_i_fu_785_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_4_fu_799_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_fu_815_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_fu_807_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_820_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_i_fu_826_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_9_i_fu_834_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln738_fu_846_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln935_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln739_fu_850_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component test_mac_muladd_1Cee IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component relu_bn8_a_batchnCce IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component relu_bn8_b_batchnCde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    a_batchnorm8_V_U : component relu_bn8_a_batchnCce
    generic map (
        DataWidth => 12,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_batchnorm8_V_address0,
        ce0 => a_batchnorm8_V_ce0,
        q0 => a_batchnorm8_V_q0);

    b_batchnorm8_V_U : component relu_bn8_b_batchnCde
    generic map (
        DataWidth => 22,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_batchnorm8_V_address0,
        ce0 => b_batchnorm8_V_ce0,
        q0 => b_batchnorm8_V_q0);

    test_mac_muladd_1Cee_U922 : component test_mac_muladd_1Cee
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 22,
        dout_WIDTH => 26)
    port map (
        din0 => a_batchnorm8_V_q0,
        din1 => conv8_pipe_15_V_V_dout,
        din2 => b_batchnorm8_V_q0,
        dout => grp_fu_862_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((result_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((not(((result_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    args07_0_0_i_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln884_reg_878 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                args07_0_0_i_reg_269 <= select_ln894_1_reg_887;
            elsif ((not(((result_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                args07_0_0_i_reg_269 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    args17_0_0_i_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln884_reg_878 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                args17_0_0_i_reg_291 <= select_ln894_3_reg_892;
            elsif ((not(((result_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                args17_0_0_i_reg_291 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    args27_0_0_i_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln884_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                args27_0_0_i_reg_302 <= add_ln886_fu_488_p2;
            elsif ((not(((result_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                args27_0_0_i_reg_302 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_i_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln884_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten13_i_reg_258 <= add_ln884_fu_333_p2;
            elsif ((not(((result_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_i_reg_258 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_i_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln884_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_i_reg_280 <= select_ln885_fu_500_p3;
            elsif ((not(((result_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_i_reg_280 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln884_reg_878 <= icmp_ln884_fu_327_p2;
                icmp_ln884_reg_878_pp0_iter1_reg <= icmp_ln884_reg_878;
                result_addr_reg_897_pp0_iter1_reg <= result_addr_reg_897;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln884_reg_878_pp0_iter2_reg <= icmp_ln884_reg_878_pp0_iter1_reg;
                icmp_ln884_reg_878_pp0_iter3_reg <= icmp_ln884_reg_878_pp0_iter2_reg;
                icmp_ln884_reg_878_pp0_iter4_reg <= icmp_ln884_reg_878_pp0_iter3_reg;
                icmp_ln884_reg_878_pp0_iter5_reg <= icmp_ln884_reg_878_pp0_iter4_reg;
                icmp_ln884_reg_878_pp0_iter6_reg <= icmp_ln884_reg_878_pp0_iter5_reg;
                icmp_ln884_reg_878_pp0_iter7_reg <= icmp_ln884_reg_878_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln884_reg_878 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                l_i_reg_932 <= l_i_fu_591_p3;
                select_ln1495_1_reg_923 <= select_ln1495_1_fu_565_p3;
                trunc_ln943_reg_937 <= trunc_ln943_fu_599_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln884_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                result_addr_reg_897 <= add_ln894_3_fu_477_p2(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln884_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln894_1_reg_887 <= select_ln894_1_fu_359_p3;
                select_ln894_3_reg_892 <= select_ln894_3_fu_435_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln884_reg_878_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln935_reg_942 <= select_ln935_fu_854_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((result_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    zext_ln894_reg_873(29 downto 0) <= zext_ln894_fu_323_p1(29 downto 0);
            end if;
        end if;
    end process;
    zext_ln894_reg_873(63 downto 30) <= "0000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, result_offset_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, icmp_ln884_fu_327_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((result_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln884_fu_327_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln884_fu_327_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_batchnorm8_V_address0 <= zext_ln892_fu_465_p1(6 - 1 downto 0);

    a_batchnorm8_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_batchnorm8_V_ce0 <= ap_const_logic_1;
        else 
            a_batchnorm8_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln884_1_fu_339_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_args07_0_0_i_phi_fu_273_p4));
    add_ln884_fu_333_p2 <= std_logic_vector(unsigned(indvar_flatten13_i_reg_258) + unsigned(ap_const_lv14_1));
    add_ln885_1_fu_494_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(indvar_flatten_i_reg_280));
    add_ln885_fu_415_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln894_fu_351_p3));
    add_ln886_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(select_ln894_2_fu_427_p3));
    add_ln894_1_fu_447_p2 <= std_logic_vector(unsigned(add_ln894_fu_391_p2) + unsigned(zext_ln894_3_fu_443_p1));
    add_ln894_2_fu_471_p2 <= std_logic_vector(unsigned(zext_ln894_4_fu_461_p1) + unsigned(zext_ln892_fu_465_p1));
    add_ln894_3_fu_477_p2 <= std_logic_vector(unsigned(zext_ln894_reg_873) + unsigned(add_ln894_2_fu_471_p2));
    add_ln894_fu_391_p2 <= std_logic_vector(unsigned(zext_ln894_2_fu_387_p1) + unsigned(zext_ln894_1_fu_375_p1));
    add_ln944_fu_617_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_608_p2));
    add_ln949_fu_690_p2 <= std_logic_vector(unsigned(ap_const_lv5_8) + unsigned(trunc_ln944_fu_613_p1));
    add_ln958_fu_735_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_fu_608_p2));
    add_ln961_fu_779_p2 <= std_logic_vector(unsigned(zext_ln961_fu_775_p1) + unsigned(select_ln958_fu_767_p3));
    add_ln964_fu_820_p2 <= std_logic_vector(unsigned(sub_ln964_fu_815_p2) + unsigned(select_ln964_fu_807_p3));
    and_ln894_fu_409_p2 <= (xor_ln894_fu_397_p2 and icmp_ln886_fu_403_p2);
    and_ln947_1_fu_670_p2 <= (icmp_ln947_fu_633_p2 and icmp_ln947_1_fu_664_p2);
    and_ln947_fu_659_p2 <= (select_ln1495_1_reg_923 and lshr_ln947_fu_653_p2);
    and_ln949_fu_703_p2 <= (xor_ln949_fu_684_p2 and p_Result_3_i_fu_696_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(conv8_pipe_15_V_V_empty_n, m_axi_result_BVALID, ap_enable_reg_pp0_iter1, icmp_ln884_reg_878, ap_enable_reg_pp0_iter8, icmp_ln884_reg_878_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln884_reg_878_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_result_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((icmp_ln884_reg_878 = ap_const_lv1_0) and (conv8_pipe_15_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(conv8_pipe_15_V_V_empty_n, m_axi_result_BVALID, ap_enable_reg_pp0_iter1, icmp_ln884_reg_878, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, icmp_ln884_reg_878_pp0_iter7_reg, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln884_reg_878_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_result_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln884_reg_878 = ap_const_lv1_0) and (conv8_pipe_15_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(conv8_pipe_15_V_V_empty_n, m_axi_result_BVALID, ap_enable_reg_pp0_iter1, icmp_ln884_reg_878, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, icmp_ln884_reg_878_pp0_iter7_reg, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln884_reg_878_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_result_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln884_reg_878 = ap_const_lv1_0) and (conv8_pipe_15_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, result_offset_empty_n)
    begin
                ap_block_state1 <= ((result_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter8_assign_proc : process(m_axi_result_BVALID, icmp_ln884_reg_878_pp0_iter7_reg)
    begin
                ap_block_state10_pp0_stage0_iter8 <= ((icmp_ln884_reg_878_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_result_BVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(conv8_pipe_15_V_V_empty_n, icmp_ln884_reg_878)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln884_reg_878 = ap_const_lv1_0) and (conv8_pipe_15_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(m_axi_result_AWREADY, icmp_ln884_reg_878_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((icmp_ln884_reg_878_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_result_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_result_WREADY, icmp_ln884_reg_878_pp0_iter2_reg)
    begin
                ap_block_state5_io <= ((icmp_ln884_reg_878_pp0_iter2_reg = ap_const_lv1_0) and (m_axi_result_WREADY = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln884_fu_327_p2)
    begin
        if ((icmp_ln884_fu_327_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_args07_0_0_i_phi_fu_273_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln884_reg_878, args07_0_0_i_reg_269, select_ln894_1_reg_887)
    begin
        if (((icmp_ln884_reg_878 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_args07_0_0_i_phi_fu_273_p4 <= select_ln894_1_reg_887;
        else 
            ap_phi_mux_args07_0_0_i_phi_fu_273_p4 <= args07_0_0_i_reg_269;
        end if; 
    end process;


    ap_phi_mux_args17_0_0_i_phi_fu_295_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln884_reg_878, args17_0_0_i_reg_291, select_ln894_3_reg_892)
    begin
        if (((icmp_ln884_reg_878 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_args17_0_0_i_phi_fu_295_p4 <= select_ln894_3_reg_892;
        else 
            ap_phi_mux_args17_0_0_i_phi_fu_295_p4 <= args17_0_0_i_reg_291;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_batchnorm8_V_address0 <= zext_ln892_fu_465_p1(6 - 1 downto 0);

    b_batchnorm8_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_batchnorm8_V_ce0 <= ap_const_logic_1;
        else 
            b_batchnorm8_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln739_fu_850_p1 <= trunc_ln738_fu_846_p1;

    conv8_pipe_15_V_V_blk_n_assign_proc : process(conv8_pipe_15_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln884_reg_878)
    begin
        if (((icmp_ln884_reg_878 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            conv8_pipe_15_V_V_blk_n <= conv8_pipe_15_V_V_empty_n;
        else 
            conv8_pipe_15_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    conv8_pipe_15_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln884_reg_878, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln884_reg_878 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv8_pipe_15_V_V_read <= ap_const_logic_1;
        else 
            conv8_pipe_15_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1495_fu_536_p2 <= "1" when (signed(trunc_ln_i_fu_520_p4) > signed(ap_const_lv16_100)) else "0";
    icmp_ln884_fu_327_p2 <= "1" when (indvar_flatten13_i_reg_258 = ap_const_lv14_3200) else "0";
    icmp_ln885_fu_345_p2 <= "1" when (indvar_flatten_i_reg_280 = ap_const_lv12_500) else "0";
    icmp_ln886_fu_403_p2 <= "1" when (args27_0_0_i_reg_302 = ap_const_lv7_40) else "0";
    icmp_ln935_fu_603_p2 <= "1" when (select_ln1495_1_reg_923 = ap_const_lv5_0) else "0";
    icmp_ln947_1_fu_664_p2 <= "0" when (and_ln947_fu_659_p2 = ap_const_lv5_0) else "1";
    icmp_ln947_fu_633_p2 <= "1" when (signed(tmp_2_fu_623_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_fu_729_p2 <= "1" when (signed(add_ln944_fu_617_p2) > signed(ap_const_lv32_0)) else "0";
    
    l_i_fu_591_p3_proc : process(p_Result_7_i_fu_583_p3)
    begin
        l_i_fu_591_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_7_i_fu_583_p3(i) = '1' then
                l_i_fu_591_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lshr_ln947_fu_653_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv5_1F),to_integer(unsigned('0' & zext_ln947_fu_649_p1(5-1 downto 0)))));
    lshr_ln958_fu_741_p2 <= std_logic_vector(shift_right(unsigned(zext_ln958_fu_726_p1),to_integer(unsigned('0' & add_ln958_fu_735_p2(31-1 downto 0)))));
    lshr_ln_i_fu_785_p4 <= add_ln961_fu_779_p2(63 downto 1);
    m_axi_result_ARADDR <= ap_const_lv32_0;
    m_axi_result_ARBURST <= ap_const_lv2_0;
    m_axi_result_ARCACHE <= ap_const_lv4_0;
    m_axi_result_ARID <= ap_const_lv1_0;
    m_axi_result_ARLEN <= ap_const_lv32_0;
    m_axi_result_ARLOCK <= ap_const_lv2_0;
    m_axi_result_ARPROT <= ap_const_lv3_0;
    m_axi_result_ARQOS <= ap_const_lv4_0;
    m_axi_result_ARREGION <= ap_const_lv4_0;
    m_axi_result_ARSIZE <= ap_const_lv3_0;
    m_axi_result_ARUSER <= ap_const_lv1_0;
    m_axi_result_ARVALID <= ap_const_logic_0;
    m_axi_result_AWADDR <= result_addr_reg_897_pp0_iter1_reg;
    m_axi_result_AWBURST <= ap_const_lv2_0;
    m_axi_result_AWCACHE <= ap_const_lv4_0;
    m_axi_result_AWID <= ap_const_lv1_0;
    m_axi_result_AWLEN <= ap_const_lv32_1;
    m_axi_result_AWLOCK <= ap_const_lv2_0;
    m_axi_result_AWPROT <= ap_const_lv3_0;
    m_axi_result_AWQOS <= ap_const_lv4_0;
    m_axi_result_AWREGION <= ap_const_lv4_0;
    m_axi_result_AWSIZE <= ap_const_lv3_0;
    m_axi_result_AWUSER <= ap_const_lv1_0;

    m_axi_result_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln884_reg_878_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln884_reg_878_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_result_AWVALID <= ap_const_logic_1;
        else 
            m_axi_result_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_result_BREADY_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln884_reg_878_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln884_reg_878_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_result_BREADY <= ap_const_logic_1;
        else 
            m_axi_result_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_result_RREADY <= ap_const_logic_0;
    m_axi_result_WDATA <= select_ln935_reg_942;
    m_axi_result_WID <= ap_const_lv1_0;
    m_axi_result_WLAST <= ap_const_logic_0;
    m_axi_result_WSTRB <= ap_const_lv4_F;
    m_axi_result_WUSER <= ap_const_lv1_0;

    m_axi_result_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln884_reg_878_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln884_reg_878_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_result_WVALID <= ap_const_logic_1;
        else 
            m_axi_result_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1495_fu_559_p2 <= (tmp_1_fu_529_p3 or icmp_ln1495_fu_536_p2);
    or_ln894_fu_421_p2 <= (icmp_ln885_fu_345_p2 or and_ln894_fu_409_p2);
    or_ln949_fu_709_p2 <= (and_ln949_fu_703_p2 or and_ln947_1_fu_670_p2);
    or_ln_i_fu_715_p3 <= (ap_const_lv31_0 & or_ln949_fu_709_p2);
    p_Result_3_i_fu_696_p3 <= select_ln1495_1_reg_923(to_integer(unsigned(add_ln949_fu_690_p2)) downto to_integer(unsigned(add_ln949_fu_690_p2))) when (to_integer(unsigned(add_ln949_fu_690_p2))>= 0 and to_integer(unsigned(add_ln949_fu_690_p2))<=4) else "-";
    p_Result_7_i_fu_583_p3 <= (ap_const_lv27_7FFFFFF & p_Result_i_fu_573_p4);
    p_Result_9_i_fu_834_p5 <= (zext_ln962_fu_795_p1(63 downto 32) & tmp_5_i_fu_826_p3 & zext_ln962_fu_795_p1(22 downto 0));
    
    p_Result_i_fu_573_p4_proc : process(select_ln1495_1_fu_565_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(5+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(5+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(5 - 1 downto 0);
    variable p_Result_i_fu_573_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(5 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(5 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(5 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_4(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := select_ln1495_1_fu_565_p3;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(5-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(5-1-unsigned(ap_const_lv32_4(3-1 downto 0)));
            for p_Result_i_fu_573_p4_i in 0 to 5-1 loop
                v0_cpy(p_Result_i_fu_573_p4_i) := select_ln1495_1_fu_565_p3(5-1-p_Result_i_fu_573_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(5-1 downto 0)))));
        res_mask := res_mask(5-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_i_fu_573_p4 <= resvalue(5-1 downto 0);
    end process;


    result_blk_n_AW_assign_proc : process(m_axi_result_AWREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln884_reg_878_pp0_iter1_reg)
    begin
        if (((icmp_ln884_reg_878_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            result_blk_n_AW <= m_axi_result_AWREADY;
        else 
            result_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    result_blk_n_B_assign_proc : process(m_axi_result_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln884_reg_878_pp0_iter7_reg)
    begin
        if (((icmp_ln884_reg_878_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            result_blk_n_B <= m_axi_result_BVALID;
        else 
            result_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    result_blk_n_W_assign_proc : process(m_axi_result_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln884_reg_878_pp0_iter2_reg)
    begin
        if (((icmp_ln884_reg_878_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            result_blk_n_W <= m_axi_result_WREADY;
        else 
            result_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    result_offset1_i_fu_313_p4 <= result_offset_dout(31 downto 2);

    result_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, result_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            result_offset_blk_n <= result_offset_empty_n;
        else 
            result_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    result_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, result_offset_empty_n)
    begin
        if ((not(((result_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            result_offset_read <= ap_const_logic_1;
        else 
            result_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1495_1_fu_565_p3 <= 
        select_ln1495_fu_551_p3 when (or_ln1495_fu_559_p2(0) = '1') else 
        tmp_7_i_fu_542_p4;
    select_ln1495_fu_551_p3 <= 
        ap_const_lv5_0 when (tmp_1_fu_529_p3(0) = '1') else 
        ap_const_lv5_10;
    select_ln885_fu_500_p3 <= 
        ap_const_lv12_1 when (icmp_ln885_fu_345_p2(0) = '1') else 
        add_ln885_1_fu_494_p2;
    select_ln894_1_fu_359_p3 <= 
        add_ln884_1_fu_339_p2 when (icmp_ln885_fu_345_p2(0) = '1') else 
        ap_phi_mux_args07_0_0_i_phi_fu_273_p4;
    select_ln894_2_fu_427_p3 <= 
        ap_const_lv7_0 when (or_ln894_fu_421_p2(0) = '1') else 
        args27_0_0_i_reg_302;
    select_ln894_3_fu_435_p3 <= 
        add_ln885_fu_415_p2 when (and_ln894_fu_409_p2(0) = '1') else 
        select_ln894_fu_351_p3;
    select_ln894_fu_351_p3 <= 
        ap_const_lv5_0 when (icmp_ln885_fu_345_p2(0) = '1') else 
        ap_phi_mux_args17_0_0_i_phi_fu_295_p4;
    select_ln935_fu_854_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_fu_603_p2(0) = '1') else 
        bitcast_ln739_fu_850_p1;
    select_ln958_fu_767_p3 <= 
        zext_ln958_1_fu_747_p1 when (icmp_ln958_fu_729_p2(0) = '1') else 
        shl_ln958_fu_761_p2;
    select_ln964_fu_807_p3 <= 
        ap_const_lv8_7F when (tmp_4_fu_799_p3(0) = '1') else 
        ap_const_lv8_7E;
    shl_ln958_fu_761_p2 <= std_logic_vector(shift_left(unsigned(zext_ln957_fu_723_p1),to_integer(unsigned('0' & zext_ln958_2_fu_757_p1(31-1 downto 0)))));
    sub_ln944_fu_608_p2 <= std_logic_vector(unsigned(ap_const_lv32_5) - unsigned(l_i_reg_932));
    sub_ln947_fu_643_p2 <= std_logic_vector(signed(ap_const_lv3_6) - signed(trunc_ln947_fu_639_p1));
    sub_ln958_fu_751_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_fu_608_p2));
    sub_ln964_fu_815_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) - unsigned(trunc_ln943_reg_937));
    tmp_1_fu_529_p3 <= grp_fu_862_p3(25 downto 25);
    tmp_1_i_fu_367_p3 <= (select_ln894_1_fu_359_p3 & ap_const_lv4_0);
    tmp_2_fu_623_p4 <= add_ln944_fu_617_p2(31 downto 1);
    tmp_2_i_fu_379_p3 <= (select_ln894_1_fu_359_p3 & ap_const_lv2_0);
    tmp_3_fu_676_p3 <= add_ln944_fu_617_p2(31 downto 31);
    tmp_4_fu_799_p3 <= add_ln961_fu_779_p2(25 downto 25);
    tmp_5_i_fu_826_p3 <= (ap_const_lv1_0 & add_ln964_fu_820_p2);
    tmp_7_i_fu_542_p4 <= grp_fu_862_p3(18 downto 14);
    tmp_fu_453_p3 <= (add_ln894_1_fu_447_p2 & ap_const_lv6_0);
    trunc_ln738_fu_846_p1 <= p_Result_9_i_fu_834_p5(32 - 1 downto 0);
    trunc_ln943_fu_599_p1 <= l_i_fu_591_p3(8 - 1 downto 0);
    trunc_ln944_fu_613_p1 <= sub_ln944_fu_608_p2(5 - 1 downto 0);
    trunc_ln947_fu_639_p1 <= sub_ln944_fu_608_p2(3 - 1 downto 0);
    trunc_ln_i_fu_520_p4 <= grp_fu_862_p3(25 downto 10);
    xor_ln894_fu_397_p2 <= (icmp_ln885_fu_345_p2 xor ap_const_lv1_1);
    xor_ln949_fu_684_p2 <= (tmp_3_fu_676_p3 xor ap_const_lv1_1);
    zext_ln892_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln894_2_fu_427_p3),64));
    zext_ln894_1_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_fu_367_p3),9));
    zext_ln894_2_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_i_fu_379_p3),9));
    zext_ln894_3_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln894_3_fu_435_p3),9));
    zext_ln894_4_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_453_p3),64));
    zext_ln894_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_offset1_i_fu_313_p4),64));
    zext_ln947_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_643_p2),5));
    zext_ln957_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1495_1_reg_923),64));
    zext_ln958_1_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln958_fu_741_p2),64));
    zext_ln958_2_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln958_fu_751_p2),64));
    zext_ln958_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1495_1_reg_923),32));
    zext_ln961_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_i_fu_715_p3),64));
    zext_ln962_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_i_fu_785_p4),64));
end behav;
