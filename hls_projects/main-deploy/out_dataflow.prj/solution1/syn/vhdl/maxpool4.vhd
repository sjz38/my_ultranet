-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity maxpool4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    relu4_pipe_8_V_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    relu4_pipe_8_V_V_empty_n : IN STD_LOGIC;
    relu4_pipe_8_V_V_read : OUT STD_LOGIC;
    pool4_pipe_8_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
    pool4_pipe_8_V_V_full_n : IN STD_LOGIC;
    pool4_pipe_8_V_V_write : OUT STD_LOGIC );
end;


architecture behav of maxpool4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal relu4_pipe_8_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln561_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool4_pipe_8_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln578_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln556_fu_329_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln556_reg_643 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln558_fu_341_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln558_reg_651 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln356_fu_371_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln356_reg_656 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln558_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln559_fu_383_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln559_reg_664 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_19_cast_fu_398_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_19_cast_reg_669 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln559_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln561_fu_412_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal add_ln568_fu_444_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln568_reg_688 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln571_fu_450_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln571_reg_693 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln568_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln567_fu_454_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln571_fu_466_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln571_reg_706 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln356_3_fu_496_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln356_3_reg_711 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln571_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln572_1_fu_510_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln572_1_reg_716 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln572_fu_524_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln572_reg_724 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln356_4_fu_534_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln356_4_reg_729 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln572_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln578_fu_582_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln578_reg_742 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal zext_ln579_fu_596_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln579_reg_747 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln579_fu_606_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln579_reg_755 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln579_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln251_fu_632_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal pool4_line_buffer_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal pool4_line_buffer_V_ce0 : STD_LOGIC;
    signal pool4_line_buffer_V_we0 : STD_LOGIC;
    signal pool4_line_buffer_V_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool4_window_buffer_s_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool4_window_buffer_s_ce0 : STD_LOGIC;
    signal pool4_window_buffer_s_we0 : STD_LOGIC;
    signal pool4_window_buffer_s_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal h3_0_0_reg_187 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln567_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_row_0_0_reg_198 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln556_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_col_0_0_reg_209 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_c_0_0_reg_220 : STD_LOGIC_VECTOR (6 downto 0);
    signal block_0_0_reg_231 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_0_0_reg_243 : STD_LOGIC_VECTOR (6 downto 0);
    signal window_row_0_0_reg_254 : STD_LOGIC_VECTOR (1 downto 0);
    signal window_col_0_0_reg_265 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_V_8_reg_276 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_row_0_0_reg_289 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_0_0_reg_300 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_col_0_0_reg_312 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln356_4_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln356_10_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln356_8_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln580_1_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_347_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_359_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln356_1_fu_367_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln356_fu_355_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln356_2_fu_389_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln356_1_fu_393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln356_3_fu_418_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln356_2_fu_422_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_fu_472_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_484_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln356_6_fu_492_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln356_5_fu_480_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_502_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln356_7_fu_530_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln572_fu_514_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln573_fu_539_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln356_9_fu_545_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln356_5_fu_549_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_cast_fu_554_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln356_6_fu_562_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_fu_588_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln580_fu_612_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln580_fu_616_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1494_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component maxpool4_pool4_liouc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component maxpool3_pool3_wik0b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    pool4_line_buffer_V_U : component maxpool4_pool4_liouc
    generic map (
        DataWidth => 5,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool4_line_buffer_V_address0,
        ce0 => pool4_line_buffer_V_ce0,
        we0 => pool4_line_buffer_V_we0,
        d0 => relu4_pipe_8_V_V_dout,
        q0 => pool4_line_buffer_V_q0);

    pool4_window_buffer_s_U : component maxpool3_pool3_wik0b
    generic map (
        DataWidth => 5,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool4_window_buffer_s_address0,
        ce0 => pool4_window_buffer_s_ce0,
        we0 => pool4_window_buffer_s_we0,
        d0 => pool4_line_buffer_V_q0,
        q0 => pool4_window_buffer_s_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln556_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    block_0_0_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln558_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                block_0_0_reg_231 <= ap_const_lv6_0;
            elsif (((icmp_ln568_fu_438_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                block_0_0_reg_231 <= add_ln567_fu_454_p2;
            end if; 
        end if;
    end process;

    c_0_0_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln578_fu_576_p2 = ap_const_lv1_1) and (pool4_pipe_8_V_V_full_n = ap_const_logic_0))) and (icmp_ln578_fu_576_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                c_0_0_reg_243 <= add_ln568_reg_688;
            elsif (((icmp_ln567_fu_432_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                c_0_0_reg_243 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h3_0_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln567_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                h3_0_0_reg_187 <= add_ln556_reg_643;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h3_0_0_reg_187 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    line_c_0_0_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln561_fu_406_p2 = ap_const_lv1_0) and (relu4_pipe_8_V_V_empty_n = ap_const_logic_0))) and (icmp_ln561_fu_406_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                line_c_0_0_reg_220 <= add_ln561_fu_412_p2;
            elsif (((icmp_ln559_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                line_c_0_0_reg_220 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    line_col_0_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln561_fu_406_p2 = ap_const_lv1_0) and (relu4_pipe_8_V_V_empty_n = ap_const_logic_0))) and (icmp_ln561_fu_406_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                line_col_0_0_reg_209 <= add_ln559_reg_664;
            elsif (((icmp_ln558_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                line_col_0_0_reg_209 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    line_row_0_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln559_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                line_row_0_0_reg_198 <= add_ln558_reg_651;
            elsif (((icmp_ln556_fu_323_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                line_row_0_0_reg_198 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_0_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_0_0_reg_300 <= select_ln251_fu_632_p3;
            elsif ((not(((icmp_ln578_fu_576_p2 = ap_const_lv1_1) and (pool4_pipe_8_V_V_full_n = ap_const_logic_0))) and (icmp_ln578_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                p_0_0_reg_300 <= tmp_V_8_reg_276;
            end if; 
        end if;
    end process;

    pool_col_0_0_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                pool_col_0_0_reg_312 <= add_ln579_reg_755;
            elsif ((not(((icmp_ln578_fu_576_p2 = ap_const_lv1_1) and (pool4_pipe_8_V_V_full_n = ap_const_logic_0))) and (icmp_ln578_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                pool_col_0_0_reg_312 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    pool_row_0_0_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln571_fu_460_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                pool_row_0_0_reg_289 <= ap_const_lv2_0;
            elsif (((icmp_ln579_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                pool_row_0_0_reg_289 <= add_ln578_reg_742;
            end if; 
        end if;
    end process;

    tmp_V_8_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln571_fu_460_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                tmp_V_8_reg_276 <= ap_const_lv5_0;
            elsif (((icmp_ln579_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                tmp_V_8_reg_276 <= p_0_0_reg_300;
            end if; 
        end if;
    end process;

    window_col_0_0_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                window_col_0_0_reg_265 <= add_ln572_reg_724;
            elsif (((icmp_ln571_fu_460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_col_0_0_reg_265 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    window_row_0_0_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln572_fu_518_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                window_row_0_0_reg_254 <= add_ln571_reg_706;
            elsif (((icmp_ln568_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_row_0_0_reg_254 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln571_fu_460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    add_ln356_3_reg_711(7 downto 3) <= add_ln356_3_fu_496_p2(7 downto 3);
                    zext_ln572_1_reg_716(2 downto 1) <= zext_ln572_1_fu_510_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln572_fu_518_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                add_ln356_4_reg_729 <= add_ln356_4_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln558_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    add_ln356_reg_656(7 downto 3) <= add_ln356_fu_371_p2(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln556_reg_643 <= add_ln556_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln558_reg_651 <= add_ln558_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln559_reg_664 <= add_ln559_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln568_reg_688 <= add_ln568_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln571_reg_706 <= add_ln571_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln572_reg_724 <= add_ln572_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln578_fu_576_p2 = ap_const_lv1_1) and (pool4_pipe_8_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                add_ln578_reg_742 <= add_ln578_fu_582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln579_reg_755 <= add_ln579_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln559_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_19_cast_reg_669(13 downto 6) <= tmp_19_cast_fu_398_p3(13 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln568_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    zext_ln571_reg_693(6 downto 0) <= zext_ln571_fu_450_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln578_fu_576_p2 = ap_const_lv1_1) and (pool4_pipe_8_V_V_full_n = ap_const_logic_0))) and (icmp_ln578_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    zext_ln579_reg_747(2 downto 1) <= zext_ln579_fu_596_p1(2 downto 1);
            end if;
        end if;
    end process;
    add_ln356_reg_656(2 downto 0) <= "000";
    tmp_19_cast_reg_669(5 downto 0) <= "000000";
    zext_ln571_reg_693(13 downto 7) <= "0000000";
    add_ln356_3_reg_711(2 downto 0) <= "000";
    zext_ln572_1_reg_716(0) <= '0';
    zext_ln572_1_reg_716(3) <= '0';
    zext_ln579_reg_747(0) <= '0';
    zext_ln579_reg_747(3) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, relu4_pipe_8_V_V_empty_n, pool4_pipe_8_V_V_full_n, ap_CS_fsm_state5, icmp_ln561_fu_406_p2, ap_CS_fsm_state11, icmp_ln578_fu_576_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln558_fu_335_p2, ap_CS_fsm_state4, icmp_ln559_fu_377_p2, ap_CS_fsm_state7, icmp_ln568_fu_438_p2, ap_CS_fsm_state8, icmp_ln571_fu_460_p2, ap_CS_fsm_state9, icmp_ln572_fu_518_p2, ap_CS_fsm_state12, icmp_ln579_fu_600_p2, ap_CS_fsm_state6, icmp_ln567_fu_432_p2, icmp_ln556_fu_323_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln556_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln558_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln559_fu_377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((icmp_ln561_fu_406_p2 = ap_const_lv1_0) and (relu4_pipe_8_V_V_empty_n = ap_const_logic_0))) and (icmp_ln561_fu_406_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln561_fu_406_p2 = ap_const_lv1_0) and (relu4_pipe_8_V_V_empty_n = ap_const_logic_0))) and (icmp_ln561_fu_406_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln567_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln568_fu_438_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln571_fu_460_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln572_fu_518_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if ((not(((icmp_ln578_fu_576_p2 = ap_const_lv1_1) and (pool4_pipe_8_V_V_full_n = ap_const_logic_0))) and (icmp_ln578_fu_576_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((icmp_ln578_fu_576_p2 = ap_const_lv1_1) and (pool4_pipe_8_V_V_full_n = ap_const_logic_0))) and (icmp_ln578_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln579_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln356_1_fu_393_p2 <= std_logic_vector(unsigned(zext_ln356_2_fu_389_p1) + unsigned(add_ln356_reg_656));
    add_ln356_2_fu_422_p2 <= std_logic_vector(unsigned(tmp_19_cast_reg_669) + unsigned(zext_ln356_3_fu_418_p1));
    add_ln356_3_fu_496_p2 <= std_logic_vector(unsigned(zext_ln356_6_fu_492_p1) + unsigned(zext_ln356_5_fu_480_p1));
    add_ln356_4_fu_534_p2 <= std_logic_vector(unsigned(zext_ln356_7_fu_530_p1) + unsigned(zext_ln572_1_reg_716));
    add_ln356_5_fu_549_p2 <= std_logic_vector(unsigned(zext_ln356_9_fu_545_p1) + unsigned(add_ln356_3_reg_711));
    add_ln356_6_fu_562_p2 <= std_logic_vector(unsigned(zext_ln571_reg_693) + unsigned(tmp_25_cast_fu_554_p3));
    add_ln356_fu_371_p2 <= std_logic_vector(unsigned(zext_ln356_1_fu_367_p1) + unsigned(zext_ln356_fu_355_p1));
    add_ln556_fu_329_p2 <= std_logic_vector(unsigned(h3_0_0_reg_187) + unsigned(ap_const_lv4_1));
    add_ln558_fu_341_p2 <= std_logic_vector(unsigned(line_row_0_0_reg_198) + unsigned(ap_const_lv2_1));
    add_ln559_fu_383_p2 <= std_logic_vector(unsigned(line_col_0_0_reg_209) + unsigned(ap_const_lv6_1));
    add_ln561_fu_412_p2 <= std_logic_vector(unsigned(line_c_0_0_reg_220) + unsigned(ap_const_lv7_1));
    add_ln567_fu_454_p2 <= std_logic_vector(unsigned(block_0_0_reg_231) + unsigned(ap_const_lv6_2));
    add_ln568_fu_444_p2 <= std_logic_vector(unsigned(c_0_0_reg_243) + unsigned(ap_const_lv7_1));
    add_ln571_fu_466_p2 <= std_logic_vector(unsigned(window_row_0_0_reg_254) + unsigned(ap_const_lv2_1));
    add_ln572_fu_524_p2 <= std_logic_vector(unsigned(window_col_0_0_reg_265) + unsigned(ap_const_lv2_1));
    add_ln573_fu_539_p2 <= std_logic_vector(unsigned(block_0_0_reg_231) + unsigned(zext_ln572_fu_514_p1));
    add_ln578_fu_582_p2 <= std_logic_vector(unsigned(pool_row_0_0_reg_289) + unsigned(ap_const_lv2_1));
    add_ln579_fu_606_p2 <= std_logic_vector(unsigned(pool_col_0_0_reg_312) + unsigned(ap_const_lv2_1));
    add_ln580_fu_616_p2 <= std_logic_vector(unsigned(zext_ln579_reg_747) + unsigned(zext_ln580_fu_612_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state11_assign_proc : process(pool4_pipe_8_V_V_full_n, icmp_ln578_fu_576_p2)
    begin
                ap_block_state11 <= ((icmp_ln578_fu_576_p2 = ap_const_lv1_1) and (pool4_pipe_8_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(relu4_pipe_8_V_V_empty_n, icmp_ln561_fu_406_p2)
    begin
                ap_block_state5 <= ((icmp_ln561_fu_406_p2 = ap_const_lv1_0) and (relu4_pipe_8_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln556_fu_323_p2)
    begin
        if (((icmp_ln556_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    icmp_ln1494_fu_626_p2 <= "1" when (unsigned(pool4_window_buffer_s_q0) > unsigned(p_0_0_reg_300)) else "0";
    icmp_ln556_fu_323_p2 <= "1" when (h3_0_0_reg_187 = ap_const_lv4_A) else "0";
    icmp_ln558_fu_335_p2 <= "1" when (line_row_0_0_reg_198 = ap_const_lv2_2) else "0";
    icmp_ln559_fu_377_p2 <= "1" when (line_col_0_0_reg_209 = ap_const_lv6_28) else "0";
    icmp_ln561_fu_406_p2 <= "1" when (line_c_0_0_reg_220 = ap_const_lv7_40) else "0";
    icmp_ln567_fu_432_p2 <= "1" when (unsigned(block_0_0_reg_231) < unsigned(ap_const_lv6_28)) else "0";
    icmp_ln568_fu_438_p2 <= "1" when (c_0_0_reg_243 = ap_const_lv7_40) else "0";
    icmp_ln571_fu_460_p2 <= "1" when (window_row_0_0_reg_254 = ap_const_lv2_2) else "0";
    icmp_ln572_fu_518_p2 <= "1" when (window_col_0_0_reg_265 = ap_const_lv2_2) else "0";
    icmp_ln578_fu_576_p2 <= "1" when (pool_row_0_0_reg_289 = ap_const_lv2_2) else "0";
    icmp_ln579_fu_600_p2 <= "1" when (pool_col_0_0_reg_312 = ap_const_lv2_2) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln556_fu_323_p2)
    begin
        if (((icmp_ln556_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    pool4_line_buffer_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, zext_ln356_4_fu_427_p1, zext_ln356_10_fu_567_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pool4_line_buffer_V_address0 <= zext_ln356_10_fu_567_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pool4_line_buffer_V_address0 <= zext_ln356_4_fu_427_p1(13 - 1 downto 0);
        else 
            pool4_line_buffer_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    pool4_line_buffer_V_ce0_assign_proc : process(relu4_pipe_8_V_V_empty_n, ap_CS_fsm_state5, icmp_ln561_fu_406_p2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (not(((icmp_ln561_fu_406_p2 = ap_const_lv1_0) and (relu4_pipe_8_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            pool4_line_buffer_V_ce0 <= ap_const_logic_1;
        else 
            pool4_line_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool4_line_buffer_V_we0_assign_proc : process(relu4_pipe_8_V_V_empty_n, ap_CS_fsm_state5, icmp_ln561_fu_406_p2)
    begin
        if ((not(((icmp_ln561_fu_406_p2 = ap_const_lv1_0) and (relu4_pipe_8_V_V_empty_n = ap_const_logic_0))) and (icmp_ln561_fu_406_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pool4_line_buffer_V_we0 <= ap_const_logic_1;
        else 
            pool4_line_buffer_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pool4_pipe_8_V_V_blk_n_assign_proc : process(pool4_pipe_8_V_V_full_n, ap_CS_fsm_state11, icmp_ln578_fu_576_p2)
    begin
        if (((icmp_ln578_fu_576_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            pool4_pipe_8_V_V_blk_n <= pool4_pipe_8_V_V_full_n;
        else 
            pool4_pipe_8_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pool4_pipe_8_V_V_din <= tmp_V_8_reg_276;

    pool4_pipe_8_V_V_write_assign_proc : process(pool4_pipe_8_V_V_full_n, ap_CS_fsm_state11, icmp_ln578_fu_576_p2)
    begin
        if ((not(((icmp_ln578_fu_576_p2 = ap_const_lv1_1) and (pool4_pipe_8_V_V_full_n = ap_const_logic_0))) and (icmp_ln578_fu_576_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            pool4_pipe_8_V_V_write <= ap_const_logic_1;
        else 
            pool4_pipe_8_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    pool4_window_buffer_s_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state10, zext_ln356_8_fu_572_p1, zext_ln580_1_fu_621_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            pool4_window_buffer_s_address0 <= zext_ln580_1_fu_621_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pool4_window_buffer_s_address0 <= zext_ln356_8_fu_572_p1(2 - 1 downto 0);
        else 
            pool4_window_buffer_s_address0 <= "XX";
        end if; 
    end process;


    pool4_window_buffer_s_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            pool4_window_buffer_s_ce0 <= ap_const_logic_1;
        else 
            pool4_window_buffer_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool4_window_buffer_s_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pool4_window_buffer_s_we0 <= ap_const_logic_1;
        else 
            pool4_window_buffer_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    relu4_pipe_8_V_V_blk_n_assign_proc : process(relu4_pipe_8_V_V_empty_n, ap_CS_fsm_state5, icmp_ln561_fu_406_p2)
    begin
        if (((icmp_ln561_fu_406_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            relu4_pipe_8_V_V_blk_n <= relu4_pipe_8_V_V_empty_n;
        else 
            relu4_pipe_8_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    relu4_pipe_8_V_V_read_assign_proc : process(relu4_pipe_8_V_V_empty_n, ap_CS_fsm_state5, icmp_ln561_fu_406_p2)
    begin
        if ((not(((icmp_ln561_fu_406_p2 = ap_const_lv1_0) and (relu4_pipe_8_V_V_empty_n = ap_const_logic_0))) and (icmp_ln561_fu_406_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            relu4_pipe_8_V_V_read <= ap_const_logic_1;
        else 
            relu4_pipe_8_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln251_fu_632_p3 <= 
        pool4_window_buffer_s_q0 when (icmp_ln1494_fu_626_p2(0) = '1') else 
        p_0_0_reg_300;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_484_p3 <= (window_row_0_0_reg_254 & ap_const_lv3_0);
    tmp_11_fu_502_p3 <= (window_row_0_0_reg_254 & ap_const_lv1_0);
    tmp_12_fu_588_p3 <= (pool_row_0_0_reg_289 & ap_const_lv1_0);
    tmp_19_cast_fu_398_p3 <= (add_ln356_1_fu_393_p2 & ap_const_lv6_0);
    tmp_1_fu_347_p3 <= (line_row_0_0_reg_198 & ap_const_lv5_0);
    tmp_25_cast_fu_554_p3 <= (add_ln356_5_fu_549_p2 & ap_const_lv6_0);
    tmp_2_fu_359_p3 <= (line_row_0_0_reg_198 & ap_const_lv3_0);
    tmp_9_fu_472_p3 <= (window_row_0_0_reg_254 & ap_const_lv5_0);
    zext_ln356_10_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln356_6_fu_562_p2),64));
    zext_ln356_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_359_p3),8));
    zext_ln356_2_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_col_0_0_reg_209),8));
    zext_ln356_3_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_c_0_0_reg_220),14));
    zext_ln356_4_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln356_2_fu_422_p2),64));
    zext_ln356_5_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_472_p3),8));
    zext_ln356_6_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_484_p3),8));
    zext_ln356_7_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_col_0_0_reg_265),4));
    zext_ln356_8_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln356_4_reg_729),64));
    zext_ln356_9_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln573_fu_539_p2),8));
    zext_ln356_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_347_p3),8));
    zext_ln571_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_0_reg_243),14));
    zext_ln572_1_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_502_p3),4));
    zext_ln572_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_col_0_0_reg_265),6));
    zext_ln579_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_588_p3),4));
    zext_ln580_1_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln580_fu_616_p2),64));
    zext_ln580_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_col_0_0_reg_312),4));
end behav;
