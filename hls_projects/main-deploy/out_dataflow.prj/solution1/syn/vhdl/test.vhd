-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity test is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of test is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "test,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=2447789,HLS_SYN_TPT=1946030,HLS_SYN_MEM=145,HLS_SYN_DSP=257,HLS_SYN_FF=33791,HLS_SYN_LUT=64030,HLS_VERSION=2019_2_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal input_image : STD_LOGIC_VECTOR (31 downto 0);
    signal result : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal conv113_U0_ap_start : STD_LOGIC;
    signal conv113_U0_start_full_n : STD_LOGIC;
    signal conv113_U0_ap_done : STD_LOGIC;
    signal conv113_U0_ap_continue : STD_LOGIC;
    signal conv113_U0_ap_idle : STD_LOGIC;
    signal conv113_U0_ap_ready : STD_LOGIC;
    signal conv113_U0_start_out : STD_LOGIC;
    signal conv113_U0_start_write : STD_LOGIC;
    signal conv113_U0_m_axi_input_image_AWVALID : STD_LOGIC;
    signal conv113_U0_m_axi_input_image_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal conv113_U0_m_axi_input_image_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal conv113_U0_m_axi_input_image_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal conv113_U0_m_axi_input_image_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal conv113_U0_m_axi_input_image_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal conv113_U0_m_axi_input_image_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal conv113_U0_m_axi_input_image_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal conv113_U0_m_axi_input_image_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal conv113_U0_m_axi_input_image_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal conv113_U0_m_axi_input_image_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal conv113_U0_m_axi_input_image_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal conv113_U0_m_axi_input_image_WVALID : STD_LOGIC;
    signal conv113_U0_m_axi_input_image_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal conv113_U0_m_axi_input_image_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal conv113_U0_m_axi_input_image_WLAST : STD_LOGIC;
    signal conv113_U0_m_axi_input_image_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal conv113_U0_m_axi_input_image_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal conv113_U0_m_axi_input_image_ARVALID : STD_LOGIC;
    signal conv113_U0_m_axi_input_image_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal conv113_U0_m_axi_input_image_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal conv113_U0_m_axi_input_image_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal conv113_U0_m_axi_input_image_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal conv113_U0_m_axi_input_image_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal conv113_U0_m_axi_input_image_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal conv113_U0_m_axi_input_image_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal conv113_U0_m_axi_input_image_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal conv113_U0_m_axi_input_image_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal conv113_U0_m_axi_input_image_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal conv113_U0_m_axi_input_image_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal conv113_U0_m_axi_input_image_RREADY : STD_LOGIC;
    signal conv113_U0_m_axi_input_image_BREADY : STD_LOGIC;
    signal conv113_U0_conv1_pipe_1_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv113_U0_conv1_pipe_1_V_V_write : STD_LOGIC;
    signal conv113_U0_result_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv113_U0_result_out_write : STD_LOGIC;
    signal relu_bn1_U0_ap_start : STD_LOGIC;
    signal relu_bn1_U0_ap_done : STD_LOGIC;
    signal relu_bn1_U0_ap_continue : STD_LOGIC;
    signal relu_bn1_U0_ap_idle : STD_LOGIC;
    signal relu_bn1_U0_ap_ready : STD_LOGIC;
    signal relu_bn1_U0_start_out : STD_LOGIC;
    signal relu_bn1_U0_start_write : STD_LOGIC;
    signal relu_bn1_U0_conv1_pipe_1_V_V_read : STD_LOGIC;
    signal relu_bn1_U0_relu1_pipe_2_V_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal relu_bn1_U0_relu1_pipe_2_V_V_write : STD_LOGIC;
    signal maxpool1_U0_ap_start : STD_LOGIC;
    signal maxpool1_U0_ap_done : STD_LOGIC;
    signal maxpool1_U0_ap_continue : STD_LOGIC;
    signal maxpool1_U0_ap_idle : STD_LOGIC;
    signal maxpool1_U0_ap_ready : STD_LOGIC;
    signal maxpool1_U0_start_out : STD_LOGIC;
    signal maxpool1_U0_start_write : STD_LOGIC;
    signal maxpool1_U0_relu1_pipe_2_V_V_read : STD_LOGIC;
    signal maxpool1_U0_pool1_pipe_2_V_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal maxpool1_U0_pool1_pipe_2_V_V_write : STD_LOGIC;
    signal conv2_U0_ap_start : STD_LOGIC;
    signal conv2_U0_ap_done : STD_LOGIC;
    signal conv2_U0_ap_continue : STD_LOGIC;
    signal conv2_U0_ap_idle : STD_LOGIC;
    signal conv2_U0_ap_ready : STD_LOGIC;
    signal conv2_U0_start_out : STD_LOGIC;
    signal conv2_U0_start_write : STD_LOGIC;
    signal conv2_U0_pool1_pipe_2_V_V_read : STD_LOGIC;
    signal conv2_U0_conv2_pipe_3_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv2_U0_conv2_pipe_3_V_V_write : STD_LOGIC;
    signal relu_bn2_U0_ap_start : STD_LOGIC;
    signal relu_bn2_U0_ap_done : STD_LOGIC;
    signal relu_bn2_U0_ap_continue : STD_LOGIC;
    signal relu_bn2_U0_ap_idle : STD_LOGIC;
    signal relu_bn2_U0_ap_ready : STD_LOGIC;
    signal relu_bn2_U0_start_out : STD_LOGIC;
    signal relu_bn2_U0_start_write : STD_LOGIC;
    signal relu_bn2_U0_conv2_pipe_3_V_V_read : STD_LOGIC;
    signal relu_bn2_U0_relu2_pipe_4_V_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal relu_bn2_U0_relu2_pipe_4_V_V_write : STD_LOGIC;
    signal maxpool2_U0_ap_start : STD_LOGIC;
    signal maxpool2_U0_ap_done : STD_LOGIC;
    signal maxpool2_U0_ap_continue : STD_LOGIC;
    signal maxpool2_U0_ap_idle : STD_LOGIC;
    signal maxpool2_U0_ap_ready : STD_LOGIC;
    signal maxpool2_U0_start_out : STD_LOGIC;
    signal maxpool2_U0_start_write : STD_LOGIC;
    signal maxpool2_U0_relu2_pipe_4_V_V_read : STD_LOGIC;
    signal maxpool2_U0_pool2_pipe_4_V_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal maxpool2_U0_pool2_pipe_4_V_V_write : STD_LOGIC;
    signal conv3_U0_ap_start : STD_LOGIC;
    signal conv3_U0_ap_done : STD_LOGIC;
    signal conv3_U0_ap_continue : STD_LOGIC;
    signal conv3_U0_ap_idle : STD_LOGIC;
    signal conv3_U0_ap_ready : STD_LOGIC;
    signal conv3_U0_start_out : STD_LOGIC;
    signal conv3_U0_start_write : STD_LOGIC;
    signal conv3_U0_pool2_pipe_4_V_V_read : STD_LOGIC;
    signal conv3_U0_conv3_pipe_5_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_U0_conv3_pipe_5_V_V_write : STD_LOGIC;
    signal relu_bn3_U0_ap_start : STD_LOGIC;
    signal relu_bn3_U0_ap_done : STD_LOGIC;
    signal relu_bn3_U0_ap_continue : STD_LOGIC;
    signal relu_bn3_U0_ap_idle : STD_LOGIC;
    signal relu_bn3_U0_ap_ready : STD_LOGIC;
    signal relu_bn3_U0_start_out : STD_LOGIC;
    signal relu_bn3_U0_start_write : STD_LOGIC;
    signal relu_bn3_U0_conv3_pipe_5_V_V_read : STD_LOGIC;
    signal relu_bn3_U0_relu3_pipe_6_V_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal relu_bn3_U0_relu3_pipe_6_V_V_write : STD_LOGIC;
    signal maxpool3_U0_ap_start : STD_LOGIC;
    signal maxpool3_U0_ap_done : STD_LOGIC;
    signal maxpool3_U0_ap_continue : STD_LOGIC;
    signal maxpool3_U0_ap_idle : STD_LOGIC;
    signal maxpool3_U0_ap_ready : STD_LOGIC;
    signal maxpool3_U0_start_out : STD_LOGIC;
    signal maxpool3_U0_start_write : STD_LOGIC;
    signal maxpool3_U0_relu3_pipe_6_V_V_read : STD_LOGIC;
    signal maxpool3_U0_pool3_pipe_6_V_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal maxpool3_U0_pool3_pipe_6_V_V_write : STD_LOGIC;
    signal conv4_U0_ap_start : STD_LOGIC;
    signal conv4_U0_ap_done : STD_LOGIC;
    signal conv4_U0_ap_continue : STD_LOGIC;
    signal conv4_U0_ap_idle : STD_LOGIC;
    signal conv4_U0_ap_ready : STD_LOGIC;
    signal conv4_U0_start_out : STD_LOGIC;
    signal conv4_U0_start_write : STD_LOGIC;
    signal conv4_U0_pool3_pipe_6_V_V_read : STD_LOGIC;
    signal conv4_U0_conv4_pipe_7_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv4_U0_conv4_pipe_7_V_V_write : STD_LOGIC;
    signal relu_bn4_U0_ap_start : STD_LOGIC;
    signal relu_bn4_U0_ap_done : STD_LOGIC;
    signal relu_bn4_U0_ap_continue : STD_LOGIC;
    signal relu_bn4_U0_ap_idle : STD_LOGIC;
    signal relu_bn4_U0_ap_ready : STD_LOGIC;
    signal relu_bn4_U0_start_out : STD_LOGIC;
    signal relu_bn4_U0_start_write : STD_LOGIC;
    signal relu_bn4_U0_conv4_pipe_7_V_V_read : STD_LOGIC;
    signal relu_bn4_U0_relu4_pipe_8_V_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal relu_bn4_U0_relu4_pipe_8_V_V_write : STD_LOGIC;
    signal maxpool4_U0_ap_start : STD_LOGIC;
    signal maxpool4_U0_ap_done : STD_LOGIC;
    signal maxpool4_U0_ap_continue : STD_LOGIC;
    signal maxpool4_U0_ap_idle : STD_LOGIC;
    signal maxpool4_U0_ap_ready : STD_LOGIC;
    signal maxpool4_U0_start_out : STD_LOGIC;
    signal maxpool4_U0_start_write : STD_LOGIC;
    signal maxpool4_U0_relu4_pipe_8_V_V_read : STD_LOGIC;
    signal maxpool4_U0_pool4_pipe_8_V_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal maxpool4_U0_pool4_pipe_8_V_V_write : STD_LOGIC;
    signal conv5_U0_ap_start : STD_LOGIC;
    signal conv5_U0_ap_done : STD_LOGIC;
    signal conv5_U0_ap_continue : STD_LOGIC;
    signal conv5_U0_ap_idle : STD_LOGIC;
    signal conv5_U0_ap_ready : STD_LOGIC;
    signal conv5_U0_start_out : STD_LOGIC;
    signal conv5_U0_start_write : STD_LOGIC;
    signal conv5_U0_pool4_pipe_8_V_V_read : STD_LOGIC;
    signal conv5_U0_conv5_pipe_9_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv5_U0_conv5_pipe_9_V_V_write : STD_LOGIC;
    signal relu_bn5_U0_ap_start : STD_LOGIC;
    signal relu_bn5_U0_ap_done : STD_LOGIC;
    signal relu_bn5_U0_ap_continue : STD_LOGIC;
    signal relu_bn5_U0_ap_idle : STD_LOGIC;
    signal relu_bn5_U0_ap_ready : STD_LOGIC;
    signal relu_bn5_U0_start_out : STD_LOGIC;
    signal relu_bn5_U0_start_write : STD_LOGIC;
    signal relu_bn5_U0_conv5_pipe_9_V_V_read : STD_LOGIC;
    signal relu_bn5_U0_relu5_pipe_10_V_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal relu_bn5_U0_relu5_pipe_10_V_V_write : STD_LOGIC;
    signal conv6_U0_ap_start : STD_LOGIC;
    signal conv6_U0_ap_done : STD_LOGIC;
    signal conv6_U0_ap_continue : STD_LOGIC;
    signal conv6_U0_ap_idle : STD_LOGIC;
    signal conv6_U0_ap_ready : STD_LOGIC;
    signal conv6_U0_start_out : STD_LOGIC;
    signal conv6_U0_start_write : STD_LOGIC;
    signal conv6_U0_relu5_pipe_10_V_V_read : STD_LOGIC;
    signal conv6_U0_conv6_pipe_11_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv6_U0_conv6_pipe_11_V_V_write : STD_LOGIC;
    signal relu_bn6_U0_ap_start : STD_LOGIC;
    signal relu_bn6_U0_ap_done : STD_LOGIC;
    signal relu_bn6_U0_ap_continue : STD_LOGIC;
    signal relu_bn6_U0_ap_idle : STD_LOGIC;
    signal relu_bn6_U0_ap_ready : STD_LOGIC;
    signal relu_bn6_U0_start_out : STD_LOGIC;
    signal relu_bn6_U0_start_write : STD_LOGIC;
    signal relu_bn6_U0_conv6_pipe_11_V_V_read : STD_LOGIC;
    signal relu_bn6_U0_relu6_pipe_12_V_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal relu_bn6_U0_relu6_pipe_12_V_V_write : STD_LOGIC;
    signal conv7_U0_ap_start : STD_LOGIC;
    signal conv7_U0_ap_done : STD_LOGIC;
    signal conv7_U0_ap_continue : STD_LOGIC;
    signal conv7_U0_ap_idle : STD_LOGIC;
    signal conv7_U0_ap_ready : STD_LOGIC;
    signal conv7_U0_start_out : STD_LOGIC;
    signal conv7_U0_start_write : STD_LOGIC;
    signal conv7_U0_relu6_pipe_12_V_V_read : STD_LOGIC;
    signal conv7_U0_conv7_pipe_13_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv7_U0_conv7_pipe_13_V_V_write : STD_LOGIC;
    signal relu_bn7_U0_ap_start : STD_LOGIC;
    signal relu_bn7_U0_ap_done : STD_LOGIC;
    signal relu_bn7_U0_ap_continue : STD_LOGIC;
    signal relu_bn7_U0_ap_idle : STD_LOGIC;
    signal relu_bn7_U0_ap_ready : STD_LOGIC;
    signal relu_bn7_U0_start_out : STD_LOGIC;
    signal relu_bn7_U0_start_write : STD_LOGIC;
    signal relu_bn7_U0_conv7_pipe_13_V_V_read : STD_LOGIC;
    signal relu_bn7_U0_relu7_pipe_14_V_V_din : STD_LOGIC_VECTOR (4 downto 0);
    signal relu_bn7_U0_relu7_pipe_14_V_V_write : STD_LOGIC;
    signal conv8_U0_ap_start : STD_LOGIC;
    signal conv8_U0_ap_done : STD_LOGIC;
    signal conv8_U0_ap_continue : STD_LOGIC;
    signal conv8_U0_ap_idle : STD_LOGIC;
    signal conv8_U0_ap_ready : STD_LOGIC;
    signal conv8_U0_relu7_pipe_14_V_V_read : STD_LOGIC;
    signal conv8_U0_conv8_pipe_15_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv8_U0_conv8_pipe_15_V_V_write : STD_LOGIC;
    signal relu_bn8_U0_ap_start : STD_LOGIC;
    signal relu_bn8_U0_ap_done : STD_LOGIC;
    signal relu_bn8_U0_ap_continue : STD_LOGIC;
    signal relu_bn8_U0_ap_idle : STD_LOGIC;
    signal relu_bn8_U0_ap_ready : STD_LOGIC;
    signal relu_bn8_U0_conv8_pipe_15_V_V_read : STD_LOGIC;
    signal relu_bn8_U0_m_axi_result_AWVALID : STD_LOGIC;
    signal relu_bn8_U0_m_axi_result_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_bn8_U0_m_axi_result_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_bn8_U0_m_axi_result_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_bn8_U0_m_axi_result_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal relu_bn8_U0_m_axi_result_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal relu_bn8_U0_m_axi_result_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal relu_bn8_U0_m_axi_result_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal relu_bn8_U0_m_axi_result_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal relu_bn8_U0_m_axi_result_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal relu_bn8_U0_m_axi_result_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal relu_bn8_U0_m_axi_result_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_bn8_U0_m_axi_result_WVALID : STD_LOGIC;
    signal relu_bn8_U0_m_axi_result_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_bn8_U0_m_axi_result_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal relu_bn8_U0_m_axi_result_WLAST : STD_LOGIC;
    signal relu_bn8_U0_m_axi_result_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_bn8_U0_m_axi_result_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_bn8_U0_m_axi_result_ARVALID : STD_LOGIC;
    signal relu_bn8_U0_m_axi_result_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_bn8_U0_m_axi_result_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_bn8_U0_m_axi_result_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_bn8_U0_m_axi_result_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal relu_bn8_U0_m_axi_result_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal relu_bn8_U0_m_axi_result_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal relu_bn8_U0_m_axi_result_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal relu_bn8_U0_m_axi_result_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal relu_bn8_U0_m_axi_result_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal relu_bn8_U0_m_axi_result_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal relu_bn8_U0_m_axi_result_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_bn8_U0_m_axi_result_RREADY : STD_LOGIC;
    signal relu_bn8_U0_m_axi_result_BREADY : STD_LOGIC;
    signal relu_bn8_U0_result_offset_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal conv1_pipe_1_V_V_full_n : STD_LOGIC;
    signal conv1_pipe_1_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal conv1_pipe_1_V_V_empty_n : STD_LOGIC;
    signal result_c_full_n : STD_LOGIC;
    signal result_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal result_c_empty_n : STD_LOGIC;
    signal relu1_pipe_2_V_V_full_n : STD_LOGIC;
    signal relu1_pipe_2_V_V_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal relu1_pipe_2_V_V_empty_n : STD_LOGIC;
    signal pool1_pipe_2_V_V_full_n : STD_LOGIC;
    signal pool1_pipe_2_V_V_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal pool1_pipe_2_V_V_empty_n : STD_LOGIC;
    signal conv2_pipe_3_V_V_full_n : STD_LOGIC;
    signal conv2_pipe_3_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal conv2_pipe_3_V_V_empty_n : STD_LOGIC;
    signal relu2_pipe_4_V_V_full_n : STD_LOGIC;
    signal relu2_pipe_4_V_V_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal relu2_pipe_4_V_V_empty_n : STD_LOGIC;
    signal pool2_pipe_4_V_V_full_n : STD_LOGIC;
    signal pool2_pipe_4_V_V_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal pool2_pipe_4_V_V_empty_n : STD_LOGIC;
    signal conv3_pipe_5_V_V_full_n : STD_LOGIC;
    signal conv3_pipe_5_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_pipe_5_V_V_empty_n : STD_LOGIC;
    signal relu3_pipe_6_V_V_full_n : STD_LOGIC;
    signal relu3_pipe_6_V_V_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal relu3_pipe_6_V_V_empty_n : STD_LOGIC;
    signal pool3_pipe_6_V_V_full_n : STD_LOGIC;
    signal pool3_pipe_6_V_V_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal pool3_pipe_6_V_V_empty_n : STD_LOGIC;
    signal conv4_pipe_7_V_V_full_n : STD_LOGIC;
    signal conv4_pipe_7_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal conv4_pipe_7_V_V_empty_n : STD_LOGIC;
    signal relu4_pipe_8_V_V_full_n : STD_LOGIC;
    signal relu4_pipe_8_V_V_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal relu4_pipe_8_V_V_empty_n : STD_LOGIC;
    signal pool4_pipe_8_V_V_full_n : STD_LOGIC;
    signal pool4_pipe_8_V_V_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal pool4_pipe_8_V_V_empty_n : STD_LOGIC;
    signal conv5_pipe_9_V_V_full_n : STD_LOGIC;
    signal conv5_pipe_9_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal conv5_pipe_9_V_V_empty_n : STD_LOGIC;
    signal relu5_pipe_10_V_V_full_n : STD_LOGIC;
    signal relu5_pipe_10_V_V_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal relu5_pipe_10_V_V_empty_n : STD_LOGIC;
    signal conv6_pipe_11_V_V_full_n : STD_LOGIC;
    signal conv6_pipe_11_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal conv6_pipe_11_V_V_empty_n : STD_LOGIC;
    signal relu6_pipe_12_V_V_full_n : STD_LOGIC;
    signal relu6_pipe_12_V_V_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal relu6_pipe_12_V_V_empty_n : STD_LOGIC;
    signal conv7_pipe_13_V_V_full_n : STD_LOGIC;
    signal conv7_pipe_13_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal conv7_pipe_13_V_V_empty_n : STD_LOGIC;
    signal relu7_pipe_14_V_V_full_n : STD_LOGIC;
    signal relu7_pipe_14_V_V_dout : STD_LOGIC_VECTOR (4 downto 0);
    signal relu7_pipe_14_V_V_empty_n : STD_LOGIC;
    signal conv8_pipe_15_V_V_full_n : STD_LOGIC;
    signal conv8_pipe_15_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal conv8_pipe_15_V_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_relu_bn1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn1_U0_full_n : STD_LOGIC;
    signal start_for_relu_bn1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn1_U0_empty_n : STD_LOGIC;
    signal start_for_relu_bn8_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn8_U0_full_n : STD_LOGIC;
    signal start_for_relu_bn8_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn8_U0_empty_n : STD_LOGIC;
    signal start_for_maxpool1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_maxpool1_U0_full_n : STD_LOGIC;
    signal start_for_maxpool1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_maxpool1_U0_empty_n : STD_LOGIC;
    signal start_for_conv2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv2_U0_full_n : STD_LOGIC;
    signal start_for_conv2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv2_U0_empty_n : STD_LOGIC;
    signal start_for_relu_bn2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn2_U0_full_n : STD_LOGIC;
    signal start_for_relu_bn2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn2_U0_empty_n : STD_LOGIC;
    signal start_for_maxpool2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_maxpool2_U0_full_n : STD_LOGIC;
    signal start_for_maxpool2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_maxpool2_U0_empty_n : STD_LOGIC;
    signal start_for_conv3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv3_U0_full_n : STD_LOGIC;
    signal start_for_conv3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv3_U0_empty_n : STD_LOGIC;
    signal start_for_relu_bn3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn3_U0_full_n : STD_LOGIC;
    signal start_for_relu_bn3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn3_U0_empty_n : STD_LOGIC;
    signal start_for_maxpool3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_maxpool3_U0_full_n : STD_LOGIC;
    signal start_for_maxpool3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_maxpool3_U0_empty_n : STD_LOGIC;
    signal start_for_conv4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv4_U0_full_n : STD_LOGIC;
    signal start_for_conv4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv4_U0_empty_n : STD_LOGIC;
    signal start_for_relu_bn4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn4_U0_full_n : STD_LOGIC;
    signal start_for_relu_bn4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn4_U0_empty_n : STD_LOGIC;
    signal start_for_maxpool4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_maxpool4_U0_full_n : STD_LOGIC;
    signal start_for_maxpool4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_maxpool4_U0_empty_n : STD_LOGIC;
    signal start_for_conv5_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv5_U0_full_n : STD_LOGIC;
    signal start_for_conv5_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv5_U0_empty_n : STD_LOGIC;
    signal start_for_relu_bn5_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn5_U0_full_n : STD_LOGIC;
    signal start_for_relu_bn5_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn5_U0_empty_n : STD_LOGIC;
    signal start_for_conv6_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv6_U0_full_n : STD_LOGIC;
    signal start_for_conv6_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv6_U0_empty_n : STD_LOGIC;
    signal start_for_relu_bn6_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn6_U0_full_n : STD_LOGIC;
    signal start_for_relu_bn6_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn6_U0_empty_n : STD_LOGIC;
    signal start_for_conv7_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv7_U0_full_n : STD_LOGIC;
    signal start_for_conv7_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv7_U0_empty_n : STD_LOGIC;
    signal start_for_relu_bn7_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn7_U0_full_n : STD_LOGIC;
    signal start_for_relu_bn7_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_bn7_U0_empty_n : STD_LOGIC;
    signal start_for_conv8_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv8_U0_full_n : STD_LOGIC;
    signal start_for_conv8_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv8_U0_empty_n : STD_LOGIC;
    signal conv8_U0_start_full_n : STD_LOGIC;
    signal conv8_U0_start_write : STD_LOGIC;
    signal relu_bn8_U0_start_full_n : STD_LOGIC;
    signal relu_bn8_U0_start_write : STD_LOGIC;

    component conv113 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_input_image_AWVALID : OUT STD_LOGIC;
        m_axi_input_image_AWREADY : IN STD_LOGIC;
        m_axi_input_image_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_image_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_image_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_image_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_image_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_image_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_image_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_image_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_image_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_image_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_image_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_image_WVALID : OUT STD_LOGIC;
        m_axi_input_image_WREADY : IN STD_LOGIC;
        m_axi_input_image_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_image_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_image_WLAST : OUT STD_LOGIC;
        m_axi_input_image_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_image_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_image_ARVALID : OUT STD_LOGIC;
        m_axi_input_image_ARREADY : IN STD_LOGIC;
        m_axi_input_image_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_image_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_image_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_image_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_image_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_image_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_image_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_image_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_image_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_image_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_image_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_image_RVALID : IN STD_LOGIC;
        m_axi_input_image_RREADY : OUT STD_LOGIC;
        m_axi_input_image_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_image_RLAST : IN STD_LOGIC;
        m_axi_input_image_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_image_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_image_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_image_BVALID : IN STD_LOGIC;
        m_axi_input_image_BREADY : OUT STD_LOGIC;
        m_axi_input_image_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_image_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_image_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_image_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_pipe_1_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv1_pipe_1_V_V_full_n : IN STD_LOGIC;
        conv1_pipe_1_V_V_write : OUT STD_LOGIC;
        result : IN STD_LOGIC_VECTOR (31 downto 0);
        result_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_out_full_n : IN STD_LOGIC;
        result_out_write : OUT STD_LOGIC );
    end component;


    component relu_bn1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv1_pipe_1_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        conv1_pipe_1_V_V_empty_n : IN STD_LOGIC;
        conv1_pipe_1_V_V_read : OUT STD_LOGIC;
        relu1_pipe_2_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        relu1_pipe_2_V_V_full_n : IN STD_LOGIC;
        relu1_pipe_2_V_V_write : OUT STD_LOGIC );
    end component;


    component maxpool1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        relu1_pipe_2_V_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        relu1_pipe_2_V_V_empty_n : IN STD_LOGIC;
        relu1_pipe_2_V_V_read : OUT STD_LOGIC;
        pool1_pipe_2_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        pool1_pipe_2_V_V_full_n : IN STD_LOGIC;
        pool1_pipe_2_V_V_write : OUT STD_LOGIC );
    end component;


    component conv2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        pool1_pipe_2_V_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        pool1_pipe_2_V_V_empty_n : IN STD_LOGIC;
        pool1_pipe_2_V_V_read : OUT STD_LOGIC;
        conv2_pipe_3_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv2_pipe_3_V_V_full_n : IN STD_LOGIC;
        conv2_pipe_3_V_V_write : OUT STD_LOGIC );
    end component;


    component relu_bn2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv2_pipe_3_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        conv2_pipe_3_V_V_empty_n : IN STD_LOGIC;
        conv2_pipe_3_V_V_read : OUT STD_LOGIC;
        relu2_pipe_4_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        relu2_pipe_4_V_V_full_n : IN STD_LOGIC;
        relu2_pipe_4_V_V_write : OUT STD_LOGIC );
    end component;


    component maxpool2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        relu2_pipe_4_V_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        relu2_pipe_4_V_V_empty_n : IN STD_LOGIC;
        relu2_pipe_4_V_V_read : OUT STD_LOGIC;
        pool2_pipe_4_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        pool2_pipe_4_V_V_full_n : IN STD_LOGIC;
        pool2_pipe_4_V_V_write : OUT STD_LOGIC );
    end component;


    component conv3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        pool2_pipe_4_V_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        pool2_pipe_4_V_V_empty_n : IN STD_LOGIC;
        pool2_pipe_4_V_V_read : OUT STD_LOGIC;
        conv3_pipe_5_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv3_pipe_5_V_V_full_n : IN STD_LOGIC;
        conv3_pipe_5_V_V_write : OUT STD_LOGIC );
    end component;


    component relu_bn3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv3_pipe_5_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        conv3_pipe_5_V_V_empty_n : IN STD_LOGIC;
        conv3_pipe_5_V_V_read : OUT STD_LOGIC;
        relu3_pipe_6_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        relu3_pipe_6_V_V_full_n : IN STD_LOGIC;
        relu3_pipe_6_V_V_write : OUT STD_LOGIC );
    end component;


    component maxpool3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        relu3_pipe_6_V_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        relu3_pipe_6_V_V_empty_n : IN STD_LOGIC;
        relu3_pipe_6_V_V_read : OUT STD_LOGIC;
        pool3_pipe_6_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        pool3_pipe_6_V_V_full_n : IN STD_LOGIC;
        pool3_pipe_6_V_V_write : OUT STD_LOGIC );
    end component;


    component conv4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        pool3_pipe_6_V_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        pool3_pipe_6_V_V_empty_n : IN STD_LOGIC;
        pool3_pipe_6_V_V_read : OUT STD_LOGIC;
        conv4_pipe_7_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv4_pipe_7_V_V_full_n : IN STD_LOGIC;
        conv4_pipe_7_V_V_write : OUT STD_LOGIC );
    end component;


    component relu_bn4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv4_pipe_7_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        conv4_pipe_7_V_V_empty_n : IN STD_LOGIC;
        conv4_pipe_7_V_V_read : OUT STD_LOGIC;
        relu4_pipe_8_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        relu4_pipe_8_V_V_full_n : IN STD_LOGIC;
        relu4_pipe_8_V_V_write : OUT STD_LOGIC );
    end component;


    component maxpool4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        relu4_pipe_8_V_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        relu4_pipe_8_V_V_empty_n : IN STD_LOGIC;
        relu4_pipe_8_V_V_read : OUT STD_LOGIC;
        pool4_pipe_8_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        pool4_pipe_8_V_V_full_n : IN STD_LOGIC;
        pool4_pipe_8_V_V_write : OUT STD_LOGIC );
    end component;


    component conv5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        pool4_pipe_8_V_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        pool4_pipe_8_V_V_empty_n : IN STD_LOGIC;
        pool4_pipe_8_V_V_read : OUT STD_LOGIC;
        conv5_pipe_9_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv5_pipe_9_V_V_full_n : IN STD_LOGIC;
        conv5_pipe_9_V_V_write : OUT STD_LOGIC );
    end component;


    component relu_bn5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv5_pipe_9_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        conv5_pipe_9_V_V_empty_n : IN STD_LOGIC;
        conv5_pipe_9_V_V_read : OUT STD_LOGIC;
        relu5_pipe_10_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        relu5_pipe_10_V_V_full_n : IN STD_LOGIC;
        relu5_pipe_10_V_V_write : OUT STD_LOGIC );
    end component;


    component conv6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        relu5_pipe_10_V_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        relu5_pipe_10_V_V_empty_n : IN STD_LOGIC;
        relu5_pipe_10_V_V_read : OUT STD_LOGIC;
        conv6_pipe_11_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv6_pipe_11_V_V_full_n : IN STD_LOGIC;
        conv6_pipe_11_V_V_write : OUT STD_LOGIC );
    end component;


    component relu_bn6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv6_pipe_11_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        conv6_pipe_11_V_V_empty_n : IN STD_LOGIC;
        conv6_pipe_11_V_V_read : OUT STD_LOGIC;
        relu6_pipe_12_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        relu6_pipe_12_V_V_full_n : IN STD_LOGIC;
        relu6_pipe_12_V_V_write : OUT STD_LOGIC );
    end component;


    component conv7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        relu6_pipe_12_V_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        relu6_pipe_12_V_V_empty_n : IN STD_LOGIC;
        relu6_pipe_12_V_V_read : OUT STD_LOGIC;
        conv7_pipe_13_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv7_pipe_13_V_V_full_n : IN STD_LOGIC;
        conv7_pipe_13_V_V_write : OUT STD_LOGIC );
    end component;


    component relu_bn7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv7_pipe_13_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        conv7_pipe_13_V_V_empty_n : IN STD_LOGIC;
        conv7_pipe_13_V_V_read : OUT STD_LOGIC;
        relu7_pipe_14_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
        relu7_pipe_14_V_V_full_n : IN STD_LOGIC;
        relu7_pipe_14_V_V_write : OUT STD_LOGIC );
    end component;


    component conv8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        relu7_pipe_14_V_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        relu7_pipe_14_V_V_empty_n : IN STD_LOGIC;
        relu7_pipe_14_V_V_read : OUT STD_LOGIC;
        conv8_pipe_15_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv8_pipe_15_V_V_full_n : IN STD_LOGIC;
        conv8_pipe_15_V_V_write : OUT STD_LOGIC );
    end component;


    component relu_bn8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv8_pipe_15_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        conv8_pipe_15_V_V_empty_n : IN STD_LOGIC;
        conv8_pipe_15_V_V_read : OUT STD_LOGIC;
        m_axi_result_AWVALID : OUT STD_LOGIC;
        m_axi_result_AWREADY : IN STD_LOGIC;
        m_axi_result_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_result_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_result_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_result_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_result_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_result_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_result_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_result_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_result_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_result_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_result_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_result_WVALID : OUT STD_LOGIC;
        m_axi_result_WREADY : IN STD_LOGIC;
        m_axi_result_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_result_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_result_WLAST : OUT STD_LOGIC;
        m_axi_result_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_result_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_result_ARVALID : OUT STD_LOGIC;
        m_axi_result_ARREADY : IN STD_LOGIC;
        m_axi_result_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_result_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_result_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_result_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_result_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_result_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_result_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_result_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_result_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_result_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_result_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_result_RVALID : IN STD_LOGIC;
        m_axi_result_RREADY : OUT STD_LOGIC;
        m_axi_result_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_result_RLAST : IN STD_LOGIC;
        m_axi_result_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_result_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_result_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_result_BVALID : IN STD_LOGIC;
        m_axi_result_BREADY : OUT STD_LOGIC;
        m_axi_result_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_result_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_result_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        result_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        result_offset_empty_n : IN STD_LOGIC;
        result_offset_read : OUT STD_LOGIC );
    end component;


    component fifo_w16_d128_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d20_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w5_d128_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (4 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_relu_bnCfe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_relu_bnCge IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_maxpoolChe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_conv2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_relu_bnCie IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_maxpoolCje IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_conv3_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_relu_bnCke IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_maxpoolCle IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_conv4_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_relu_bnCme IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_maxpoolCne IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_conv5_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_relu_bnCoe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_conv6_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_relu_bnCpe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_conv7_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_relu_bnCqe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_conv8_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component test_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_image : OUT STD_LOGIC_VECTOR (31 downto 0);
        result : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component test_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    test_control_s_axi_U : component test_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_image => input_image,
        result => result);

    test_gmem_m_axi_U : component test_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => conv113_U0_m_axi_input_image_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => conv113_U0_m_axi_input_image_ARADDR,
        I_ARID => conv113_U0_m_axi_input_image_ARID,
        I_ARLEN => conv113_U0_m_axi_input_image_ARLEN,
        I_ARSIZE => conv113_U0_m_axi_input_image_ARSIZE,
        I_ARLOCK => conv113_U0_m_axi_input_image_ARLOCK,
        I_ARCACHE => conv113_U0_m_axi_input_image_ARCACHE,
        I_ARQOS => conv113_U0_m_axi_input_image_ARQOS,
        I_ARPROT => conv113_U0_m_axi_input_image_ARPROT,
        I_ARUSER => conv113_U0_m_axi_input_image_ARUSER,
        I_ARBURST => conv113_U0_m_axi_input_image_ARBURST,
        I_ARREGION => conv113_U0_m_axi_input_image_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => conv113_U0_m_axi_input_image_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => relu_bn8_U0_m_axi_result_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => relu_bn8_U0_m_axi_result_AWADDR,
        I_AWID => relu_bn8_U0_m_axi_result_AWID,
        I_AWLEN => relu_bn8_U0_m_axi_result_AWLEN,
        I_AWSIZE => relu_bn8_U0_m_axi_result_AWSIZE,
        I_AWLOCK => relu_bn8_U0_m_axi_result_AWLOCK,
        I_AWCACHE => relu_bn8_U0_m_axi_result_AWCACHE,
        I_AWQOS => relu_bn8_U0_m_axi_result_AWQOS,
        I_AWPROT => relu_bn8_U0_m_axi_result_AWPROT,
        I_AWUSER => relu_bn8_U0_m_axi_result_AWUSER,
        I_AWBURST => relu_bn8_U0_m_axi_result_AWBURST,
        I_AWREGION => relu_bn8_U0_m_axi_result_AWREGION,
        I_WVALID => relu_bn8_U0_m_axi_result_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => relu_bn8_U0_m_axi_result_WDATA,
        I_WID => relu_bn8_U0_m_axi_result_WID,
        I_WUSER => relu_bn8_U0_m_axi_result_WUSER,
        I_WLAST => relu_bn8_U0_m_axi_result_WLAST,
        I_WSTRB => relu_bn8_U0_m_axi_result_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => relu_bn8_U0_m_axi_result_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    conv113_U0 : component conv113
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => conv113_U0_ap_start,
        start_full_n => conv113_U0_start_full_n,
        ap_done => conv113_U0_ap_done,
        ap_continue => conv113_U0_ap_continue,
        ap_idle => conv113_U0_ap_idle,
        ap_ready => conv113_U0_ap_ready,
        start_out => conv113_U0_start_out,
        start_write => conv113_U0_start_write,
        m_axi_input_image_AWVALID => conv113_U0_m_axi_input_image_AWVALID,
        m_axi_input_image_AWREADY => ap_const_logic_0,
        m_axi_input_image_AWADDR => conv113_U0_m_axi_input_image_AWADDR,
        m_axi_input_image_AWID => conv113_U0_m_axi_input_image_AWID,
        m_axi_input_image_AWLEN => conv113_U0_m_axi_input_image_AWLEN,
        m_axi_input_image_AWSIZE => conv113_U0_m_axi_input_image_AWSIZE,
        m_axi_input_image_AWBURST => conv113_U0_m_axi_input_image_AWBURST,
        m_axi_input_image_AWLOCK => conv113_U0_m_axi_input_image_AWLOCK,
        m_axi_input_image_AWCACHE => conv113_U0_m_axi_input_image_AWCACHE,
        m_axi_input_image_AWPROT => conv113_U0_m_axi_input_image_AWPROT,
        m_axi_input_image_AWQOS => conv113_U0_m_axi_input_image_AWQOS,
        m_axi_input_image_AWREGION => conv113_U0_m_axi_input_image_AWREGION,
        m_axi_input_image_AWUSER => conv113_U0_m_axi_input_image_AWUSER,
        m_axi_input_image_WVALID => conv113_U0_m_axi_input_image_WVALID,
        m_axi_input_image_WREADY => ap_const_logic_0,
        m_axi_input_image_WDATA => conv113_U0_m_axi_input_image_WDATA,
        m_axi_input_image_WSTRB => conv113_U0_m_axi_input_image_WSTRB,
        m_axi_input_image_WLAST => conv113_U0_m_axi_input_image_WLAST,
        m_axi_input_image_WID => conv113_U0_m_axi_input_image_WID,
        m_axi_input_image_WUSER => conv113_U0_m_axi_input_image_WUSER,
        m_axi_input_image_ARVALID => conv113_U0_m_axi_input_image_ARVALID,
        m_axi_input_image_ARREADY => gmem_ARREADY,
        m_axi_input_image_ARADDR => conv113_U0_m_axi_input_image_ARADDR,
        m_axi_input_image_ARID => conv113_U0_m_axi_input_image_ARID,
        m_axi_input_image_ARLEN => conv113_U0_m_axi_input_image_ARLEN,
        m_axi_input_image_ARSIZE => conv113_U0_m_axi_input_image_ARSIZE,
        m_axi_input_image_ARBURST => conv113_U0_m_axi_input_image_ARBURST,
        m_axi_input_image_ARLOCK => conv113_U0_m_axi_input_image_ARLOCK,
        m_axi_input_image_ARCACHE => conv113_U0_m_axi_input_image_ARCACHE,
        m_axi_input_image_ARPROT => conv113_U0_m_axi_input_image_ARPROT,
        m_axi_input_image_ARQOS => conv113_U0_m_axi_input_image_ARQOS,
        m_axi_input_image_ARREGION => conv113_U0_m_axi_input_image_ARREGION,
        m_axi_input_image_ARUSER => conv113_U0_m_axi_input_image_ARUSER,
        m_axi_input_image_RVALID => gmem_RVALID,
        m_axi_input_image_RREADY => conv113_U0_m_axi_input_image_RREADY,
        m_axi_input_image_RDATA => gmem_RDATA,
        m_axi_input_image_RLAST => gmem_RLAST,
        m_axi_input_image_RID => gmem_RID,
        m_axi_input_image_RUSER => gmem_RUSER,
        m_axi_input_image_RRESP => gmem_RRESP,
        m_axi_input_image_BVALID => ap_const_logic_0,
        m_axi_input_image_BREADY => conv113_U0_m_axi_input_image_BREADY,
        m_axi_input_image_BRESP => ap_const_lv2_0,
        m_axi_input_image_BID => ap_const_lv1_0,
        m_axi_input_image_BUSER => ap_const_lv1_0,
        input_image_offset => input_image,
        conv1_pipe_1_V_V_din => conv113_U0_conv1_pipe_1_V_V_din,
        conv1_pipe_1_V_V_full_n => conv1_pipe_1_V_V_full_n,
        conv1_pipe_1_V_V_write => conv113_U0_conv1_pipe_1_V_V_write,
        result => result,
        result_out_din => conv113_U0_result_out_din,
        result_out_full_n => result_c_full_n,
        result_out_write => conv113_U0_result_out_write);

    relu_bn1_U0 : component relu_bn1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => relu_bn1_U0_ap_start,
        start_full_n => start_for_maxpool1_U0_full_n,
        ap_done => relu_bn1_U0_ap_done,
        ap_continue => relu_bn1_U0_ap_continue,
        ap_idle => relu_bn1_U0_ap_idle,
        ap_ready => relu_bn1_U0_ap_ready,
        start_out => relu_bn1_U0_start_out,
        start_write => relu_bn1_U0_start_write,
        conv1_pipe_1_V_V_dout => conv1_pipe_1_V_V_dout,
        conv1_pipe_1_V_V_empty_n => conv1_pipe_1_V_V_empty_n,
        conv1_pipe_1_V_V_read => relu_bn1_U0_conv1_pipe_1_V_V_read,
        relu1_pipe_2_V_V_din => relu_bn1_U0_relu1_pipe_2_V_V_din,
        relu1_pipe_2_V_V_full_n => relu1_pipe_2_V_V_full_n,
        relu1_pipe_2_V_V_write => relu_bn1_U0_relu1_pipe_2_V_V_write);

    maxpool1_U0 : component maxpool1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => maxpool1_U0_ap_start,
        start_full_n => start_for_conv2_U0_full_n,
        ap_done => maxpool1_U0_ap_done,
        ap_continue => maxpool1_U0_ap_continue,
        ap_idle => maxpool1_U0_ap_idle,
        ap_ready => maxpool1_U0_ap_ready,
        start_out => maxpool1_U0_start_out,
        start_write => maxpool1_U0_start_write,
        relu1_pipe_2_V_V_dout => relu1_pipe_2_V_V_dout,
        relu1_pipe_2_V_V_empty_n => relu1_pipe_2_V_V_empty_n,
        relu1_pipe_2_V_V_read => maxpool1_U0_relu1_pipe_2_V_V_read,
        pool1_pipe_2_V_V_din => maxpool1_U0_pool1_pipe_2_V_V_din,
        pool1_pipe_2_V_V_full_n => pool1_pipe_2_V_V_full_n,
        pool1_pipe_2_V_V_write => maxpool1_U0_pool1_pipe_2_V_V_write);

    conv2_U0 : component conv2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => conv2_U0_ap_start,
        start_full_n => start_for_relu_bn2_U0_full_n,
        ap_done => conv2_U0_ap_done,
        ap_continue => conv2_U0_ap_continue,
        ap_idle => conv2_U0_ap_idle,
        ap_ready => conv2_U0_ap_ready,
        start_out => conv2_U0_start_out,
        start_write => conv2_U0_start_write,
        pool1_pipe_2_V_V_dout => pool1_pipe_2_V_V_dout,
        pool1_pipe_2_V_V_empty_n => pool1_pipe_2_V_V_empty_n,
        pool1_pipe_2_V_V_read => conv2_U0_pool1_pipe_2_V_V_read,
        conv2_pipe_3_V_V_din => conv2_U0_conv2_pipe_3_V_V_din,
        conv2_pipe_3_V_V_full_n => conv2_pipe_3_V_V_full_n,
        conv2_pipe_3_V_V_write => conv2_U0_conv2_pipe_3_V_V_write);

    relu_bn2_U0 : component relu_bn2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => relu_bn2_U0_ap_start,
        start_full_n => start_for_maxpool2_U0_full_n,
        ap_done => relu_bn2_U0_ap_done,
        ap_continue => relu_bn2_U0_ap_continue,
        ap_idle => relu_bn2_U0_ap_idle,
        ap_ready => relu_bn2_U0_ap_ready,
        start_out => relu_bn2_U0_start_out,
        start_write => relu_bn2_U0_start_write,
        conv2_pipe_3_V_V_dout => conv2_pipe_3_V_V_dout,
        conv2_pipe_3_V_V_empty_n => conv2_pipe_3_V_V_empty_n,
        conv2_pipe_3_V_V_read => relu_bn2_U0_conv2_pipe_3_V_V_read,
        relu2_pipe_4_V_V_din => relu_bn2_U0_relu2_pipe_4_V_V_din,
        relu2_pipe_4_V_V_full_n => relu2_pipe_4_V_V_full_n,
        relu2_pipe_4_V_V_write => relu_bn2_U0_relu2_pipe_4_V_V_write);

    maxpool2_U0 : component maxpool2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => maxpool2_U0_ap_start,
        start_full_n => start_for_conv3_U0_full_n,
        ap_done => maxpool2_U0_ap_done,
        ap_continue => maxpool2_U0_ap_continue,
        ap_idle => maxpool2_U0_ap_idle,
        ap_ready => maxpool2_U0_ap_ready,
        start_out => maxpool2_U0_start_out,
        start_write => maxpool2_U0_start_write,
        relu2_pipe_4_V_V_dout => relu2_pipe_4_V_V_dout,
        relu2_pipe_4_V_V_empty_n => relu2_pipe_4_V_V_empty_n,
        relu2_pipe_4_V_V_read => maxpool2_U0_relu2_pipe_4_V_V_read,
        pool2_pipe_4_V_V_din => maxpool2_U0_pool2_pipe_4_V_V_din,
        pool2_pipe_4_V_V_full_n => pool2_pipe_4_V_V_full_n,
        pool2_pipe_4_V_V_write => maxpool2_U0_pool2_pipe_4_V_V_write);

    conv3_U0 : component conv3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => conv3_U0_ap_start,
        start_full_n => start_for_relu_bn3_U0_full_n,
        ap_done => conv3_U0_ap_done,
        ap_continue => conv3_U0_ap_continue,
        ap_idle => conv3_U0_ap_idle,
        ap_ready => conv3_U0_ap_ready,
        start_out => conv3_U0_start_out,
        start_write => conv3_U0_start_write,
        pool2_pipe_4_V_V_dout => pool2_pipe_4_V_V_dout,
        pool2_pipe_4_V_V_empty_n => pool2_pipe_4_V_V_empty_n,
        pool2_pipe_4_V_V_read => conv3_U0_pool2_pipe_4_V_V_read,
        conv3_pipe_5_V_V_din => conv3_U0_conv3_pipe_5_V_V_din,
        conv3_pipe_5_V_V_full_n => conv3_pipe_5_V_V_full_n,
        conv3_pipe_5_V_V_write => conv3_U0_conv3_pipe_5_V_V_write);

    relu_bn3_U0 : component relu_bn3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => relu_bn3_U0_ap_start,
        start_full_n => start_for_maxpool3_U0_full_n,
        ap_done => relu_bn3_U0_ap_done,
        ap_continue => relu_bn3_U0_ap_continue,
        ap_idle => relu_bn3_U0_ap_idle,
        ap_ready => relu_bn3_U0_ap_ready,
        start_out => relu_bn3_U0_start_out,
        start_write => relu_bn3_U0_start_write,
        conv3_pipe_5_V_V_dout => conv3_pipe_5_V_V_dout,
        conv3_pipe_5_V_V_empty_n => conv3_pipe_5_V_V_empty_n,
        conv3_pipe_5_V_V_read => relu_bn3_U0_conv3_pipe_5_V_V_read,
        relu3_pipe_6_V_V_din => relu_bn3_U0_relu3_pipe_6_V_V_din,
        relu3_pipe_6_V_V_full_n => relu3_pipe_6_V_V_full_n,
        relu3_pipe_6_V_V_write => relu_bn3_U0_relu3_pipe_6_V_V_write);

    maxpool3_U0 : component maxpool3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => maxpool3_U0_ap_start,
        start_full_n => start_for_conv4_U0_full_n,
        ap_done => maxpool3_U0_ap_done,
        ap_continue => maxpool3_U0_ap_continue,
        ap_idle => maxpool3_U0_ap_idle,
        ap_ready => maxpool3_U0_ap_ready,
        start_out => maxpool3_U0_start_out,
        start_write => maxpool3_U0_start_write,
        relu3_pipe_6_V_V_dout => relu3_pipe_6_V_V_dout,
        relu3_pipe_6_V_V_empty_n => relu3_pipe_6_V_V_empty_n,
        relu3_pipe_6_V_V_read => maxpool3_U0_relu3_pipe_6_V_V_read,
        pool3_pipe_6_V_V_din => maxpool3_U0_pool3_pipe_6_V_V_din,
        pool3_pipe_6_V_V_full_n => pool3_pipe_6_V_V_full_n,
        pool3_pipe_6_V_V_write => maxpool3_U0_pool3_pipe_6_V_V_write);

    conv4_U0 : component conv4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => conv4_U0_ap_start,
        start_full_n => start_for_relu_bn4_U0_full_n,
        ap_done => conv4_U0_ap_done,
        ap_continue => conv4_U0_ap_continue,
        ap_idle => conv4_U0_ap_idle,
        ap_ready => conv4_U0_ap_ready,
        start_out => conv4_U0_start_out,
        start_write => conv4_U0_start_write,
        pool3_pipe_6_V_V_dout => pool3_pipe_6_V_V_dout,
        pool3_pipe_6_V_V_empty_n => pool3_pipe_6_V_V_empty_n,
        pool3_pipe_6_V_V_read => conv4_U0_pool3_pipe_6_V_V_read,
        conv4_pipe_7_V_V_din => conv4_U0_conv4_pipe_7_V_V_din,
        conv4_pipe_7_V_V_full_n => conv4_pipe_7_V_V_full_n,
        conv4_pipe_7_V_V_write => conv4_U0_conv4_pipe_7_V_V_write);

    relu_bn4_U0 : component relu_bn4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => relu_bn4_U0_ap_start,
        start_full_n => start_for_maxpool4_U0_full_n,
        ap_done => relu_bn4_U0_ap_done,
        ap_continue => relu_bn4_U0_ap_continue,
        ap_idle => relu_bn4_U0_ap_idle,
        ap_ready => relu_bn4_U0_ap_ready,
        start_out => relu_bn4_U0_start_out,
        start_write => relu_bn4_U0_start_write,
        conv4_pipe_7_V_V_dout => conv4_pipe_7_V_V_dout,
        conv4_pipe_7_V_V_empty_n => conv4_pipe_7_V_V_empty_n,
        conv4_pipe_7_V_V_read => relu_bn4_U0_conv4_pipe_7_V_V_read,
        relu4_pipe_8_V_V_din => relu_bn4_U0_relu4_pipe_8_V_V_din,
        relu4_pipe_8_V_V_full_n => relu4_pipe_8_V_V_full_n,
        relu4_pipe_8_V_V_write => relu_bn4_U0_relu4_pipe_8_V_V_write);

    maxpool4_U0 : component maxpool4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => maxpool4_U0_ap_start,
        start_full_n => start_for_conv5_U0_full_n,
        ap_done => maxpool4_U0_ap_done,
        ap_continue => maxpool4_U0_ap_continue,
        ap_idle => maxpool4_U0_ap_idle,
        ap_ready => maxpool4_U0_ap_ready,
        start_out => maxpool4_U0_start_out,
        start_write => maxpool4_U0_start_write,
        relu4_pipe_8_V_V_dout => relu4_pipe_8_V_V_dout,
        relu4_pipe_8_V_V_empty_n => relu4_pipe_8_V_V_empty_n,
        relu4_pipe_8_V_V_read => maxpool4_U0_relu4_pipe_8_V_V_read,
        pool4_pipe_8_V_V_din => maxpool4_U0_pool4_pipe_8_V_V_din,
        pool4_pipe_8_V_V_full_n => pool4_pipe_8_V_V_full_n,
        pool4_pipe_8_V_V_write => maxpool4_U0_pool4_pipe_8_V_V_write);

    conv5_U0 : component conv5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => conv5_U0_ap_start,
        start_full_n => start_for_relu_bn5_U0_full_n,
        ap_done => conv5_U0_ap_done,
        ap_continue => conv5_U0_ap_continue,
        ap_idle => conv5_U0_ap_idle,
        ap_ready => conv5_U0_ap_ready,
        start_out => conv5_U0_start_out,
        start_write => conv5_U0_start_write,
        pool4_pipe_8_V_V_dout => pool4_pipe_8_V_V_dout,
        pool4_pipe_8_V_V_empty_n => pool4_pipe_8_V_V_empty_n,
        pool4_pipe_8_V_V_read => conv5_U0_pool4_pipe_8_V_V_read,
        conv5_pipe_9_V_V_din => conv5_U0_conv5_pipe_9_V_V_din,
        conv5_pipe_9_V_V_full_n => conv5_pipe_9_V_V_full_n,
        conv5_pipe_9_V_V_write => conv5_U0_conv5_pipe_9_V_V_write);

    relu_bn5_U0 : component relu_bn5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => relu_bn5_U0_ap_start,
        start_full_n => start_for_conv6_U0_full_n,
        ap_done => relu_bn5_U0_ap_done,
        ap_continue => relu_bn5_U0_ap_continue,
        ap_idle => relu_bn5_U0_ap_idle,
        ap_ready => relu_bn5_U0_ap_ready,
        start_out => relu_bn5_U0_start_out,
        start_write => relu_bn5_U0_start_write,
        conv5_pipe_9_V_V_dout => conv5_pipe_9_V_V_dout,
        conv5_pipe_9_V_V_empty_n => conv5_pipe_9_V_V_empty_n,
        conv5_pipe_9_V_V_read => relu_bn5_U0_conv5_pipe_9_V_V_read,
        relu5_pipe_10_V_V_din => relu_bn5_U0_relu5_pipe_10_V_V_din,
        relu5_pipe_10_V_V_full_n => relu5_pipe_10_V_V_full_n,
        relu5_pipe_10_V_V_write => relu_bn5_U0_relu5_pipe_10_V_V_write);

    conv6_U0 : component conv6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => conv6_U0_ap_start,
        start_full_n => start_for_relu_bn6_U0_full_n,
        ap_done => conv6_U0_ap_done,
        ap_continue => conv6_U0_ap_continue,
        ap_idle => conv6_U0_ap_idle,
        ap_ready => conv6_U0_ap_ready,
        start_out => conv6_U0_start_out,
        start_write => conv6_U0_start_write,
        relu5_pipe_10_V_V_dout => relu5_pipe_10_V_V_dout,
        relu5_pipe_10_V_V_empty_n => relu5_pipe_10_V_V_empty_n,
        relu5_pipe_10_V_V_read => conv6_U0_relu5_pipe_10_V_V_read,
        conv6_pipe_11_V_V_din => conv6_U0_conv6_pipe_11_V_V_din,
        conv6_pipe_11_V_V_full_n => conv6_pipe_11_V_V_full_n,
        conv6_pipe_11_V_V_write => conv6_U0_conv6_pipe_11_V_V_write);

    relu_bn6_U0 : component relu_bn6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => relu_bn6_U0_ap_start,
        start_full_n => start_for_conv7_U0_full_n,
        ap_done => relu_bn6_U0_ap_done,
        ap_continue => relu_bn6_U0_ap_continue,
        ap_idle => relu_bn6_U0_ap_idle,
        ap_ready => relu_bn6_U0_ap_ready,
        start_out => relu_bn6_U0_start_out,
        start_write => relu_bn6_U0_start_write,
        conv6_pipe_11_V_V_dout => conv6_pipe_11_V_V_dout,
        conv6_pipe_11_V_V_empty_n => conv6_pipe_11_V_V_empty_n,
        conv6_pipe_11_V_V_read => relu_bn6_U0_conv6_pipe_11_V_V_read,
        relu6_pipe_12_V_V_din => relu_bn6_U0_relu6_pipe_12_V_V_din,
        relu6_pipe_12_V_V_full_n => relu6_pipe_12_V_V_full_n,
        relu6_pipe_12_V_V_write => relu_bn6_U0_relu6_pipe_12_V_V_write);

    conv7_U0 : component conv7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => conv7_U0_ap_start,
        start_full_n => start_for_relu_bn7_U0_full_n,
        ap_done => conv7_U0_ap_done,
        ap_continue => conv7_U0_ap_continue,
        ap_idle => conv7_U0_ap_idle,
        ap_ready => conv7_U0_ap_ready,
        start_out => conv7_U0_start_out,
        start_write => conv7_U0_start_write,
        relu6_pipe_12_V_V_dout => relu6_pipe_12_V_V_dout,
        relu6_pipe_12_V_V_empty_n => relu6_pipe_12_V_V_empty_n,
        relu6_pipe_12_V_V_read => conv7_U0_relu6_pipe_12_V_V_read,
        conv7_pipe_13_V_V_din => conv7_U0_conv7_pipe_13_V_V_din,
        conv7_pipe_13_V_V_full_n => conv7_pipe_13_V_V_full_n,
        conv7_pipe_13_V_V_write => conv7_U0_conv7_pipe_13_V_V_write);

    relu_bn7_U0 : component relu_bn7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => relu_bn7_U0_ap_start,
        start_full_n => start_for_conv8_U0_full_n,
        ap_done => relu_bn7_U0_ap_done,
        ap_continue => relu_bn7_U0_ap_continue,
        ap_idle => relu_bn7_U0_ap_idle,
        ap_ready => relu_bn7_U0_ap_ready,
        start_out => relu_bn7_U0_start_out,
        start_write => relu_bn7_U0_start_write,
        conv7_pipe_13_V_V_dout => conv7_pipe_13_V_V_dout,
        conv7_pipe_13_V_V_empty_n => conv7_pipe_13_V_V_empty_n,
        conv7_pipe_13_V_V_read => relu_bn7_U0_conv7_pipe_13_V_V_read,
        relu7_pipe_14_V_V_din => relu_bn7_U0_relu7_pipe_14_V_V_din,
        relu7_pipe_14_V_V_full_n => relu7_pipe_14_V_V_full_n,
        relu7_pipe_14_V_V_write => relu_bn7_U0_relu7_pipe_14_V_V_write);

    conv8_U0 : component conv8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => conv8_U0_ap_start,
        ap_done => conv8_U0_ap_done,
        ap_continue => conv8_U0_ap_continue,
        ap_idle => conv8_U0_ap_idle,
        ap_ready => conv8_U0_ap_ready,
        relu7_pipe_14_V_V_dout => relu7_pipe_14_V_V_dout,
        relu7_pipe_14_V_V_empty_n => relu7_pipe_14_V_V_empty_n,
        relu7_pipe_14_V_V_read => conv8_U0_relu7_pipe_14_V_V_read,
        conv8_pipe_15_V_V_din => conv8_U0_conv8_pipe_15_V_V_din,
        conv8_pipe_15_V_V_full_n => conv8_pipe_15_V_V_full_n,
        conv8_pipe_15_V_V_write => conv8_U0_conv8_pipe_15_V_V_write);

    relu_bn8_U0 : component relu_bn8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => relu_bn8_U0_ap_start,
        ap_done => relu_bn8_U0_ap_done,
        ap_continue => relu_bn8_U0_ap_continue,
        ap_idle => relu_bn8_U0_ap_idle,
        ap_ready => relu_bn8_U0_ap_ready,
        conv8_pipe_15_V_V_dout => conv8_pipe_15_V_V_dout,
        conv8_pipe_15_V_V_empty_n => conv8_pipe_15_V_V_empty_n,
        conv8_pipe_15_V_V_read => relu_bn8_U0_conv8_pipe_15_V_V_read,
        m_axi_result_AWVALID => relu_bn8_U0_m_axi_result_AWVALID,
        m_axi_result_AWREADY => gmem_AWREADY,
        m_axi_result_AWADDR => relu_bn8_U0_m_axi_result_AWADDR,
        m_axi_result_AWID => relu_bn8_U0_m_axi_result_AWID,
        m_axi_result_AWLEN => relu_bn8_U0_m_axi_result_AWLEN,
        m_axi_result_AWSIZE => relu_bn8_U0_m_axi_result_AWSIZE,
        m_axi_result_AWBURST => relu_bn8_U0_m_axi_result_AWBURST,
        m_axi_result_AWLOCK => relu_bn8_U0_m_axi_result_AWLOCK,
        m_axi_result_AWCACHE => relu_bn8_U0_m_axi_result_AWCACHE,
        m_axi_result_AWPROT => relu_bn8_U0_m_axi_result_AWPROT,
        m_axi_result_AWQOS => relu_bn8_U0_m_axi_result_AWQOS,
        m_axi_result_AWREGION => relu_bn8_U0_m_axi_result_AWREGION,
        m_axi_result_AWUSER => relu_bn8_U0_m_axi_result_AWUSER,
        m_axi_result_WVALID => relu_bn8_U0_m_axi_result_WVALID,
        m_axi_result_WREADY => gmem_WREADY,
        m_axi_result_WDATA => relu_bn8_U0_m_axi_result_WDATA,
        m_axi_result_WSTRB => relu_bn8_U0_m_axi_result_WSTRB,
        m_axi_result_WLAST => relu_bn8_U0_m_axi_result_WLAST,
        m_axi_result_WID => relu_bn8_U0_m_axi_result_WID,
        m_axi_result_WUSER => relu_bn8_U0_m_axi_result_WUSER,
        m_axi_result_ARVALID => relu_bn8_U0_m_axi_result_ARVALID,
        m_axi_result_ARREADY => ap_const_logic_0,
        m_axi_result_ARADDR => relu_bn8_U0_m_axi_result_ARADDR,
        m_axi_result_ARID => relu_bn8_U0_m_axi_result_ARID,
        m_axi_result_ARLEN => relu_bn8_U0_m_axi_result_ARLEN,
        m_axi_result_ARSIZE => relu_bn8_U0_m_axi_result_ARSIZE,
        m_axi_result_ARBURST => relu_bn8_U0_m_axi_result_ARBURST,
        m_axi_result_ARLOCK => relu_bn8_U0_m_axi_result_ARLOCK,
        m_axi_result_ARCACHE => relu_bn8_U0_m_axi_result_ARCACHE,
        m_axi_result_ARPROT => relu_bn8_U0_m_axi_result_ARPROT,
        m_axi_result_ARQOS => relu_bn8_U0_m_axi_result_ARQOS,
        m_axi_result_ARREGION => relu_bn8_U0_m_axi_result_ARREGION,
        m_axi_result_ARUSER => relu_bn8_U0_m_axi_result_ARUSER,
        m_axi_result_RVALID => ap_const_logic_0,
        m_axi_result_RREADY => relu_bn8_U0_m_axi_result_RREADY,
        m_axi_result_RDATA => ap_const_lv32_0,
        m_axi_result_RLAST => ap_const_logic_0,
        m_axi_result_RID => ap_const_lv1_0,
        m_axi_result_RUSER => ap_const_lv1_0,
        m_axi_result_RRESP => ap_const_lv2_0,
        m_axi_result_BVALID => gmem_BVALID,
        m_axi_result_BREADY => relu_bn8_U0_m_axi_result_BREADY,
        m_axi_result_BRESP => gmem_BRESP,
        m_axi_result_BID => gmem_BID,
        m_axi_result_BUSER => gmem_BUSER,
        result_offset_dout => result_c_dout,
        result_offset_empty_n => result_c_empty_n,
        result_offset_read => relu_bn8_U0_result_offset_read);

    conv1_pipe_1_V_V_U : component fifo_w16_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv113_U0_conv1_pipe_1_V_V_din,
        if_full_n => conv1_pipe_1_V_V_full_n,
        if_write => conv113_U0_conv1_pipe_1_V_V_write,
        if_dout => conv1_pipe_1_V_V_dout,
        if_empty_n => conv1_pipe_1_V_V_empty_n,
        if_read => relu_bn1_U0_conv1_pipe_1_V_V_read);

    result_c_U : component fifo_w32_d20_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv113_U0_result_out_din,
        if_full_n => result_c_full_n,
        if_write => conv113_U0_result_out_write,
        if_dout => result_c_dout,
        if_empty_n => result_c_empty_n,
        if_read => relu_bn8_U0_result_offset_read);

    relu1_pipe_2_V_V_U : component fifo_w5_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_bn1_U0_relu1_pipe_2_V_V_din,
        if_full_n => relu1_pipe_2_V_V_full_n,
        if_write => relu_bn1_U0_relu1_pipe_2_V_V_write,
        if_dout => relu1_pipe_2_V_V_dout,
        if_empty_n => relu1_pipe_2_V_V_empty_n,
        if_read => maxpool1_U0_relu1_pipe_2_V_V_read);

    pool1_pipe_2_V_V_U : component fifo_w5_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => maxpool1_U0_pool1_pipe_2_V_V_din,
        if_full_n => pool1_pipe_2_V_V_full_n,
        if_write => maxpool1_U0_pool1_pipe_2_V_V_write,
        if_dout => pool1_pipe_2_V_V_dout,
        if_empty_n => pool1_pipe_2_V_V_empty_n,
        if_read => conv2_U0_pool1_pipe_2_V_V_read);

    conv2_pipe_3_V_V_U : component fifo_w16_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv2_U0_conv2_pipe_3_V_V_din,
        if_full_n => conv2_pipe_3_V_V_full_n,
        if_write => conv2_U0_conv2_pipe_3_V_V_write,
        if_dout => conv2_pipe_3_V_V_dout,
        if_empty_n => conv2_pipe_3_V_V_empty_n,
        if_read => relu_bn2_U0_conv2_pipe_3_V_V_read);

    relu2_pipe_4_V_V_U : component fifo_w5_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_bn2_U0_relu2_pipe_4_V_V_din,
        if_full_n => relu2_pipe_4_V_V_full_n,
        if_write => relu_bn2_U0_relu2_pipe_4_V_V_write,
        if_dout => relu2_pipe_4_V_V_dout,
        if_empty_n => relu2_pipe_4_V_V_empty_n,
        if_read => maxpool2_U0_relu2_pipe_4_V_V_read);

    pool2_pipe_4_V_V_U : component fifo_w5_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => maxpool2_U0_pool2_pipe_4_V_V_din,
        if_full_n => pool2_pipe_4_V_V_full_n,
        if_write => maxpool2_U0_pool2_pipe_4_V_V_write,
        if_dout => pool2_pipe_4_V_V_dout,
        if_empty_n => pool2_pipe_4_V_V_empty_n,
        if_read => conv3_U0_pool2_pipe_4_V_V_read);

    conv3_pipe_5_V_V_U : component fifo_w16_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv3_U0_conv3_pipe_5_V_V_din,
        if_full_n => conv3_pipe_5_V_V_full_n,
        if_write => conv3_U0_conv3_pipe_5_V_V_write,
        if_dout => conv3_pipe_5_V_V_dout,
        if_empty_n => conv3_pipe_5_V_V_empty_n,
        if_read => relu_bn3_U0_conv3_pipe_5_V_V_read);

    relu3_pipe_6_V_V_U : component fifo_w5_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_bn3_U0_relu3_pipe_6_V_V_din,
        if_full_n => relu3_pipe_6_V_V_full_n,
        if_write => relu_bn3_U0_relu3_pipe_6_V_V_write,
        if_dout => relu3_pipe_6_V_V_dout,
        if_empty_n => relu3_pipe_6_V_V_empty_n,
        if_read => maxpool3_U0_relu3_pipe_6_V_V_read);

    pool3_pipe_6_V_V_U : component fifo_w5_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => maxpool3_U0_pool3_pipe_6_V_V_din,
        if_full_n => pool3_pipe_6_V_V_full_n,
        if_write => maxpool3_U0_pool3_pipe_6_V_V_write,
        if_dout => pool3_pipe_6_V_V_dout,
        if_empty_n => pool3_pipe_6_V_V_empty_n,
        if_read => conv4_U0_pool3_pipe_6_V_V_read);

    conv4_pipe_7_V_V_U : component fifo_w16_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv4_U0_conv4_pipe_7_V_V_din,
        if_full_n => conv4_pipe_7_V_V_full_n,
        if_write => conv4_U0_conv4_pipe_7_V_V_write,
        if_dout => conv4_pipe_7_V_V_dout,
        if_empty_n => conv4_pipe_7_V_V_empty_n,
        if_read => relu_bn4_U0_conv4_pipe_7_V_V_read);

    relu4_pipe_8_V_V_U : component fifo_w5_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_bn4_U0_relu4_pipe_8_V_V_din,
        if_full_n => relu4_pipe_8_V_V_full_n,
        if_write => relu_bn4_U0_relu4_pipe_8_V_V_write,
        if_dout => relu4_pipe_8_V_V_dout,
        if_empty_n => relu4_pipe_8_V_V_empty_n,
        if_read => maxpool4_U0_relu4_pipe_8_V_V_read);

    pool4_pipe_8_V_V_U : component fifo_w5_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => maxpool4_U0_pool4_pipe_8_V_V_din,
        if_full_n => pool4_pipe_8_V_V_full_n,
        if_write => maxpool4_U0_pool4_pipe_8_V_V_write,
        if_dout => pool4_pipe_8_V_V_dout,
        if_empty_n => pool4_pipe_8_V_V_empty_n,
        if_read => conv5_U0_pool4_pipe_8_V_V_read);

    conv5_pipe_9_V_V_U : component fifo_w16_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv5_U0_conv5_pipe_9_V_V_din,
        if_full_n => conv5_pipe_9_V_V_full_n,
        if_write => conv5_U0_conv5_pipe_9_V_V_write,
        if_dout => conv5_pipe_9_V_V_dout,
        if_empty_n => conv5_pipe_9_V_V_empty_n,
        if_read => relu_bn5_U0_conv5_pipe_9_V_V_read);

    relu5_pipe_10_V_V_U : component fifo_w5_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_bn5_U0_relu5_pipe_10_V_V_din,
        if_full_n => relu5_pipe_10_V_V_full_n,
        if_write => relu_bn5_U0_relu5_pipe_10_V_V_write,
        if_dout => relu5_pipe_10_V_V_dout,
        if_empty_n => relu5_pipe_10_V_V_empty_n,
        if_read => conv6_U0_relu5_pipe_10_V_V_read);

    conv6_pipe_11_V_V_U : component fifo_w16_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv6_U0_conv6_pipe_11_V_V_din,
        if_full_n => conv6_pipe_11_V_V_full_n,
        if_write => conv6_U0_conv6_pipe_11_V_V_write,
        if_dout => conv6_pipe_11_V_V_dout,
        if_empty_n => conv6_pipe_11_V_V_empty_n,
        if_read => relu_bn6_U0_conv6_pipe_11_V_V_read);

    relu6_pipe_12_V_V_U : component fifo_w5_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_bn6_U0_relu6_pipe_12_V_V_din,
        if_full_n => relu6_pipe_12_V_V_full_n,
        if_write => relu_bn6_U0_relu6_pipe_12_V_V_write,
        if_dout => relu6_pipe_12_V_V_dout,
        if_empty_n => relu6_pipe_12_V_V_empty_n,
        if_read => conv7_U0_relu6_pipe_12_V_V_read);

    conv7_pipe_13_V_V_U : component fifo_w16_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv7_U0_conv7_pipe_13_V_V_din,
        if_full_n => conv7_pipe_13_V_V_full_n,
        if_write => conv7_U0_conv7_pipe_13_V_V_write,
        if_dout => conv7_pipe_13_V_V_dout,
        if_empty_n => conv7_pipe_13_V_V_empty_n,
        if_read => relu_bn7_U0_conv7_pipe_13_V_V_read);

    relu7_pipe_14_V_V_U : component fifo_w5_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_bn7_U0_relu7_pipe_14_V_V_din,
        if_full_n => relu7_pipe_14_V_V_full_n,
        if_write => relu_bn7_U0_relu7_pipe_14_V_V_write,
        if_dout => relu7_pipe_14_V_V_dout,
        if_empty_n => relu7_pipe_14_V_V_empty_n,
        if_read => conv8_U0_relu7_pipe_14_V_V_read);

    conv8_pipe_15_V_V_U : component fifo_w16_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv8_U0_conv8_pipe_15_V_V_din,
        if_full_n => conv8_pipe_15_V_V_full_n,
        if_write => conv8_U0_conv8_pipe_15_V_V_write,
        if_dout => conv8_pipe_15_V_V_dout,
        if_empty_n => conv8_pipe_15_V_V_empty_n,
        if_read => relu_bn8_U0_conv8_pipe_15_V_V_read);

    start_for_relu_bnCfe_U : component start_for_relu_bnCfe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_relu_bn1_U0_din,
        if_full_n => start_for_relu_bn1_U0_full_n,
        if_write => conv113_U0_start_write,
        if_dout => start_for_relu_bn1_U0_dout,
        if_empty_n => start_for_relu_bn1_U0_empty_n,
        if_read => relu_bn1_U0_ap_ready);

    start_for_relu_bnCge_U : component start_for_relu_bnCge
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_relu_bn8_U0_din,
        if_full_n => start_for_relu_bn8_U0_full_n,
        if_write => conv113_U0_start_write,
        if_dout => start_for_relu_bn8_U0_dout,
        if_empty_n => start_for_relu_bn8_U0_empty_n,
        if_read => relu_bn8_U0_ap_ready);

    start_for_maxpoolChe_U : component start_for_maxpoolChe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_maxpool1_U0_din,
        if_full_n => start_for_maxpool1_U0_full_n,
        if_write => relu_bn1_U0_start_write,
        if_dout => start_for_maxpool1_U0_dout,
        if_empty_n => start_for_maxpool1_U0_empty_n,
        if_read => maxpool1_U0_ap_ready);

    start_for_conv2_U0_U : component start_for_conv2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv2_U0_din,
        if_full_n => start_for_conv2_U0_full_n,
        if_write => maxpool1_U0_start_write,
        if_dout => start_for_conv2_U0_dout,
        if_empty_n => start_for_conv2_U0_empty_n,
        if_read => conv2_U0_ap_ready);

    start_for_relu_bnCie_U : component start_for_relu_bnCie
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_relu_bn2_U0_din,
        if_full_n => start_for_relu_bn2_U0_full_n,
        if_write => conv2_U0_start_write,
        if_dout => start_for_relu_bn2_U0_dout,
        if_empty_n => start_for_relu_bn2_U0_empty_n,
        if_read => relu_bn2_U0_ap_ready);

    start_for_maxpoolCje_U : component start_for_maxpoolCje
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_maxpool2_U0_din,
        if_full_n => start_for_maxpool2_U0_full_n,
        if_write => relu_bn2_U0_start_write,
        if_dout => start_for_maxpool2_U0_dout,
        if_empty_n => start_for_maxpool2_U0_empty_n,
        if_read => maxpool2_U0_ap_ready);

    start_for_conv3_U0_U : component start_for_conv3_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv3_U0_din,
        if_full_n => start_for_conv3_U0_full_n,
        if_write => maxpool2_U0_start_write,
        if_dout => start_for_conv3_U0_dout,
        if_empty_n => start_for_conv3_U0_empty_n,
        if_read => conv3_U0_ap_ready);

    start_for_relu_bnCke_U : component start_for_relu_bnCke
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_relu_bn3_U0_din,
        if_full_n => start_for_relu_bn3_U0_full_n,
        if_write => conv3_U0_start_write,
        if_dout => start_for_relu_bn3_U0_dout,
        if_empty_n => start_for_relu_bn3_U0_empty_n,
        if_read => relu_bn3_U0_ap_ready);

    start_for_maxpoolCle_U : component start_for_maxpoolCle
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_maxpool3_U0_din,
        if_full_n => start_for_maxpool3_U0_full_n,
        if_write => relu_bn3_U0_start_write,
        if_dout => start_for_maxpool3_U0_dout,
        if_empty_n => start_for_maxpool3_U0_empty_n,
        if_read => maxpool3_U0_ap_ready);

    start_for_conv4_U0_U : component start_for_conv4_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv4_U0_din,
        if_full_n => start_for_conv4_U0_full_n,
        if_write => maxpool3_U0_start_write,
        if_dout => start_for_conv4_U0_dout,
        if_empty_n => start_for_conv4_U0_empty_n,
        if_read => conv4_U0_ap_ready);

    start_for_relu_bnCme_U : component start_for_relu_bnCme
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_relu_bn4_U0_din,
        if_full_n => start_for_relu_bn4_U0_full_n,
        if_write => conv4_U0_start_write,
        if_dout => start_for_relu_bn4_U0_dout,
        if_empty_n => start_for_relu_bn4_U0_empty_n,
        if_read => relu_bn4_U0_ap_ready);

    start_for_maxpoolCne_U : component start_for_maxpoolCne
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_maxpool4_U0_din,
        if_full_n => start_for_maxpool4_U0_full_n,
        if_write => relu_bn4_U0_start_write,
        if_dout => start_for_maxpool4_U0_dout,
        if_empty_n => start_for_maxpool4_U0_empty_n,
        if_read => maxpool4_U0_ap_ready);

    start_for_conv5_U0_U : component start_for_conv5_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv5_U0_din,
        if_full_n => start_for_conv5_U0_full_n,
        if_write => maxpool4_U0_start_write,
        if_dout => start_for_conv5_U0_dout,
        if_empty_n => start_for_conv5_U0_empty_n,
        if_read => conv5_U0_ap_ready);

    start_for_relu_bnCoe_U : component start_for_relu_bnCoe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_relu_bn5_U0_din,
        if_full_n => start_for_relu_bn5_U0_full_n,
        if_write => conv5_U0_start_write,
        if_dout => start_for_relu_bn5_U0_dout,
        if_empty_n => start_for_relu_bn5_U0_empty_n,
        if_read => relu_bn5_U0_ap_ready);

    start_for_conv6_U0_U : component start_for_conv6_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv6_U0_din,
        if_full_n => start_for_conv6_U0_full_n,
        if_write => relu_bn5_U0_start_write,
        if_dout => start_for_conv6_U0_dout,
        if_empty_n => start_for_conv6_U0_empty_n,
        if_read => conv6_U0_ap_ready);

    start_for_relu_bnCpe_U : component start_for_relu_bnCpe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_relu_bn6_U0_din,
        if_full_n => start_for_relu_bn6_U0_full_n,
        if_write => conv6_U0_start_write,
        if_dout => start_for_relu_bn6_U0_dout,
        if_empty_n => start_for_relu_bn6_U0_empty_n,
        if_read => relu_bn6_U0_ap_ready);

    start_for_conv7_U0_U : component start_for_conv7_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv7_U0_din,
        if_full_n => start_for_conv7_U0_full_n,
        if_write => relu_bn6_U0_start_write,
        if_dout => start_for_conv7_U0_dout,
        if_empty_n => start_for_conv7_U0_empty_n,
        if_read => conv7_U0_ap_ready);

    start_for_relu_bnCqe_U : component start_for_relu_bnCqe
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_relu_bn7_U0_din,
        if_full_n => start_for_relu_bn7_U0_full_n,
        if_write => conv7_U0_start_write,
        if_dout => start_for_relu_bn7_U0_dout,
        if_empty_n => start_for_relu_bn7_U0_empty_n,
        if_read => relu_bn7_U0_ap_ready);

    start_for_conv8_U0_U : component start_for_conv8_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv8_U0_din,
        if_full_n => start_for_conv8_U0_full_n,
        if_write => relu_bn7_U0_start_write,
        if_dout => start_for_conv8_U0_dout,
        if_empty_n => start_for_conv8_U0_empty_n,
        if_read => conv8_U0_ap_ready);




    ap_done <= relu_bn8_U0_ap_done;
    ap_idle <= (relu_bn8_U0_ap_idle and relu_bn7_U0_ap_idle and relu_bn6_U0_ap_idle and relu_bn5_U0_ap_idle and relu_bn4_U0_ap_idle and relu_bn3_U0_ap_idle and relu_bn2_U0_ap_idle and relu_bn1_U0_ap_idle and maxpool4_U0_ap_idle and maxpool3_U0_ap_idle and maxpool2_U0_ap_idle and maxpool1_U0_ap_idle and conv8_U0_ap_idle and conv7_U0_ap_idle and conv6_U0_ap_idle and conv5_U0_ap_idle and conv4_U0_ap_idle and conv3_U0_ap_idle and conv2_U0_ap_idle and conv113_U0_ap_idle);
    ap_ready <= conv113_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= relu_bn8_U0_ap_done;
    ap_sync_ready <= conv113_U0_ap_ready;
    conv113_U0_ap_continue <= ap_const_logic_1;
    conv113_U0_ap_start <= ap_start;
    conv113_U0_start_full_n <= (start_for_relu_bn8_U0_full_n and start_for_relu_bn1_U0_full_n);
    conv2_U0_ap_continue <= ap_const_logic_1;
    conv2_U0_ap_start <= start_for_conv2_U0_empty_n;
    conv3_U0_ap_continue <= ap_const_logic_1;
    conv3_U0_ap_start <= start_for_conv3_U0_empty_n;
    conv4_U0_ap_continue <= ap_const_logic_1;
    conv4_U0_ap_start <= start_for_conv4_U0_empty_n;
    conv5_U0_ap_continue <= ap_const_logic_1;
    conv5_U0_ap_start <= start_for_conv5_U0_empty_n;
    conv6_U0_ap_continue <= ap_const_logic_1;
    conv6_U0_ap_start <= start_for_conv6_U0_empty_n;
    conv7_U0_ap_continue <= ap_const_logic_1;
    conv7_U0_ap_start <= start_for_conv7_U0_empty_n;
    conv8_U0_ap_continue <= ap_const_logic_1;
    conv8_U0_ap_start <= start_for_conv8_U0_empty_n;
    conv8_U0_start_full_n <= ap_const_logic_1;
    conv8_U0_start_write <= ap_const_logic_0;
    maxpool1_U0_ap_continue <= ap_const_logic_1;
    maxpool1_U0_ap_start <= start_for_maxpool1_U0_empty_n;
    maxpool2_U0_ap_continue <= ap_const_logic_1;
    maxpool2_U0_ap_start <= start_for_maxpool2_U0_empty_n;
    maxpool3_U0_ap_continue <= ap_const_logic_1;
    maxpool3_U0_ap_start <= start_for_maxpool3_U0_empty_n;
    maxpool4_U0_ap_continue <= ap_const_logic_1;
    maxpool4_U0_ap_start <= start_for_maxpool4_U0_empty_n;
    relu_bn1_U0_ap_continue <= ap_const_logic_1;
    relu_bn1_U0_ap_start <= start_for_relu_bn1_U0_empty_n;
    relu_bn2_U0_ap_continue <= ap_const_logic_1;
    relu_bn2_U0_ap_start <= start_for_relu_bn2_U0_empty_n;
    relu_bn3_U0_ap_continue <= ap_const_logic_1;
    relu_bn3_U0_ap_start <= start_for_relu_bn3_U0_empty_n;
    relu_bn4_U0_ap_continue <= ap_const_logic_1;
    relu_bn4_U0_ap_start <= start_for_relu_bn4_U0_empty_n;
    relu_bn5_U0_ap_continue <= ap_const_logic_1;
    relu_bn5_U0_ap_start <= start_for_relu_bn5_U0_empty_n;
    relu_bn6_U0_ap_continue <= ap_const_logic_1;
    relu_bn6_U0_ap_start <= start_for_relu_bn6_U0_empty_n;
    relu_bn7_U0_ap_continue <= ap_const_logic_1;
    relu_bn7_U0_ap_start <= start_for_relu_bn7_U0_empty_n;
    relu_bn8_U0_ap_continue <= ap_const_logic_1;
    relu_bn8_U0_ap_start <= start_for_relu_bn8_U0_empty_n;
    relu_bn8_U0_start_full_n <= ap_const_logic_1;
    relu_bn8_U0_start_write <= ap_const_logic_0;
    start_for_conv2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv5_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv6_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv7_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv8_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_maxpool1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_maxpool2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_maxpool3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_maxpool4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_relu_bn1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_relu_bn2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_relu_bn3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_relu_bn4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_relu_bn5_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_relu_bn6_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_relu_bn7_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_relu_bn8_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
