// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_bn8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        conv8_pipe_15_V_V_dout,
        conv8_pipe_15_V_V_empty_n,
        conv8_pipe_15_V_V_read,
        m_axi_result_AWVALID,
        m_axi_result_AWREADY,
        m_axi_result_AWADDR,
        m_axi_result_AWID,
        m_axi_result_AWLEN,
        m_axi_result_AWSIZE,
        m_axi_result_AWBURST,
        m_axi_result_AWLOCK,
        m_axi_result_AWCACHE,
        m_axi_result_AWPROT,
        m_axi_result_AWQOS,
        m_axi_result_AWREGION,
        m_axi_result_AWUSER,
        m_axi_result_WVALID,
        m_axi_result_WREADY,
        m_axi_result_WDATA,
        m_axi_result_WSTRB,
        m_axi_result_WLAST,
        m_axi_result_WID,
        m_axi_result_WUSER,
        m_axi_result_ARVALID,
        m_axi_result_ARREADY,
        m_axi_result_ARADDR,
        m_axi_result_ARID,
        m_axi_result_ARLEN,
        m_axi_result_ARSIZE,
        m_axi_result_ARBURST,
        m_axi_result_ARLOCK,
        m_axi_result_ARCACHE,
        m_axi_result_ARPROT,
        m_axi_result_ARQOS,
        m_axi_result_ARREGION,
        m_axi_result_ARUSER,
        m_axi_result_RVALID,
        m_axi_result_RREADY,
        m_axi_result_RDATA,
        m_axi_result_RLAST,
        m_axi_result_RID,
        m_axi_result_RUSER,
        m_axi_result_RRESP,
        m_axi_result_BVALID,
        m_axi_result_BREADY,
        m_axi_result_BRESP,
        m_axi_result_BID,
        m_axi_result_BUSER,
        result_offset_dout,
        result_offset_empty_n,
        result_offset_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state11 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] conv8_pipe_15_V_V_dout;
input   conv8_pipe_15_V_V_empty_n;
output   conv8_pipe_15_V_V_read;
output   m_axi_result_AWVALID;
input   m_axi_result_AWREADY;
output  [31:0] m_axi_result_AWADDR;
output  [0:0] m_axi_result_AWID;
output  [31:0] m_axi_result_AWLEN;
output  [2:0] m_axi_result_AWSIZE;
output  [1:0] m_axi_result_AWBURST;
output  [1:0] m_axi_result_AWLOCK;
output  [3:0] m_axi_result_AWCACHE;
output  [2:0] m_axi_result_AWPROT;
output  [3:0] m_axi_result_AWQOS;
output  [3:0] m_axi_result_AWREGION;
output  [0:0] m_axi_result_AWUSER;
output   m_axi_result_WVALID;
input   m_axi_result_WREADY;
output  [31:0] m_axi_result_WDATA;
output  [3:0] m_axi_result_WSTRB;
output   m_axi_result_WLAST;
output  [0:0] m_axi_result_WID;
output  [0:0] m_axi_result_WUSER;
output   m_axi_result_ARVALID;
input   m_axi_result_ARREADY;
output  [31:0] m_axi_result_ARADDR;
output  [0:0] m_axi_result_ARID;
output  [31:0] m_axi_result_ARLEN;
output  [2:0] m_axi_result_ARSIZE;
output  [1:0] m_axi_result_ARBURST;
output  [1:0] m_axi_result_ARLOCK;
output  [3:0] m_axi_result_ARCACHE;
output  [2:0] m_axi_result_ARPROT;
output  [3:0] m_axi_result_ARQOS;
output  [3:0] m_axi_result_ARREGION;
output  [0:0] m_axi_result_ARUSER;
input   m_axi_result_RVALID;
output   m_axi_result_RREADY;
input  [31:0] m_axi_result_RDATA;
input   m_axi_result_RLAST;
input  [0:0] m_axi_result_RID;
input  [0:0] m_axi_result_RUSER;
input  [1:0] m_axi_result_RRESP;
input   m_axi_result_BVALID;
output   m_axi_result_BREADY;
input  [1:0] m_axi_result_BRESP;
input  [0:0] m_axi_result_BID;
input  [0:0] m_axi_result_BUSER;
input  [31:0] result_offset_dout;
input   result_offset_empty_n;
output   result_offset_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv8_pipe_15_V_V_read;
reg m_axi_result_AWVALID;
reg m_axi_result_WVALID;
reg m_axi_result_BREADY;
reg result_offset_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] a_batchnorm8_V_address0;
reg    a_batchnorm8_V_ce0;
wire  signed [11:0] a_batchnorm8_V_q0;
wire   [5:0] b_batchnorm8_V_address0;
reg    b_batchnorm8_V_ce0;
wire  signed [21:0] b_batchnorm8_V_q0;
reg    conv8_pipe_15_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln884_reg_878;
reg    result_blk_n_AW;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln884_reg_878_pp0_iter1_reg;
reg    result_blk_n_W;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln884_reg_878_pp0_iter2_reg;
reg    result_blk_n_B;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] icmp_ln884_reg_878_pp0_iter7_reg;
reg    result_offset_blk_n;
reg   [13:0] indvar_flatten13_i_reg_258;
reg   [3:0] args07_0_0_i_reg_269;
reg   [11:0] indvar_flatten_i_reg_280;
reg   [4:0] args17_0_0_i_reg_291;
reg   [6:0] args27_0_0_i_reg_302;
wire   [63:0] zext_ln894_fu_323_p1;
reg   [63:0] zext_ln894_reg_873;
reg    ap_block_state1;
wire   [0:0] icmp_ln884_fu_327_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln884_reg_878_pp0_iter3_reg;
reg   [0:0] icmp_ln884_reg_878_pp0_iter4_reg;
reg   [0:0] icmp_ln884_reg_878_pp0_iter5_reg;
reg   [0:0] icmp_ln884_reg_878_pp0_iter6_reg;
wire   [13:0] add_ln884_fu_333_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] select_ln894_1_fu_359_p3;
reg   [3:0] select_ln894_1_reg_887;
wire   [4:0] select_ln894_3_fu_435_p3;
reg   [4:0] select_ln894_3_reg_892;
reg   [31:0] result_addr_reg_897;
reg   [31:0] result_addr_reg_897_pp0_iter1_reg;
wire   [6:0] add_ln886_fu_488_p2;
wire   [11:0] select_ln885_fu_500_p3;
wire   [4:0] select_ln1495_1_fu_565_p3;
reg   [4:0] select_ln1495_1_reg_923;
reg   [31:0] l_i_fu_591_p3;
reg   [31:0] l_i_reg_932;
wire   [7:0] trunc_ln943_fu_599_p1;
reg   [7:0] trunc_ln943_reg_937;
wire   [31:0] select_ln935_fu_854_p3;
reg   [31:0] select_ln935_reg_942;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg   [3:0] ap_phi_mux_args07_0_0_i_phi_fu_273_p4;
reg   [4:0] ap_phi_mux_args17_0_0_i_phi_fu_295_p4;
wire   [63:0] zext_ln892_fu_465_p1;
wire   [63:0] add_ln894_3_fu_477_p2;
reg    ap_block_pp0_stage0_01001;
wire   [29:0] result_offset1_i_fu_313_p4;
wire   [0:0] icmp_ln885_fu_345_p2;
wire   [3:0] add_ln884_1_fu_339_p2;
wire   [7:0] tmp_1_i_fu_367_p3;
wire   [5:0] tmp_2_i_fu_379_p3;
wire   [8:0] zext_ln894_2_fu_387_p1;
wire   [8:0] zext_ln894_1_fu_375_p1;
wire   [0:0] icmp_ln886_fu_403_p2;
wire   [0:0] xor_ln894_fu_397_p2;
wire   [4:0] select_ln894_fu_351_p3;
wire   [0:0] and_ln894_fu_409_p2;
wire   [0:0] or_ln894_fu_421_p2;
wire   [4:0] add_ln885_fu_415_p2;
wire   [8:0] add_ln894_fu_391_p2;
wire   [8:0] zext_ln894_3_fu_443_p1;
wire   [8:0] add_ln894_1_fu_447_p2;
wire   [14:0] tmp_fu_453_p3;
wire   [6:0] select_ln894_2_fu_427_p3;
wire   [63:0] zext_ln894_4_fu_461_p1;
wire   [63:0] add_ln894_2_fu_471_p2;
wire   [11:0] add_ln885_1_fu_494_p2;
wire  signed [25:0] grp_fu_862_p3;
wire   [15:0] trunc_ln_i_fu_520_p4;
wire   [0:0] tmp_1_fu_529_p3;
wire   [0:0] icmp_ln1495_fu_536_p2;
wire   [0:0] or_ln1495_fu_559_p2;
wire   [4:0] select_ln1495_fu_551_p3;
wire   [4:0] tmp_7_i_fu_542_p4;
reg   [4:0] p_Result_i_fu_573_p4;
wire   [31:0] p_Result_7_i_fu_583_p3;
wire   [31:0] sub_ln944_fu_608_p2;
wire   [31:0] add_ln944_fu_617_p2;
wire   [30:0] tmp_2_fu_623_p4;
wire   [2:0] trunc_ln947_fu_639_p1;
wire   [2:0] sub_ln947_fu_643_p2;
wire   [4:0] zext_ln947_fu_649_p1;
wire   [4:0] lshr_ln947_fu_653_p2;
wire   [4:0] and_ln947_fu_659_p2;
wire   [0:0] icmp_ln947_fu_633_p2;
wire   [0:0] icmp_ln947_1_fu_664_p2;
wire   [0:0] tmp_3_fu_676_p3;
wire   [4:0] trunc_ln944_fu_613_p1;
wire   [4:0] add_ln949_fu_690_p2;
wire   [0:0] p_Result_3_i_fu_696_p3;
wire   [0:0] xor_ln949_fu_684_p2;
wire   [0:0] and_ln949_fu_703_p2;
wire   [0:0] and_ln947_1_fu_670_p2;
wire   [0:0] or_ln949_fu_709_p2;
wire   [31:0] zext_ln958_fu_726_p1;
wire   [31:0] add_ln958_fu_735_p2;
wire   [31:0] lshr_ln958_fu_741_p2;
wire   [31:0] sub_ln958_fu_751_p2;
wire   [63:0] zext_ln957_fu_723_p1;
wire   [63:0] zext_ln958_2_fu_757_p1;
wire   [0:0] icmp_ln958_fu_729_p2;
wire   [63:0] zext_ln958_1_fu_747_p1;
wire   [63:0] shl_ln958_fu_761_p2;
wire   [31:0] or_ln_i_fu_715_p3;
wire   [63:0] zext_ln961_fu_775_p1;
wire   [63:0] select_ln958_fu_767_p3;
wire   [63:0] add_ln961_fu_779_p2;
wire   [62:0] lshr_ln_i_fu_785_p4;
wire   [0:0] tmp_4_fu_799_p3;
wire   [7:0] sub_ln964_fu_815_p2;
wire   [7:0] select_ln964_fu_807_p3;
wire   [7:0] add_ln964_fu_820_p2;
wire   [63:0] zext_ln962_fu_795_p1;
wire   [8:0] tmp_5_i_fu_826_p3;
wire   [63:0] p_Result_9_i_fu_834_p5;
wire   [31:0] trunc_ln738_fu_846_p1;
wire   [0:0] icmp_ln935_fu_603_p2;
wire   [31:0] bitcast_ln739_fu_850_p1;
wire    ap_CS_fsm_state11;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

relu_bn8_a_batchnCce #(
    .DataWidth( 12 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
a_batchnorm8_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a_batchnorm8_V_address0),
    .ce0(a_batchnorm8_V_ce0),
    .q0(a_batchnorm8_V_q0)
);

relu_bn8_b_batchnCde #(
    .DataWidth( 22 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
b_batchnorm8_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_batchnorm8_V_address0),
    .ce0(b_batchnorm8_V_ce0),
    .q0(b_batchnorm8_V_q0)
);

test_mac_muladd_1Cee #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 26 ))
test_mac_muladd_1Cee_U922(
    .din0(a_batchnorm8_V_q0),
    .din1(conv8_pipe_15_V_V_dout),
    .din2(b_batchnorm8_V_q0),
    .dout(grp_fu_862_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((result_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((~((result_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln884_reg_878 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        args07_0_0_i_reg_269 <= select_ln894_1_reg_887;
    end else if ((~((result_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        args07_0_0_i_reg_269 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln884_reg_878 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        args17_0_0_i_reg_291 <= select_ln894_3_reg_892;
    end else if ((~((result_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        args17_0_0_i_reg_291 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln884_fu_327_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        args27_0_0_i_reg_302 <= add_ln886_fu_488_p2;
    end else if ((~((result_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        args27_0_0_i_reg_302 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln884_fu_327_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten13_i_reg_258 <= add_ln884_fu_333_p2;
    end else if ((~((result_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_i_reg_258 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln884_fu_327_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_i_reg_280 <= select_ln885_fu_500_p3;
    end else if ((~((result_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_i_reg_280 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln884_reg_878 <= icmp_ln884_fu_327_p2;
        icmp_ln884_reg_878_pp0_iter1_reg <= icmp_ln884_reg_878;
        result_addr_reg_897_pp0_iter1_reg <= result_addr_reg_897;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln884_reg_878_pp0_iter2_reg <= icmp_ln884_reg_878_pp0_iter1_reg;
        icmp_ln884_reg_878_pp0_iter3_reg <= icmp_ln884_reg_878_pp0_iter2_reg;
        icmp_ln884_reg_878_pp0_iter4_reg <= icmp_ln884_reg_878_pp0_iter3_reg;
        icmp_ln884_reg_878_pp0_iter5_reg <= icmp_ln884_reg_878_pp0_iter4_reg;
        icmp_ln884_reg_878_pp0_iter6_reg <= icmp_ln884_reg_878_pp0_iter5_reg;
        icmp_ln884_reg_878_pp0_iter7_reg <= icmp_ln884_reg_878_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln884_reg_878 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        l_i_reg_932 <= l_i_fu_591_p3;
        select_ln1495_1_reg_923 <= select_ln1495_1_fu_565_p3;
        trunc_ln943_reg_937 <= trunc_ln943_fu_599_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln884_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        result_addr_reg_897 <= add_ln894_3_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln884_fu_327_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln894_1_reg_887 <= select_ln894_1_fu_359_p3;
        select_ln894_3_reg_892 <= select_ln894_3_fu_435_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln884_reg_878_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln935_reg_942 <= select_ln935_fu_854_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((result_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        zext_ln894_reg_873[29 : 0] <= zext_ln894_fu_323_p1[29 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_batchnorm8_V_ce0 = 1'b1;
    end else begin
        a_batchnorm8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln884_fu_327_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln884_reg_878 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_args07_0_0_i_phi_fu_273_p4 = select_ln894_1_reg_887;
    end else begin
        ap_phi_mux_args07_0_0_i_phi_fu_273_p4 = args07_0_0_i_reg_269;
    end
end

always @ (*) begin
    if (((icmp_ln884_reg_878 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_args17_0_0_i_phi_fu_295_p4 = select_ln894_3_reg_892;
    end else begin
        ap_phi_mux_args17_0_0_i_phi_fu_295_p4 = args17_0_0_i_reg_291;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_batchnorm8_V_ce0 = 1'b1;
    end else begin
        b_batchnorm8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln884_reg_878 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        conv8_pipe_15_V_V_blk_n = conv8_pipe_15_V_V_empty_n;
    end else begin
        conv8_pipe_15_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln884_reg_878 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv8_pipe_15_V_V_read = 1'b1;
    end else begin
        conv8_pipe_15_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln884_reg_878_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_result_AWVALID = 1'b1;
    end else begin
        m_axi_result_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln884_reg_878_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_result_BREADY = 1'b1;
    end else begin
        m_axi_result_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln884_reg_878_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_result_WVALID = 1'b1;
    end else begin
        m_axi_result_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln884_reg_878_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        result_blk_n_AW = m_axi_result_AWREADY;
    end else begin
        result_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln884_reg_878_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        result_blk_n_B = m_axi_result_BVALID;
    end else begin
        result_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln884_reg_878_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        result_blk_n_W = m_axi_result_WREADY;
    end else begin
        result_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        result_offset_blk_n = result_offset_empty_n;
    end else begin
        result_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((result_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        result_offset_read = 1'b1;
    end else begin
        result_offset_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((result_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln884_fu_327_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln884_fu_327_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_batchnorm8_V_address0 = zext_ln892_fu_465_p1;

assign add_ln884_1_fu_339_p2 = (4'd1 + ap_phi_mux_args07_0_0_i_phi_fu_273_p4);

assign add_ln884_fu_333_p2 = (indvar_flatten13_i_reg_258 + 14'd1);

assign add_ln885_1_fu_494_p2 = (12'd1 + indvar_flatten_i_reg_280);

assign add_ln885_fu_415_p2 = (5'd1 + select_ln894_fu_351_p3);

assign add_ln886_fu_488_p2 = (7'd1 + select_ln894_2_fu_427_p3);

assign add_ln894_1_fu_447_p2 = (add_ln894_fu_391_p2 + zext_ln894_3_fu_443_p1);

assign add_ln894_2_fu_471_p2 = (zext_ln894_4_fu_461_p1 + zext_ln892_fu_465_p1);

assign add_ln894_3_fu_477_p2 = (zext_ln894_reg_873 + add_ln894_2_fu_471_p2);

assign add_ln894_fu_391_p2 = (zext_ln894_2_fu_387_p1 + zext_ln894_1_fu_375_p1);

assign add_ln944_fu_617_p2 = ($signed(32'd4294967272) + $signed(sub_ln944_fu_608_p2));

assign add_ln949_fu_690_p2 = (5'd8 + trunc_ln944_fu_613_p1);

assign add_ln958_fu_735_p2 = ($signed(32'd4294967271) + $signed(sub_ln944_fu_608_p2));

assign add_ln961_fu_779_p2 = (zext_ln961_fu_775_p1 + select_ln958_fu_767_p3);

assign add_ln964_fu_820_p2 = (sub_ln964_fu_815_p2 + select_ln964_fu_807_p3);

assign and_ln894_fu_409_p2 = (xor_ln894_fu_397_p2 & icmp_ln886_fu_403_p2);

assign and_ln947_1_fu_670_p2 = (icmp_ln947_fu_633_p2 & icmp_ln947_1_fu_664_p2);

assign and_ln947_fu_659_p2 = (select_ln1495_1_reg_923 & lshr_ln947_fu_653_p2);

assign and_ln949_fu_703_p2 = (xor_ln949_fu_684_p2 & p_Result_3_i_fu_696_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln884_reg_878_pp0_iter7_reg == 1'd0) & (m_axi_result_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((icmp_ln884_reg_878 == 1'd0) & (conv8_pipe_15_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln884_reg_878_pp0_iter7_reg == 1'd0) & (m_axi_result_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln884_reg_878 == 1'd0) & (conv8_pipe_15_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln884_reg_878_pp0_iter7_reg == 1'd0) & (m_axi_result_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln884_reg_878 == 1'd0) & (conv8_pipe_15_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((result_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter8 = ((icmp_ln884_reg_878_pp0_iter7_reg == 1'd0) & (m_axi_result_BVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln884_reg_878 == 1'd0) & (conv8_pipe_15_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln884_reg_878_pp0_iter1_reg == 1'd0) & (m_axi_result_AWREADY == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((icmp_ln884_reg_878_pp0_iter2_reg == 1'd0) & (m_axi_result_WREADY == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_batchnorm8_V_address0 = zext_ln892_fu_465_p1;

assign bitcast_ln739_fu_850_p1 = trunc_ln738_fu_846_p1;

assign icmp_ln1495_fu_536_p2 = (($signed(trunc_ln_i_fu_520_p4) > $signed(16'd256)) ? 1'b1 : 1'b0);

assign icmp_ln884_fu_327_p2 = ((indvar_flatten13_i_reg_258 == 14'd12800) ? 1'b1 : 1'b0);

assign icmp_ln885_fu_345_p2 = ((indvar_flatten_i_reg_280 == 12'd1280) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_403_p2 = ((args27_0_0_i_reg_302 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_603_p2 = ((select_ln1495_1_reg_923 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_1_fu_664_p2 = ((and_ln947_fu_659_p2 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_fu_633_p2 = (($signed(tmp_2_fu_623_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln958_fu_729_p2 = (($signed(add_ln944_fu_617_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);


always @ (p_Result_7_i_fu_583_p3) begin
    if (p_Result_7_i_fu_583_p3[0] == 1'b1) begin
        l_i_fu_591_p3 = 32'd0;
    end else if (p_Result_7_i_fu_583_p3[1] == 1'b1) begin
        l_i_fu_591_p3 = 32'd1;
    end else if (p_Result_7_i_fu_583_p3[2] == 1'b1) begin
        l_i_fu_591_p3 = 32'd2;
    end else if (p_Result_7_i_fu_583_p3[3] == 1'b1) begin
        l_i_fu_591_p3 = 32'd3;
    end else if (p_Result_7_i_fu_583_p3[4] == 1'b1) begin
        l_i_fu_591_p3 = 32'd4;
    end else if (p_Result_7_i_fu_583_p3[5] == 1'b1) begin
        l_i_fu_591_p3 = 32'd5;
    end else if (p_Result_7_i_fu_583_p3[6] == 1'b1) begin
        l_i_fu_591_p3 = 32'd6;
    end else if (p_Result_7_i_fu_583_p3[7] == 1'b1) begin
        l_i_fu_591_p3 = 32'd7;
    end else if (p_Result_7_i_fu_583_p3[8] == 1'b1) begin
        l_i_fu_591_p3 = 32'd8;
    end else if (p_Result_7_i_fu_583_p3[9] == 1'b1) begin
        l_i_fu_591_p3 = 32'd9;
    end else if (p_Result_7_i_fu_583_p3[10] == 1'b1) begin
        l_i_fu_591_p3 = 32'd10;
    end else if (p_Result_7_i_fu_583_p3[11] == 1'b1) begin
        l_i_fu_591_p3 = 32'd11;
    end else if (p_Result_7_i_fu_583_p3[12] == 1'b1) begin
        l_i_fu_591_p3 = 32'd12;
    end else if (p_Result_7_i_fu_583_p3[13] == 1'b1) begin
        l_i_fu_591_p3 = 32'd13;
    end else if (p_Result_7_i_fu_583_p3[14] == 1'b1) begin
        l_i_fu_591_p3 = 32'd14;
    end else if (p_Result_7_i_fu_583_p3[15] == 1'b1) begin
        l_i_fu_591_p3 = 32'd15;
    end else if (p_Result_7_i_fu_583_p3[16] == 1'b1) begin
        l_i_fu_591_p3 = 32'd16;
    end else if (p_Result_7_i_fu_583_p3[17] == 1'b1) begin
        l_i_fu_591_p3 = 32'd17;
    end else if (p_Result_7_i_fu_583_p3[18] == 1'b1) begin
        l_i_fu_591_p3 = 32'd18;
    end else if (p_Result_7_i_fu_583_p3[19] == 1'b1) begin
        l_i_fu_591_p3 = 32'd19;
    end else if (p_Result_7_i_fu_583_p3[20] == 1'b1) begin
        l_i_fu_591_p3 = 32'd20;
    end else if (p_Result_7_i_fu_583_p3[21] == 1'b1) begin
        l_i_fu_591_p3 = 32'd21;
    end else if (p_Result_7_i_fu_583_p3[22] == 1'b1) begin
        l_i_fu_591_p3 = 32'd22;
    end else if (p_Result_7_i_fu_583_p3[23] == 1'b1) begin
        l_i_fu_591_p3 = 32'd23;
    end else if (p_Result_7_i_fu_583_p3[24] == 1'b1) begin
        l_i_fu_591_p3 = 32'd24;
    end else if (p_Result_7_i_fu_583_p3[25] == 1'b1) begin
        l_i_fu_591_p3 = 32'd25;
    end else if (p_Result_7_i_fu_583_p3[26] == 1'b1) begin
        l_i_fu_591_p3 = 32'd26;
    end else if (p_Result_7_i_fu_583_p3[27] == 1'b1) begin
        l_i_fu_591_p3 = 32'd27;
    end else if (p_Result_7_i_fu_583_p3[28] == 1'b1) begin
        l_i_fu_591_p3 = 32'd28;
    end else if (p_Result_7_i_fu_583_p3[29] == 1'b1) begin
        l_i_fu_591_p3 = 32'd29;
    end else if (p_Result_7_i_fu_583_p3[30] == 1'b1) begin
        l_i_fu_591_p3 = 32'd30;
    end else if (p_Result_7_i_fu_583_p3[31] == 1'b1) begin
        l_i_fu_591_p3 = 32'd31;
    end else begin
        l_i_fu_591_p3 = 32'd32;
    end
end

assign lshr_ln947_fu_653_p2 = 5'd31 >> zext_ln947_fu_649_p1;

assign lshr_ln958_fu_741_p2 = zext_ln958_fu_726_p1 >> add_ln958_fu_735_p2;

assign lshr_ln_i_fu_785_p4 = {{add_ln961_fu_779_p2[63:1]}};

assign m_axi_result_ARADDR = 32'd0;

assign m_axi_result_ARBURST = 2'd0;

assign m_axi_result_ARCACHE = 4'd0;

assign m_axi_result_ARID = 1'd0;

assign m_axi_result_ARLEN = 32'd0;

assign m_axi_result_ARLOCK = 2'd0;

assign m_axi_result_ARPROT = 3'd0;

assign m_axi_result_ARQOS = 4'd0;

assign m_axi_result_ARREGION = 4'd0;

assign m_axi_result_ARSIZE = 3'd0;

assign m_axi_result_ARUSER = 1'd0;

assign m_axi_result_ARVALID = 1'b0;

assign m_axi_result_AWADDR = result_addr_reg_897_pp0_iter1_reg;

assign m_axi_result_AWBURST = 2'd0;

assign m_axi_result_AWCACHE = 4'd0;

assign m_axi_result_AWID = 1'd0;

assign m_axi_result_AWLEN = 32'd1;

assign m_axi_result_AWLOCK = 2'd0;

assign m_axi_result_AWPROT = 3'd0;

assign m_axi_result_AWQOS = 4'd0;

assign m_axi_result_AWREGION = 4'd0;

assign m_axi_result_AWSIZE = 3'd0;

assign m_axi_result_AWUSER = 1'd0;

assign m_axi_result_RREADY = 1'b0;

assign m_axi_result_WDATA = select_ln935_reg_942;

assign m_axi_result_WID = 1'd0;

assign m_axi_result_WLAST = 1'b0;

assign m_axi_result_WSTRB = 4'd15;

assign m_axi_result_WUSER = 1'd0;

assign or_ln1495_fu_559_p2 = (tmp_1_fu_529_p3 | icmp_ln1495_fu_536_p2);

assign or_ln894_fu_421_p2 = (icmp_ln885_fu_345_p2 | and_ln894_fu_409_p2);

assign or_ln949_fu_709_p2 = (and_ln949_fu_703_p2 | and_ln947_1_fu_670_p2);

assign or_ln_i_fu_715_p3 = {{31'd0}, {or_ln949_fu_709_p2}};

assign p_Result_3_i_fu_696_p3 = select_ln1495_1_reg_923[add_ln949_fu_690_p2];

assign p_Result_7_i_fu_583_p3 = {{27'd134217727}, {p_Result_i_fu_573_p4}};

assign p_Result_9_i_fu_834_p5 = {{zext_ln962_fu_795_p1[63:32]}, {tmp_5_i_fu_826_p3}, {zext_ln962_fu_795_p1[22:0]}};

integer ap_tvar_int_0;

always @ (select_ln1495_1_fu_565_p3) begin
    for (ap_tvar_int_0 = 5 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 4 - 0) begin
            p_Result_i_fu_573_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_i_fu_573_p4[ap_tvar_int_0] = select_ln1495_1_fu_565_p3[4 - ap_tvar_int_0];
        end
    end
end

assign result_offset1_i_fu_313_p4 = {{result_offset_dout[31:2]}};

assign select_ln1495_1_fu_565_p3 = ((or_ln1495_fu_559_p2[0:0] === 1'b1) ? select_ln1495_fu_551_p3 : tmp_7_i_fu_542_p4);

assign select_ln1495_fu_551_p3 = ((tmp_1_fu_529_p3[0:0] === 1'b1) ? 5'd0 : 5'd16);

assign select_ln885_fu_500_p3 = ((icmp_ln885_fu_345_p2[0:0] === 1'b1) ? 12'd1 : add_ln885_1_fu_494_p2);

assign select_ln894_1_fu_359_p3 = ((icmp_ln885_fu_345_p2[0:0] === 1'b1) ? add_ln884_1_fu_339_p2 : ap_phi_mux_args07_0_0_i_phi_fu_273_p4);

assign select_ln894_2_fu_427_p3 = ((or_ln894_fu_421_p2[0:0] === 1'b1) ? 7'd0 : args27_0_0_i_reg_302);

assign select_ln894_3_fu_435_p3 = ((and_ln894_fu_409_p2[0:0] === 1'b1) ? add_ln885_fu_415_p2 : select_ln894_fu_351_p3);

assign select_ln894_fu_351_p3 = ((icmp_ln885_fu_345_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_args17_0_0_i_phi_fu_295_p4);

assign select_ln935_fu_854_p3 = ((icmp_ln935_fu_603_p2[0:0] === 1'b1) ? 32'd0 : bitcast_ln739_fu_850_p1);

assign select_ln958_fu_767_p3 = ((icmp_ln958_fu_729_p2[0:0] === 1'b1) ? zext_ln958_1_fu_747_p1 : shl_ln958_fu_761_p2);

assign select_ln964_fu_807_p3 = ((tmp_4_fu_799_p3[0:0] === 1'b1) ? 8'd127 : 8'd126);

assign shl_ln958_fu_761_p2 = zext_ln957_fu_723_p1 << zext_ln958_2_fu_757_p1;

assign sub_ln944_fu_608_p2 = (32'd5 - l_i_reg_932);

assign sub_ln947_fu_643_p2 = ($signed(3'd6) - $signed(trunc_ln947_fu_639_p1));

assign sub_ln958_fu_751_p2 = (32'd25 - sub_ln944_fu_608_p2);

assign sub_ln964_fu_815_p2 = (8'd1 - trunc_ln943_reg_937);

assign tmp_1_fu_529_p3 = grp_fu_862_p3[32'd25];

assign tmp_1_i_fu_367_p3 = {{select_ln894_1_fu_359_p3}, {4'd0}};

assign tmp_2_fu_623_p4 = {{add_ln944_fu_617_p2[31:1]}};

assign tmp_2_i_fu_379_p3 = {{select_ln894_1_fu_359_p3}, {2'd0}};

assign tmp_3_fu_676_p3 = add_ln944_fu_617_p2[32'd31];

assign tmp_4_fu_799_p3 = add_ln961_fu_779_p2[32'd25];

assign tmp_5_i_fu_826_p3 = {{1'd0}, {add_ln964_fu_820_p2}};

assign tmp_7_i_fu_542_p4 = {{grp_fu_862_p3[18:14]}};

assign tmp_fu_453_p3 = {{add_ln894_1_fu_447_p2}, {6'd0}};

assign trunc_ln738_fu_846_p1 = p_Result_9_i_fu_834_p5[31:0];

assign trunc_ln943_fu_599_p1 = l_i_fu_591_p3[7:0];

assign trunc_ln944_fu_613_p1 = sub_ln944_fu_608_p2[4:0];

assign trunc_ln947_fu_639_p1 = sub_ln944_fu_608_p2[2:0];

assign trunc_ln_i_fu_520_p4 = {{grp_fu_862_p3[25:10]}};

assign xor_ln894_fu_397_p2 = (icmp_ln885_fu_345_p2 ^ 1'd1);

assign xor_ln949_fu_684_p2 = (tmp_3_fu_676_p3 ^ 1'd1);

assign zext_ln892_fu_465_p1 = select_ln894_2_fu_427_p3;

assign zext_ln894_1_fu_375_p1 = tmp_1_i_fu_367_p3;

assign zext_ln894_2_fu_387_p1 = tmp_2_i_fu_379_p3;

assign zext_ln894_3_fu_443_p1 = select_ln894_3_fu_435_p3;

assign zext_ln894_4_fu_461_p1 = tmp_fu_453_p3;

assign zext_ln894_fu_323_p1 = result_offset1_i_fu_313_p4;

assign zext_ln947_fu_649_p1 = sub_ln947_fu_643_p2;

assign zext_ln957_fu_723_p1 = select_ln1495_1_reg_923;

assign zext_ln958_1_fu_747_p1 = lshr_ln958_fu_741_p2;

assign zext_ln958_2_fu_757_p1 = sub_ln958_fu_751_p2;

assign zext_ln958_fu_726_p1 = select_ln1495_1_reg_923;

assign zext_ln961_fu_775_p1 = or_ln_i_fu_715_p3;

assign zext_ln962_fu_795_p1 = lshr_ln_i_fu_785_p4;

always @ (posedge ap_clk) begin
    zext_ln894_reg_873[63:30] <= 34'b0000000000000000000000000000000000;
end

endmodule //relu_bn8
