// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module maxpool1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        relu1_pipe_2_V_V_dout,
        relu1_pipe_2_V_V_empty_n,
        relu1_pipe_2_V_V_read,
        pool1_pipe_2_V_V_din,
        pool1_pipe_2_V_V_full_n,
        pool1_pipe_2_V_V_write
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_pp0_stage0 = 24'd4;
parameter    ap_ST_fsm_pp0_stage1 = 24'd8;
parameter    ap_ST_fsm_pp0_stage2 = 24'd16;
parameter    ap_ST_fsm_pp0_stage3 = 24'd32;
parameter    ap_ST_fsm_pp0_stage4 = 24'd64;
parameter    ap_ST_fsm_pp0_stage5 = 24'd128;
parameter    ap_ST_fsm_pp0_stage6 = 24'd256;
parameter    ap_ST_fsm_pp0_stage7 = 24'd512;
parameter    ap_ST_fsm_pp0_stage8 = 24'd1024;
parameter    ap_ST_fsm_pp0_stage9 = 24'd2048;
parameter    ap_ST_fsm_pp0_stage10 = 24'd4096;
parameter    ap_ST_fsm_pp0_stage11 = 24'd8192;
parameter    ap_ST_fsm_pp0_stage12 = 24'd16384;
parameter    ap_ST_fsm_pp0_stage13 = 24'd32768;
parameter    ap_ST_fsm_pp0_stage14 = 24'd65536;
parameter    ap_ST_fsm_pp0_stage15 = 24'd131072;
parameter    ap_ST_fsm_state20 = 24'd262144;
parameter    ap_ST_fsm_pp1_stage0 = 24'd524288;
parameter    ap_ST_fsm_pp1_stage1 = 24'd1048576;
parameter    ap_ST_fsm_pp1_stage2 = 24'd2097152;
parameter    ap_ST_fsm_pp1_stage3 = 24'd4194304;
parameter    ap_ST_fsm_state26 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [4:0] relu1_pipe_2_V_V_dout;
input   relu1_pipe_2_V_V_empty_n;
output   relu1_pipe_2_V_V_read;
output  [4:0] pool1_pipe_2_V_V_din;
input   pool1_pipe_2_V_V_full_n;
output   pool1_pipe_2_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg relu1_pipe_2_V_V_read;
reg pool1_pipe_2_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    relu1_pipe_2_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln202_reg_866;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    pool1_pipe_2_V_V_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln211_reg_912;
reg   [9:0] indvar_flatten_reg_362;
reg   [1:0] line_row_0_0_reg_373;
reg   [8:0] line_col_0_0_reg_384;
reg   [11:0] indvar_flatten7_reg_395;
reg   [8:0] block_0_0_reg_406;
reg   [4:0] c_0_0_reg_417;
wire   [0:0] icmp_ln200_fu_434_p2;
wire    ap_CS_fsm_state2;
wire   [6:0] add_ln200_fu_440_p2;
reg   [6:0] add_ln200_reg_861;
wire   [0:0] icmp_ln202_fu_446_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state19_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln202_1_fu_452_p2;
reg   [9:0] add_ln202_1_reg_870;
wire   [8:0] select_ln206_fu_470_p3;
reg   [8:0] select_ln206_reg_875;
wire   [1:0] select_ln206_1_fu_478_p3;
reg   [1:0] select_ln206_1_reg_881;
wire   [14:0] tmp_13_fu_523_p3;
reg   [14:0] tmp_13_reg_888;
reg    ap_block_state4_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
wire   [8:0] add_ln203_fu_676_p2;
reg   [8:0] add_ln203_reg_907;
reg    ap_block_state18_pp0_stage15_iter0;
reg    ap_block_pp0_stage15_11001;
wire   [0:0] icmp_ln211_fu_691_p2;
wire    ap_block_state21_pp1_stage0_iter0;
reg    ap_block_state25_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [11:0] add_ln211_1_fu_697_p2;
reg   [11:0] add_ln211_1_reg_916;
reg    ap_enable_reg_pp1_iter0;
wire   [4:0] select_ln217_fu_715_p3;
reg   [4:0] select_ln217_reg_921;
wire   [8:0] select_ln217_1_fu_723_p3;
reg   [8:0] select_ln217_1_reg_926;
wire   [13:0] add_ln356_23_fu_777_p2;
reg   [13:0] add_ln356_23_reg_931;
wire   [13:0] add_ln356_24_fu_788_p2;
reg   [13:0] add_ln356_24_reg_941;
wire   [13:0] add_ln356_25_fu_799_p2;
reg   [13:0] add_ln356_25_reg_951;
wire   [13:0] add_ln356_26_fu_805_p2;
reg   [13:0] add_ln356_26_reg_957;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state22_pp1_stage1_iter0;
wire    ap_block_pp1_stage1_11001;
wire   [13:0] select_ln251_fu_815_p3;
reg   [13:0] select_ln251_reg_968;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state23_pp1_stage2_iter0;
wire    ap_block_pp1_stage2_11001;
wire   [13:0] select_ln251_3_fu_830_p3;
reg   [13:0] select_ln251_3_reg_983;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_state24_pp1_stage3_iter0;
wire    ap_block_pp1_stage3_11001;
wire   [4:0] add_ln212_fu_852_p2;
reg   [4:0] add_ln212_reg_998;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp0_stage15_subdone;
wire    ap_CS_fsm_state20;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
wire    ap_block_pp1_stage3_subdone;
reg   [13:0] pool1_line_buffer_V_address0;
reg    pool1_line_buffer_V_ce0;
reg    pool1_line_buffer_V_we0;
wire   [4:0] pool1_line_buffer_V_q0;
reg   [13:0] pool1_line_buffer_V_address1;
reg    pool1_line_buffer_V_ce1;
wire   [4:0] pool1_line_buffer_V_q1;
reg   [6:0] h_0_0_reg_351;
reg    ap_block_state1;
wire    ap_CS_fsm_state26;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_366_p4;
reg   [1:0] ap_phi_mux_line_row_0_0_phi_fu_377_p4;
reg   [8:0] ap_phi_mux_line_col_0_0_phi_fu_388_p4;
reg   [11:0] ap_phi_mux_indvar_flatten7_phi_fu_399_p4;
reg   [8:0] ap_phi_mux_block_0_0_phi_fu_410_p4;
reg   [4:0] ap_phi_mux_c_0_0_phi_fu_421_p4;
wire   [63:0] zext_ln356_64_fu_531_p1;
wire   [63:0] zext_ln356_65_fu_541_p1;
wire   [63:0] zext_ln356_66_fu_551_p1;
wire   [63:0] zext_ln356_67_fu_561_p1;
wire   [63:0] zext_ln356_68_fu_571_p1;
wire   [63:0] zext_ln356_69_fu_581_p1;
wire   [63:0] zext_ln356_70_fu_591_p1;
wire   [63:0] zext_ln356_71_fu_601_p1;
wire   [63:0] zext_ln356_72_fu_611_p1;
wire   [63:0] zext_ln356_73_fu_621_p1;
wire   [63:0] zext_ln356_74_fu_631_p1;
wire   [63:0] zext_ln356_75_fu_641_p1;
wire   [63:0] zext_ln356_76_fu_651_p1;
wire   [63:0] zext_ln356_77_fu_661_p1;
wire   [63:0] zext_ln356_78_fu_671_p1;
wire   [63:0] zext_ln356_79_fu_686_p1;
wire   [63:0] zext_ln356_83_fu_783_p1;
wire   [63:0] zext_ln356_84_fu_794_p1;
wire   [63:0] zext_ln356_85_fu_811_p1;
wire    ap_block_pp1_stage1;
wire   [63:0] zext_ln251_fu_821_p1;
wire   [63:0] zext_ln356_86_fu_826_p1;
wire    ap_block_pp1_stage2;
wire   [63:0] zext_ln251_3_fu_836_p1;
wire   [63:0] zext_ln251_4_fu_847_p1;
wire    ap_block_pp1_stage3;
reg    ap_block_state5_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_state6_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_state7_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_state8_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg    ap_block_state9_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg    ap_block_state10_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_11001;
reg    ap_block_state11_pp0_stage8_iter0;
reg    ap_block_pp0_stage8_11001;
reg    ap_block_state12_pp0_stage9_iter0;
reg    ap_block_pp0_stage9_11001;
reg    ap_block_state13_pp0_stage10_iter0;
reg    ap_block_pp0_stage10_11001;
reg    ap_block_state14_pp0_stage11_iter0;
reg    ap_block_pp0_stage11_11001;
reg    ap_block_state15_pp0_stage12_iter0;
reg    ap_block_pp0_stage12_11001;
reg    ap_block_state16_pp0_stage13_iter0;
reg    ap_block_pp0_stage13_11001;
reg    ap_block_state17_pp0_stage14_iter0;
reg    ap_block_pp0_stage14_11001;
reg    ap_block_pp1_stage0_01001;
wire   [0:0] icmp_ln203_fu_464_p2;
wire   [1:0] add_ln202_fu_458_p2;
wire   [9:0] tmp_23_fu_486_p3;
wire   [7:0] tmp_24_fu_497_p3;
wire   [10:0] zext_ln356_62_fu_504_p1;
wire   [10:0] zext_ln356_fu_493_p1;
wire   [10:0] add_ln356_fu_508_p2;
wire   [10:0] zext_ln356_63_fu_514_p1;
wire   [10:0] add_ln356_20_fu_517_p2;
wire   [14:0] or_ln356_fu_536_p2;
wire   [14:0] or_ln356_31_fu_546_p2;
wire   [14:0] or_ln356_32_fu_556_p2;
wire   [14:0] or_ln356_33_fu_566_p2;
wire   [14:0] or_ln356_34_fu_576_p2;
wire   [14:0] or_ln356_35_fu_586_p2;
wire   [14:0] or_ln356_36_fu_596_p2;
wire   [14:0] or_ln356_37_fu_606_p2;
wire   [14:0] or_ln356_38_fu_616_p2;
wire   [14:0] or_ln356_39_fu_626_p2;
wire   [14:0] or_ln356_40_fu_636_p2;
wire   [14:0] or_ln356_41_fu_646_p2;
wire   [14:0] or_ln356_42_fu_656_p2;
wire   [14:0] or_ln356_43_fu_666_p2;
wire   [14:0] or_ln356_44_fu_681_p2;
wire   [0:0] icmp_ln212_fu_709_p2;
wire   [8:0] add_ln211_fu_703_p2;
wire   [12:0] tmp_25_fu_731_p3;
wire   [13:0] zext_ln356_80_fu_739_p1;
wire   [8:0] or_ln217_fu_749_p2;
wire   [12:0] tmp_26_fu_755_p3;
wire   [13:0] zext_ln356_81_fu_763_p1;
wire   [13:0] zext_ln356_82_fu_773_p1;
wire   [13:0] add_ln356_21_fu_743_p2;
wire   [13:0] add_ln356_22_fu_767_p2;
wire   [0:0] grp_fu_428_p2;
wire   [13:0] select_ln251_4_fu_841_p3;
reg   [23:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage14_subdone;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 24'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

maxpool1_pool1_li1iI #(
    .DataWidth( 5 ),
    .AddressRange( 10240 ),
    .AddressWidth( 14 ))
pool1_line_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pool1_line_buffer_V_address0),
    .ce0(pool1_line_buffer_V_ce0),
    .we0(pool1_line_buffer_V_we0),
    .d0(relu1_pipe_2_V_V_dout),
    .q0(pool1_line_buffer_V_q0),
    .address1(pool1_line_buffer_V_address1),
    .ce1(pool1_line_buffer_V_ce1),
    .q1(pool1_line_buffer_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln200_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln200_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln200_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage3_subdone) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        block_0_0_reg_406 <= 9'd0;
    end else if (((icmp_ln211_reg_912 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        block_0_0_reg_406 <= select_ln217_1_reg_926;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        c_0_0_reg_417 <= 5'd0;
    end else if (((icmp_ln211_reg_912 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        c_0_0_reg_417 <= add_ln212_reg_998;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        h_0_0_reg_351 <= add_ln200_reg_861;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_0_0_reg_351 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        indvar_flatten7_reg_395 <= 12'd0;
    end else if (((icmp_ln211_reg_912 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten7_reg_395 <= add_ln211_1_reg_916;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_362 <= add_ln202_1_reg_870;
    end else if (((icmp_ln200_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_362 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_col_0_0_reg_384 <= add_ln203_reg_907;
    end else if (((icmp_ln200_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        line_col_0_0_reg_384 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_row_0_0_reg_373 <= select_ln206_1_reg_881;
    end else if (((icmp_ln200_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        line_row_0_0_reg_373 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln200_reg_861 <= add_ln200_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln202_1_reg_870 <= add_ln202_1_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        add_ln203_reg_907 <= add_ln203_fu_676_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln211_1_reg_916 <= add_ln211_1_fu_697_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln211_reg_912 == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        add_ln212_reg_998 <= add_ln212_fu_852_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln211_fu_691_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln356_23_reg_931 <= add_ln356_23_fu_777_p2;
        add_ln356_24_reg_941 <= add_ln356_24_fu_788_p2;
        add_ln356_25_reg_951 <= add_ln356_25_fu_799_p2;
        add_ln356_26_reg_957 <= add_ln356_26_fu_805_p2;
        select_ln217_reg_921 <= select_ln217_fu_715_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln202_reg_866 <= icmp_ln202_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln211_reg_912 <= icmp_ln211_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_446_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln206_1_reg_881 <= select_ln206_1_fu_478_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_fu_446_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln206_reg_875 <= select_ln206_fu_470_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln211_fu_691_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln217_1_reg_926 <= select_ln217_1_fu_723_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln211_reg_912 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        select_ln251_3_reg_983 <= select_ln251_3_fu_830_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln211_reg_912 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        select_ln251_reg_968 <= select_ln251_fu_815_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_13_reg_888[14 : 4] <= tmp_13_fu_523_p3[14 : 4];
    end
end

always @ (*) begin
    if ((icmp_ln202_fu_446_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln211_fu_691_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln200_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln211_reg_912 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_block_0_0_phi_fu_410_p4 = select_ln217_1_reg_926;
    end else begin
        ap_phi_mux_block_0_0_phi_fu_410_p4 = block_0_0_reg_406;
    end
end

always @ (*) begin
    if (((icmp_ln211_reg_912 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_c_0_0_phi_fu_421_p4 = add_ln212_reg_998;
    end else begin
        ap_phi_mux_c_0_0_phi_fu_421_p4 = c_0_0_reg_417;
    end
end

always @ (*) begin
    if (((icmp_ln211_reg_912 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_indvar_flatten7_phi_fu_399_p4 = add_ln211_1_reg_916;
    end else begin
        ap_phi_mux_indvar_flatten7_phi_fu_399_p4 = indvar_flatten7_reg_395;
    end
end

always @ (*) begin
    if (((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_366_p4 = add_ln202_1_reg_870;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_366_p4 = indvar_flatten_reg_362;
    end
end

always @ (*) begin
    if (((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_line_col_0_0_phi_fu_388_p4 = add_ln203_reg_907;
    end else begin
        ap_phi_mux_line_col_0_0_phi_fu_388_p4 = line_col_0_0_reg_384;
    end
end

always @ (*) begin
    if (((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_line_row_0_0_phi_fu_377_p4 = select_ln206_1_reg_881;
    end else begin
        ap_phi_mux_line_row_0_0_phi_fu_377_p4 = line_row_0_0_reg_373;
    end
end

always @ (*) begin
    if (((icmp_ln200_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        pool1_line_buffer_V_address0 = zext_ln251_3_fu_836_p1;
    end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        pool1_line_buffer_V_address0 = zext_ln251_fu_821_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pool1_line_buffer_V_address0 = zext_ln356_83_fu_783_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pool1_line_buffer_V_address0 = zext_ln356_79_fu_686_p1;
    end else if (((1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        pool1_line_buffer_V_address0 = zext_ln356_78_fu_671_p1;
    end else if (((1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        pool1_line_buffer_V_address0 = zext_ln356_77_fu_661_p1;
    end else if (((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        pool1_line_buffer_V_address0 = zext_ln356_76_fu_651_p1;
    end else if (((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        pool1_line_buffer_V_address0 = zext_ln356_75_fu_641_p1;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        pool1_line_buffer_V_address0 = zext_ln356_74_fu_631_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10))) begin
        pool1_line_buffer_V_address0 = zext_ln356_73_fu_621_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        pool1_line_buffer_V_address0 = zext_ln356_72_fu_611_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        pool1_line_buffer_V_address0 = zext_ln356_71_fu_601_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
        pool1_line_buffer_V_address0 = zext_ln356_70_fu_591_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
        pool1_line_buffer_V_address0 = zext_ln356_69_fu_581_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
        pool1_line_buffer_V_address0 = zext_ln356_68_fu_571_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        pool1_line_buffer_V_address0 = zext_ln356_67_fu_561_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        pool1_line_buffer_V_address0 = zext_ln356_66_fu_551_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        pool1_line_buffer_V_address0 = zext_ln356_65_fu_541_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pool1_line_buffer_V_address0 = zext_ln356_64_fu_531_p1;
    end else begin
        pool1_line_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            pool1_line_buffer_V_address1 = zext_ln251_4_fu_847_p1;
        end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
            pool1_line_buffer_V_address1 = zext_ln356_86_fu_826_p1;
        end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            pool1_line_buffer_V_address1 = zext_ln356_85_fu_811_p1;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            pool1_line_buffer_V_address1 = zext_ln356_84_fu_794_p1;
        end else begin
            pool1_line_buffer_V_address1 = 'bx;
        end
    end else begin
        pool1_line_buffer_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        pool1_line_buffer_V_ce0 = 1'b1;
    end else begin
        pool1_line_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        pool1_line_buffer_V_ce1 = 1'b1;
    end else begin
        pool1_line_buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        pool1_line_buffer_V_we0 = 1'b1;
    end else begin
        pool1_line_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln211_reg_912 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pool1_pipe_2_V_V_blk_n = pool1_pipe_2_V_V_full_n;
    end else begin
        pool1_pipe_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln211_reg_912 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pool1_pipe_2_V_V_write = 1'b1;
    end else begin
        pool1_pipe_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2) & (icmp_ln202_reg_866 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln202_reg_866 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10)) | ((icmp_ln202_reg_866 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9)) | ((icmp_ln202_reg_866 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8)) | ((icmp_ln202_reg_866 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7)) | ((icmp_ln202_reg_866 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6)) | ((icmp_ln202_reg_866 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5)) | ((icmp_ln202_reg_866 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((icmp_ln202_reg_866 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        relu1_pipe_2_V_V_blk_n = relu1_pipe_2_V_V_empty_n;
    end else begin
        relu1_pipe_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln202_reg_866 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        relu1_pipe_2_V_V_read = 1'b1;
    end else begin
        relu1_pipe_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln200_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln202_fu_446_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln202_fu_446_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln211_fu_691_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln211_fu_691_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln200_fu_440_p2 = (h_0_0_reg_351 + 7'd1);

assign add_ln202_1_fu_452_p2 = (ap_phi_mux_indvar_flatten_phi_fu_366_p4 + 10'd1);

assign add_ln202_fu_458_p2 = (ap_phi_mux_line_row_0_0_phi_fu_377_p4 + 2'd1);

assign add_ln203_fu_676_p2 = (select_ln206_reg_875 + 9'd1);

assign add_ln211_1_fu_697_p2 = (ap_phi_mux_indvar_flatten7_phi_fu_399_p4 + 12'd1);

assign add_ln211_fu_703_p2 = (ap_phi_mux_block_0_0_phi_fu_410_p4 + 9'd2);

assign add_ln212_fu_852_p2 = (select_ln217_reg_921 + 5'd1);

assign add_ln356_20_fu_517_p2 = (add_ln356_fu_508_p2 + zext_ln356_63_fu_514_p1);

assign add_ln356_21_fu_743_p2 = (zext_ln356_80_fu_739_p1 + 14'd5120);

assign add_ln356_22_fu_767_p2 = (zext_ln356_81_fu_763_p1 + 14'd5120);

assign add_ln356_23_fu_777_p2 = (zext_ln356_82_fu_773_p1 + zext_ln356_80_fu_739_p1);

assign add_ln356_24_fu_788_p2 = (zext_ln356_82_fu_773_p1 + zext_ln356_81_fu_763_p1);

assign add_ln356_25_fu_799_p2 = (zext_ln356_82_fu_773_p1 + add_ln356_21_fu_743_p2);

assign add_ln356_26_fu_805_p2 = (zext_ln356_82_fu_773_p1 + add_ln356_22_fu_767_p2);

assign add_ln356_fu_508_p2 = (zext_ln356_62_fu_504_p1 + zext_ln356_fu_493_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage14_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage14_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage15_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage15_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((icmp_ln211_reg_912 == 1'd0) & (pool1_pipe_2_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln211_reg_912 == 1'd0) & (pool1_pipe_2_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln211_reg_912 == 1'd0) & (pool1_pipe_2_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage7_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp0_stage8_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state12_pp0_stage9_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state13_pp0_stage10_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state14_pp0_stage11_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state15_pp0_stage12_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state16_pp0_stage13_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state17_pp0_stage14_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state18_pp0_stage15_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state19_pp0_stage0_iter1 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_pp1_stage0_iter1 = ((icmp_ln211_reg_912 == 1'd0) & (pool1_pipe_2_V_V_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage1_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage2_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage3_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage4_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp0_stage5_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage6_iter0 = ((icmp_ln202_reg_866 == 1'd0) & (relu1_pipe_2_V_V_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_428_p2 = ((pool1_line_buffer_V_q1 > pool1_line_buffer_V_q0) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_434_p2 = ((h_0_0_reg_351 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_446_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_366_p4 == 10'd640) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_464_p2 = ((ap_phi_mux_line_col_0_0_phi_fu_388_p4 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln211_fu_691_p2 = ((ap_phi_mux_indvar_flatten7_phi_fu_399_p4 == 12'd2560) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_709_p2 = ((ap_phi_mux_c_0_0_phi_fu_421_p4 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln217_fu_749_p2 = (select_ln217_1_fu_723_p3 | 9'd1);

assign or_ln356_31_fu_546_p2 = (tmp_13_reg_888 | 15'd2);

assign or_ln356_32_fu_556_p2 = (tmp_13_reg_888 | 15'd3);

assign or_ln356_33_fu_566_p2 = (tmp_13_reg_888 | 15'd4);

assign or_ln356_34_fu_576_p2 = (tmp_13_reg_888 | 15'd5);

assign or_ln356_35_fu_586_p2 = (tmp_13_reg_888 | 15'd6);

assign or_ln356_36_fu_596_p2 = (tmp_13_reg_888 | 15'd7);

assign or_ln356_37_fu_606_p2 = (tmp_13_reg_888 | 15'd8);

assign or_ln356_38_fu_616_p2 = (tmp_13_reg_888 | 15'd9);

assign or_ln356_39_fu_626_p2 = (tmp_13_reg_888 | 15'd10);

assign or_ln356_40_fu_636_p2 = (tmp_13_reg_888 | 15'd11);

assign or_ln356_41_fu_646_p2 = (tmp_13_reg_888 | 15'd12);

assign or_ln356_42_fu_656_p2 = (tmp_13_reg_888 | 15'd13);

assign or_ln356_43_fu_666_p2 = (tmp_13_reg_888 | 15'd14);

assign or_ln356_44_fu_681_p2 = (tmp_13_reg_888 | 15'd15);

assign or_ln356_fu_536_p2 = (tmp_13_reg_888 | 15'd1);

assign pool1_pipe_2_V_V_din = pool1_line_buffer_V_q1;

assign select_ln206_1_fu_478_p3 = ((icmp_ln203_fu_464_p2[0:0] === 1'b1) ? add_ln202_fu_458_p2 : ap_phi_mux_line_row_0_0_phi_fu_377_p4);

assign select_ln206_fu_470_p3 = ((icmp_ln203_fu_464_p2[0:0] === 1'b1) ? 9'd0 : ap_phi_mux_line_col_0_0_phi_fu_388_p4);

assign select_ln217_1_fu_723_p3 = ((icmp_ln212_fu_709_p2[0:0] === 1'b1) ? add_ln211_fu_703_p2 : ap_phi_mux_block_0_0_phi_fu_410_p4);

assign select_ln217_fu_715_p3 = ((icmp_ln212_fu_709_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_c_0_0_phi_fu_421_p4);

assign select_ln251_3_fu_830_p3 = ((grp_fu_428_p2[0:0] === 1'b1) ? add_ln356_25_reg_951 : select_ln251_reg_968);

assign select_ln251_4_fu_841_p3 = ((grp_fu_428_p2[0:0] === 1'b1) ? add_ln356_26_reg_957 : select_ln251_3_reg_983);

assign select_ln251_fu_815_p3 = ((grp_fu_428_p2[0:0] === 1'b1) ? add_ln356_24_reg_941 : add_ln356_23_reg_931);

assign start_out = real_start;

assign tmp_13_fu_523_p3 = {{add_ln356_20_fu_517_p2}, {4'd0}};

assign tmp_23_fu_486_p3 = {{select_ln206_1_reg_881}, {8'd0}};

assign tmp_24_fu_497_p3 = {{select_ln206_1_reg_881}, {6'd0}};

assign tmp_25_fu_731_p3 = {{select_ln217_1_fu_723_p3}, {4'd0}};

assign tmp_26_fu_755_p3 = {{or_ln217_fu_749_p2}, {4'd0}};

assign zext_ln251_3_fu_836_p1 = select_ln251_3_fu_830_p3;

assign zext_ln251_4_fu_847_p1 = select_ln251_4_fu_841_p3;

assign zext_ln251_fu_821_p1 = select_ln251_fu_815_p3;

assign zext_ln356_62_fu_504_p1 = tmp_24_fu_497_p3;

assign zext_ln356_63_fu_514_p1 = select_ln206_reg_875;

assign zext_ln356_64_fu_531_p1 = tmp_13_fu_523_p3;

assign zext_ln356_65_fu_541_p1 = or_ln356_fu_536_p2;

assign zext_ln356_66_fu_551_p1 = or_ln356_31_fu_546_p2;

assign zext_ln356_67_fu_561_p1 = or_ln356_32_fu_556_p2;

assign zext_ln356_68_fu_571_p1 = or_ln356_33_fu_566_p2;

assign zext_ln356_69_fu_581_p1 = or_ln356_34_fu_576_p2;

assign zext_ln356_70_fu_591_p1 = or_ln356_35_fu_586_p2;

assign zext_ln356_71_fu_601_p1 = or_ln356_36_fu_596_p2;

assign zext_ln356_72_fu_611_p1 = or_ln356_37_fu_606_p2;

assign zext_ln356_73_fu_621_p1 = or_ln356_38_fu_616_p2;

assign zext_ln356_74_fu_631_p1 = or_ln356_39_fu_626_p2;

assign zext_ln356_75_fu_641_p1 = or_ln356_40_fu_636_p2;

assign zext_ln356_76_fu_651_p1 = or_ln356_41_fu_646_p2;

assign zext_ln356_77_fu_661_p1 = or_ln356_42_fu_656_p2;

assign zext_ln356_78_fu_671_p1 = or_ln356_43_fu_666_p2;

assign zext_ln356_79_fu_686_p1 = or_ln356_44_fu_681_p2;

assign zext_ln356_80_fu_739_p1 = tmp_25_fu_731_p3;

assign zext_ln356_81_fu_763_p1 = tmp_26_fu_755_p3;

assign zext_ln356_82_fu_773_p1 = select_ln217_fu_715_p3;

assign zext_ln356_83_fu_783_p1 = add_ln356_23_fu_777_p2;

assign zext_ln356_84_fu_794_p1 = add_ln356_24_fu_788_p2;

assign zext_ln356_85_fu_811_p1 = add_ln356_25_reg_951;

assign zext_ln356_86_fu_826_p1 = add_ln356_26_reg_957;

assign zext_ln356_fu_493_p1 = tmp_23_fu_486_p3;

always @ (posedge ap_clk) begin
    tmp_13_reg_888[3:0] <= 4'b0000;
end

endmodule //maxpool1
