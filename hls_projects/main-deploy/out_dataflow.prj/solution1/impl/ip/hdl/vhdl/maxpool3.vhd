-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity maxpool3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    relu3_pipe_6_V_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    relu3_pipe_6_V_V_empty_n : IN STD_LOGIC;
    relu3_pipe_6_V_V_read : OUT STD_LOGIC;
    pool3_pipe_6_V_V_din : OUT STD_LOGIC_VECTOR (4 downto 0);
    pool3_pipe_6_V_V_full_n : IN STD_LOGIC;
    pool3_pipe_6_V_V_write : OUT STD_LOGIC );
end;


architecture behav of maxpool3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal relu3_pipe_6_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln444_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool3_pipe_6_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln461_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln439_fu_325_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln439_reg_639 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln441_fu_337_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln441_reg_647 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln356_fu_367_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln356_reg_652 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln441_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln442_fu_379_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln442_reg_660 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_29_cast_fu_394_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_29_cast_reg_665 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln442_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln444_fu_408_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal add_ln451_fu_440_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln451_reg_684 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln454_fu_446_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln454_reg_689 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln451_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln450_fu_450_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln454_fu_462_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln454_reg_702 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln356_9_fu_492_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln356_9_reg_707 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln454_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln455_1_fu_506_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln455_1_reg_712 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln455_fu_520_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln455_reg_720 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln356_10_fu_530_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln356_10_reg_725 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln455_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln461_fu_578_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln461_reg_738 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal zext_ln462_fu_592_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln462_reg_743 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln462_fu_602_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln462_reg_751 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln462_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln251_fu_628_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal pool3_line_buffer_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal pool3_line_buffer_V_ce0 : STD_LOGIC;
    signal pool3_line_buffer_V_we0 : STD_LOGIC;
    signal pool3_line_buffer_V_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool3_window_buffer_s_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool3_window_buffer_s_ce0 : STD_LOGIC;
    signal pool3_window_buffer_s_we0 : STD_LOGIC;
    signal pool3_window_buffer_s_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal h2_0_0_reg_183 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln450_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_row_0_0_reg_194 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln439_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_col_0_0_reg_205 : STD_LOGIC_VECTOR (6 downto 0);
    signal line_c_0_0_reg_216 : STD_LOGIC_VECTOR (6 downto 0);
    signal block_0_0_reg_227 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_0_0_reg_239 : STD_LOGIC_VECTOR (6 downto 0);
    signal window_row_0_0_reg_250 : STD_LOGIC_VECTOR (1 downto 0);
    signal window_col_0_0_reg_261 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_V_9_reg_272 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_row_0_0_reg_285 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_0_0_reg_296 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_col_0_0_reg_308 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln356_14_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln356_20_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln356_18_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln463_1_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_343_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_355_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln356_11_fu_363_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln356_fu_351_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln356_12_fu_385_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln356_7_fu_389_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln356_13_fu_414_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln356_8_fu_418_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_fu_468_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_480_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln356_16_fu_488_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln356_15_fu_476_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_498_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln356_17_fu_526_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln455_fu_510_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln456_fu_535_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln356_19_fu_541_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln356_11_fu_545_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_35_cast_fu_550_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln356_12_fu_558_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_fu_584_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln463_fu_608_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln463_fu_612_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1494_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component maxpool3_pool3_likZb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component maxpool3_pool3_wik0b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    pool3_line_buffer_V_U : component maxpool3_pool3_likZb
    generic map (
        DataWidth => 5,
        AddressRange => 10240,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool3_line_buffer_V_address0,
        ce0 => pool3_line_buffer_V_ce0,
        we0 => pool3_line_buffer_V_we0,
        d0 => relu3_pipe_6_V_V_dout,
        q0 => pool3_line_buffer_V_q0);

    pool3_window_buffer_s_U : component maxpool3_pool3_wik0b
    generic map (
        DataWidth => 5,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool3_window_buffer_s_address0,
        ce0 => pool3_window_buffer_s_ce0,
        we0 => pool3_window_buffer_s_we0,
        d0 => pool3_line_buffer_V_q0,
        q0 => pool3_window_buffer_s_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln439_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    block_0_0_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln441_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                block_0_0_reg_227 <= ap_const_lv7_0;
            elsif (((icmp_ln451_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                block_0_0_reg_227 <= add_ln450_fu_450_p2;
            end if; 
        end if;
    end process;

    c_0_0_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln461_fu_572_p2 = ap_const_lv1_1) and (pool3_pipe_6_V_V_full_n = ap_const_logic_0))) and (icmp_ln461_fu_572_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                c_0_0_reg_239 <= add_ln451_reg_684;
            elsif (((icmp_ln450_fu_428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                c_0_0_reg_239 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h2_0_0_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln450_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                h2_0_0_reg_183 <= add_ln439_reg_639;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h2_0_0_reg_183 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    line_c_0_0_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln444_fu_402_p2 = ap_const_lv1_0) and (relu3_pipe_6_V_V_empty_n = ap_const_logic_0))) and (icmp_ln444_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                line_c_0_0_reg_216 <= add_ln444_fu_408_p2;
            elsif (((icmp_ln442_fu_373_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                line_c_0_0_reg_216 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    line_col_0_0_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln444_fu_402_p2 = ap_const_lv1_0) and (relu3_pipe_6_V_V_empty_n = ap_const_logic_0))) and (icmp_ln444_fu_402_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                line_col_0_0_reg_205 <= add_ln442_reg_660;
            elsif (((icmp_ln441_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                line_col_0_0_reg_205 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    line_row_0_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln442_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                line_row_0_0_reg_194 <= add_ln441_reg_647;
            elsif (((icmp_ln439_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                line_row_0_0_reg_194 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_0_0_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_0_0_reg_296 <= select_ln251_fu_628_p3;
            elsif ((not(((icmp_ln461_fu_572_p2 = ap_const_lv1_1) and (pool3_pipe_6_V_V_full_n = ap_const_logic_0))) and (icmp_ln461_fu_572_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                p_0_0_reg_296 <= tmp_V_9_reg_272;
            end if; 
        end if;
    end process;

    pool_col_0_0_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                pool_col_0_0_reg_308 <= add_ln462_reg_751;
            elsif ((not(((icmp_ln461_fu_572_p2 = ap_const_lv1_1) and (pool3_pipe_6_V_V_full_n = ap_const_logic_0))) and (icmp_ln461_fu_572_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                pool_col_0_0_reg_308 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    pool_row_0_0_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln454_fu_456_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                pool_row_0_0_reg_285 <= ap_const_lv2_0;
            elsif (((icmp_ln462_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                pool_row_0_0_reg_285 <= add_ln461_reg_738;
            end if; 
        end if;
    end process;

    tmp_V_9_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln454_fu_456_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                tmp_V_9_reg_272 <= ap_const_lv5_0;
            elsif (((icmp_ln462_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                tmp_V_9_reg_272 <= p_0_0_reg_296;
            end if; 
        end if;
    end process;

    window_col_0_0_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                window_col_0_0_reg_261 <= add_ln455_reg_720;
            elsif (((icmp_ln454_fu_456_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_col_0_0_reg_261 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    window_row_0_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln455_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                window_row_0_0_reg_250 <= add_ln454_reg_702;
            elsif (((icmp_ln451_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_row_0_0_reg_250 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln455_fu_514_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                add_ln356_10_reg_725 <= add_ln356_10_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln454_fu_456_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    add_ln356_9_reg_707(8 downto 4) <= add_ln356_9_fu_492_p2(8 downto 4);
                    zext_ln455_1_reg_712(2 downto 1) <= zext_ln455_1_fu_506_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln441_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    add_ln356_reg_652(8 downto 4) <= add_ln356_fu_367_p2(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln439_reg_639 <= add_ln439_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln441_reg_647 <= add_ln441_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln442_reg_660 <= add_ln442_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln451_reg_684 <= add_ln451_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln454_reg_702 <= add_ln454_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln455_reg_720 <= add_ln455_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln461_fu_572_p2 = ap_const_lv1_1) and (pool3_pipe_6_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                add_ln461_reg_738 <= add_ln461_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln462_reg_751 <= add_ln462_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln442_fu_373_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_29_cast_reg_665(14 downto 6) <= tmp_29_cast_fu_394_p3(14 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln451_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    zext_ln454_reg_689(6 downto 0) <= zext_ln454_fu_446_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln461_fu_572_p2 = ap_const_lv1_1) and (pool3_pipe_6_V_V_full_n = ap_const_logic_0))) and (icmp_ln461_fu_572_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    zext_ln462_reg_743(2 downto 1) <= zext_ln462_fu_592_p1(2 downto 1);
            end if;
        end if;
    end process;
    add_ln356_reg_652(3 downto 0) <= "0000";
    tmp_29_cast_reg_665(5 downto 0) <= "000000";
    zext_ln454_reg_689(14 downto 7) <= "00000000";
    add_ln356_9_reg_707(3 downto 0) <= "0000";
    zext_ln455_1_reg_712(0) <= '0';
    zext_ln455_1_reg_712(3) <= '0';
    zext_ln462_reg_743(0) <= '0';
    zext_ln462_reg_743(3) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, relu3_pipe_6_V_V_empty_n, pool3_pipe_6_V_V_full_n, ap_CS_fsm_state5, icmp_ln444_fu_402_p2, ap_CS_fsm_state11, icmp_ln461_fu_572_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln441_fu_331_p2, ap_CS_fsm_state4, icmp_ln442_fu_373_p2, ap_CS_fsm_state7, icmp_ln451_fu_434_p2, ap_CS_fsm_state8, icmp_ln454_fu_456_p2, ap_CS_fsm_state9, icmp_ln455_fu_514_p2, ap_CS_fsm_state12, icmp_ln462_fu_596_p2, ap_CS_fsm_state6, icmp_ln450_fu_428_p2, icmp_ln439_fu_319_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln439_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln441_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln442_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((icmp_ln444_fu_402_p2 = ap_const_lv1_0) and (relu3_pipe_6_V_V_empty_n = ap_const_logic_0))) and (icmp_ln444_fu_402_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln444_fu_402_p2 = ap_const_lv1_0) and (relu3_pipe_6_V_V_empty_n = ap_const_logic_0))) and (icmp_ln444_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln450_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln451_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln454_fu_456_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln455_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if ((not(((icmp_ln461_fu_572_p2 = ap_const_lv1_1) and (pool3_pipe_6_V_V_full_n = ap_const_logic_0))) and (icmp_ln461_fu_572_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((icmp_ln461_fu_572_p2 = ap_const_lv1_1) and (pool3_pipe_6_V_V_full_n = ap_const_logic_0))) and (icmp_ln461_fu_572_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln462_fu_596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln356_10_fu_530_p2 <= std_logic_vector(unsigned(zext_ln356_17_fu_526_p1) + unsigned(zext_ln455_1_reg_712));
    add_ln356_11_fu_545_p2 <= std_logic_vector(unsigned(zext_ln356_19_fu_541_p1) + unsigned(add_ln356_9_reg_707));
    add_ln356_12_fu_558_p2 <= std_logic_vector(unsigned(zext_ln454_reg_689) + unsigned(tmp_35_cast_fu_550_p3));
    add_ln356_7_fu_389_p2 <= std_logic_vector(unsigned(zext_ln356_12_fu_385_p1) + unsigned(add_ln356_reg_652));
    add_ln356_8_fu_418_p2 <= std_logic_vector(unsigned(tmp_29_cast_reg_665) + unsigned(zext_ln356_13_fu_414_p1));
    add_ln356_9_fu_492_p2 <= std_logic_vector(unsigned(zext_ln356_16_fu_488_p1) + unsigned(zext_ln356_15_fu_476_p1));
    add_ln356_fu_367_p2 <= std_logic_vector(unsigned(zext_ln356_11_fu_363_p1) + unsigned(zext_ln356_fu_351_p1));
    add_ln439_fu_325_p2 <= std_logic_vector(unsigned(h2_0_0_reg_183) + unsigned(ap_const_lv5_1));
    add_ln441_fu_337_p2 <= std_logic_vector(unsigned(line_row_0_0_reg_194) + unsigned(ap_const_lv2_1));
    add_ln442_fu_379_p2 <= std_logic_vector(unsigned(line_col_0_0_reg_205) + unsigned(ap_const_lv7_1));
    add_ln444_fu_408_p2 <= std_logic_vector(unsigned(line_c_0_0_reg_216) + unsigned(ap_const_lv7_1));
    add_ln450_fu_450_p2 <= std_logic_vector(unsigned(block_0_0_reg_227) + unsigned(ap_const_lv7_2));
    add_ln451_fu_440_p2 <= std_logic_vector(unsigned(c_0_0_reg_239) + unsigned(ap_const_lv7_1));
    add_ln454_fu_462_p2 <= std_logic_vector(unsigned(window_row_0_0_reg_250) + unsigned(ap_const_lv2_1));
    add_ln455_fu_520_p2 <= std_logic_vector(unsigned(window_col_0_0_reg_261) + unsigned(ap_const_lv2_1));
    add_ln456_fu_535_p2 <= std_logic_vector(unsigned(block_0_0_reg_227) + unsigned(zext_ln455_fu_510_p1));
    add_ln461_fu_578_p2 <= std_logic_vector(unsigned(pool_row_0_0_reg_285) + unsigned(ap_const_lv2_1));
    add_ln462_fu_602_p2 <= std_logic_vector(unsigned(pool_col_0_0_reg_308) + unsigned(ap_const_lv2_1));
    add_ln463_fu_612_p2 <= std_logic_vector(unsigned(zext_ln462_reg_743) + unsigned(zext_ln463_fu_608_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state11_assign_proc : process(pool3_pipe_6_V_V_full_n, icmp_ln461_fu_572_p2)
    begin
                ap_block_state11 <= ((icmp_ln461_fu_572_p2 = ap_const_lv1_1) and (pool3_pipe_6_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(relu3_pipe_6_V_V_empty_n, icmp_ln444_fu_402_p2)
    begin
                ap_block_state5 <= ((icmp_ln444_fu_402_p2 = ap_const_lv1_0) and (relu3_pipe_6_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln439_fu_319_p2)
    begin
        if (((icmp_ln439_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    icmp_ln1494_fu_622_p2 <= "1" when (unsigned(pool3_window_buffer_s_q0) > unsigned(p_0_0_reg_296)) else "0";
    icmp_ln439_fu_319_p2 <= "1" when (h2_0_0_reg_183 = ap_const_lv5_14) else "0";
    icmp_ln441_fu_331_p2 <= "1" when (line_row_0_0_reg_194 = ap_const_lv2_2) else "0";
    icmp_ln442_fu_373_p2 <= "1" when (line_col_0_0_reg_205 = ap_const_lv7_50) else "0";
    icmp_ln444_fu_402_p2 <= "1" when (line_c_0_0_reg_216 = ap_const_lv7_40) else "0";
    icmp_ln450_fu_428_p2 <= "1" when (unsigned(block_0_0_reg_227) < unsigned(ap_const_lv7_50)) else "0";
    icmp_ln451_fu_434_p2 <= "1" when (c_0_0_reg_239 = ap_const_lv7_40) else "0";
    icmp_ln454_fu_456_p2 <= "1" when (window_row_0_0_reg_250 = ap_const_lv2_2) else "0";
    icmp_ln455_fu_514_p2 <= "1" when (window_col_0_0_reg_261 = ap_const_lv2_2) else "0";
    icmp_ln461_fu_572_p2 <= "1" when (pool_row_0_0_reg_285 = ap_const_lv2_2) else "0";
    icmp_ln462_fu_596_p2 <= "1" when (pool_col_0_0_reg_308 = ap_const_lv2_2) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln439_fu_319_p2)
    begin
        if (((icmp_ln439_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    pool3_line_buffer_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, zext_ln356_14_fu_423_p1, zext_ln356_20_fu_563_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pool3_line_buffer_V_address0 <= zext_ln356_20_fu_563_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pool3_line_buffer_V_address0 <= zext_ln356_14_fu_423_p1(14 - 1 downto 0);
        else 
            pool3_line_buffer_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    pool3_line_buffer_V_ce0_assign_proc : process(relu3_pipe_6_V_V_empty_n, ap_CS_fsm_state5, icmp_ln444_fu_402_p2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (not(((icmp_ln444_fu_402_p2 = ap_const_lv1_0) and (relu3_pipe_6_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            pool3_line_buffer_V_ce0 <= ap_const_logic_1;
        else 
            pool3_line_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool3_line_buffer_V_we0_assign_proc : process(relu3_pipe_6_V_V_empty_n, ap_CS_fsm_state5, icmp_ln444_fu_402_p2)
    begin
        if ((not(((icmp_ln444_fu_402_p2 = ap_const_lv1_0) and (relu3_pipe_6_V_V_empty_n = ap_const_logic_0))) and (icmp_ln444_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pool3_line_buffer_V_we0 <= ap_const_logic_1;
        else 
            pool3_line_buffer_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pool3_pipe_6_V_V_blk_n_assign_proc : process(pool3_pipe_6_V_V_full_n, ap_CS_fsm_state11, icmp_ln461_fu_572_p2)
    begin
        if (((icmp_ln461_fu_572_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            pool3_pipe_6_V_V_blk_n <= pool3_pipe_6_V_V_full_n;
        else 
            pool3_pipe_6_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pool3_pipe_6_V_V_din <= tmp_V_9_reg_272;

    pool3_pipe_6_V_V_write_assign_proc : process(pool3_pipe_6_V_V_full_n, ap_CS_fsm_state11, icmp_ln461_fu_572_p2)
    begin
        if ((not(((icmp_ln461_fu_572_p2 = ap_const_lv1_1) and (pool3_pipe_6_V_V_full_n = ap_const_logic_0))) and (icmp_ln461_fu_572_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            pool3_pipe_6_V_V_write <= ap_const_logic_1;
        else 
            pool3_pipe_6_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    pool3_window_buffer_s_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state10, zext_ln356_18_fu_568_p1, zext_ln463_1_fu_617_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            pool3_window_buffer_s_address0 <= zext_ln463_1_fu_617_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pool3_window_buffer_s_address0 <= zext_ln356_18_fu_568_p1(2 - 1 downto 0);
        else 
            pool3_window_buffer_s_address0 <= "XX";
        end if; 
    end process;


    pool3_window_buffer_s_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            pool3_window_buffer_s_ce0 <= ap_const_logic_1;
        else 
            pool3_window_buffer_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool3_window_buffer_s_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pool3_window_buffer_s_we0 <= ap_const_logic_1;
        else 
            pool3_window_buffer_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    relu3_pipe_6_V_V_blk_n_assign_proc : process(relu3_pipe_6_V_V_empty_n, ap_CS_fsm_state5, icmp_ln444_fu_402_p2)
    begin
        if (((icmp_ln444_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            relu3_pipe_6_V_V_blk_n <= relu3_pipe_6_V_V_empty_n;
        else 
            relu3_pipe_6_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    relu3_pipe_6_V_V_read_assign_proc : process(relu3_pipe_6_V_V_empty_n, ap_CS_fsm_state5, icmp_ln444_fu_402_p2)
    begin
        if ((not(((icmp_ln444_fu_402_p2 = ap_const_lv1_0) and (relu3_pipe_6_V_V_empty_n = ap_const_logic_0))) and (icmp_ln444_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            relu3_pipe_6_V_V_read <= ap_const_logic_1;
        else 
            relu3_pipe_6_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln251_fu_628_p3 <= 
        pool3_window_buffer_s_q0 when (icmp_ln1494_fu_622_p2(0) = '1') else 
        p_0_0_reg_296;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_13_fu_343_p3 <= (line_row_0_0_reg_194 & ap_const_lv6_0);
    tmp_14_fu_355_p3 <= (line_row_0_0_reg_194 & ap_const_lv4_0);
    tmp_15_fu_468_p3 <= (window_row_0_0_reg_250 & ap_const_lv6_0);
    tmp_16_fu_480_p3 <= (window_row_0_0_reg_250 & ap_const_lv4_0);
    tmp_17_fu_498_p3 <= (window_row_0_0_reg_250 & ap_const_lv1_0);
    tmp_18_fu_584_p3 <= (pool_row_0_0_reg_285 & ap_const_lv1_0);
    tmp_29_cast_fu_394_p3 <= (add_ln356_7_fu_389_p2 & ap_const_lv6_0);
    tmp_35_cast_fu_550_p3 <= (add_ln356_11_fu_545_p2 & ap_const_lv6_0);
    zext_ln356_11_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_355_p3),9));
    zext_ln356_12_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_col_0_0_reg_205),9));
    zext_ln356_13_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_c_0_0_reg_216),15));
    zext_ln356_14_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln356_8_fu_418_p2),64));
    zext_ln356_15_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_468_p3),9));
    zext_ln356_16_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_480_p3),9));
    zext_ln356_17_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_col_0_0_reg_261),4));
    zext_ln356_18_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln356_10_reg_725),64));
    zext_ln356_19_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln456_fu_535_p2),9));
    zext_ln356_20_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln356_12_fu_558_p2),64));
    zext_ln356_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_343_p3),9));
    zext_ln454_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_0_reg_239),15));
    zext_ln455_1_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_498_p3),4));
    zext_ln455_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_col_0_0_reg_261),7));
    zext_ln462_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_584_p3),4));
    zext_ln463_1_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln463_fu_612_p2),64));
    zext_ln463_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_col_0_0_reg_308),4));
end behav;
