// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module maxpool4 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        relu4_pipe_8_V_V_dout,
        relu4_pipe_8_V_V_empty_n,
        relu4_pipe_8_V_V_read,
        pool4_pipe_8_V_V_din,
        pool4_pipe_8_V_V_full_n,
        pool4_pipe_8_V_V_write
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [4:0] relu4_pipe_8_V_V_dout;
input   relu4_pipe_8_V_V_empty_n;
output   relu4_pipe_8_V_V_read;
output  [4:0] pool4_pipe_8_V_V_din;
input   pool4_pipe_8_V_V_full_n;
output   pool4_pipe_8_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg relu4_pipe_8_V_V_read;
reg pool4_pipe_8_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    relu4_pipe_8_V_V_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln561_fu_406_p2;
reg    pool4_pipe_8_V_V_blk_n;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln578_fu_576_p2;
wire   [3:0] add_ln556_fu_329_p2;
reg   [3:0] add_ln556_reg_643;
wire    ap_CS_fsm_state2;
wire   [1:0] add_ln558_fu_341_p2;
reg   [1:0] add_ln558_reg_651;
wire    ap_CS_fsm_state3;
wire   [7:0] add_ln356_fu_371_p2;
reg   [7:0] add_ln356_reg_656;
wire   [0:0] icmp_ln558_fu_335_p2;
wire   [5:0] add_ln559_fu_383_p2;
reg   [5:0] add_ln559_reg_664;
wire    ap_CS_fsm_state4;
wire   [13:0] tmp_19_cast_fu_398_p3;
reg   [13:0] tmp_19_cast_reg_669;
wire   [0:0] icmp_ln559_fu_377_p2;
wire   [6:0] add_ln561_fu_412_p2;
reg    ap_block_state5;
wire   [6:0] add_ln568_fu_444_p2;
reg   [6:0] add_ln568_reg_688;
wire    ap_CS_fsm_state7;
wire   [13:0] zext_ln571_fu_450_p1;
reg   [13:0] zext_ln571_reg_693;
wire   [0:0] icmp_ln568_fu_438_p2;
wire   [5:0] add_ln567_fu_454_p2;
wire   [1:0] add_ln571_fu_466_p2;
reg   [1:0] add_ln571_reg_706;
wire    ap_CS_fsm_state8;
wire   [7:0] add_ln356_3_fu_496_p2;
reg   [7:0] add_ln356_3_reg_711;
wire   [0:0] icmp_ln571_fu_460_p2;
wire   [3:0] zext_ln572_1_fu_510_p1;
reg   [3:0] zext_ln572_1_reg_716;
wire   [1:0] add_ln572_fu_524_p2;
reg   [1:0] add_ln572_reg_724;
wire    ap_CS_fsm_state9;
wire   [3:0] add_ln356_4_fu_534_p2;
reg   [3:0] add_ln356_4_reg_729;
wire   [0:0] icmp_ln572_fu_518_p2;
wire   [1:0] add_ln578_fu_582_p2;
reg   [1:0] add_ln578_reg_742;
reg    ap_block_state11;
wire   [3:0] zext_ln579_fu_596_p1;
reg   [3:0] zext_ln579_reg_747;
wire   [1:0] add_ln579_fu_606_p2;
reg   [1:0] add_ln579_reg_755;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln579_fu_600_p2;
wire   [4:0] select_ln251_fu_632_p3;
wire    ap_CS_fsm_state13;
reg   [12:0] pool4_line_buffer_V_address0;
reg    pool4_line_buffer_V_ce0;
reg    pool4_line_buffer_V_we0;
wire   [4:0] pool4_line_buffer_V_q0;
reg   [1:0] pool4_window_buffer_s_address0;
reg    pool4_window_buffer_s_ce0;
reg    pool4_window_buffer_s_we0;
wire   [4:0] pool4_window_buffer_s_q0;
reg   [3:0] h3_0_0_reg_187;
reg    ap_block_state1;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln567_fu_432_p2;
reg   [1:0] line_row_0_0_reg_198;
wire   [0:0] icmp_ln556_fu_323_p2;
reg   [5:0] line_col_0_0_reg_209;
reg   [6:0] line_c_0_0_reg_220;
reg   [5:0] block_0_0_reg_231;
reg   [6:0] c_0_0_reg_243;
reg   [1:0] window_row_0_0_reg_254;
reg   [1:0] window_col_0_0_reg_265;
wire    ap_CS_fsm_state10;
reg   [4:0] tmp_V_8_reg_276;
reg   [1:0] pool_row_0_0_reg_289;
reg   [4:0] p_0_0_reg_300;
reg   [1:0] pool_col_0_0_reg_312;
wire   [63:0] zext_ln356_4_fu_427_p1;
wire   [63:0] zext_ln356_10_fu_567_p1;
wire   [63:0] zext_ln356_8_fu_572_p1;
wire   [63:0] zext_ln580_1_fu_621_p1;
wire   [6:0] tmp_1_fu_347_p3;
wire   [4:0] tmp_2_fu_359_p3;
wire   [7:0] zext_ln356_1_fu_367_p1;
wire   [7:0] zext_ln356_fu_355_p1;
wire   [7:0] zext_ln356_2_fu_389_p1;
wire   [7:0] add_ln356_1_fu_393_p2;
wire   [13:0] zext_ln356_3_fu_418_p1;
wire   [13:0] add_ln356_2_fu_422_p2;
wire   [6:0] tmp_9_fu_472_p3;
wire   [4:0] tmp_10_fu_484_p3;
wire   [7:0] zext_ln356_6_fu_492_p1;
wire   [7:0] zext_ln356_5_fu_480_p1;
wire   [2:0] tmp_11_fu_502_p3;
wire   [3:0] zext_ln356_7_fu_530_p1;
wire   [5:0] zext_ln572_fu_514_p1;
wire   [5:0] add_ln573_fu_539_p2;
wire   [7:0] zext_ln356_9_fu_545_p1;
wire   [7:0] add_ln356_5_fu_549_p2;
wire   [13:0] tmp_25_cast_fu_554_p3;
wire   [13:0] add_ln356_6_fu_562_p2;
wire   [2:0] tmp_12_fu_588_p3;
wire   [3:0] zext_ln580_fu_612_p1;
wire   [3:0] add_ln580_fu_616_p2;
wire   [0:0] icmp_ln1494_fu_626_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
end

maxpool4_pool4_liouc #(
    .DataWidth( 5 ),
    .AddressRange( 5120 ),
    .AddressWidth( 13 ))
pool4_line_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pool4_line_buffer_V_address0),
    .ce0(pool4_line_buffer_V_ce0),
    .we0(pool4_line_buffer_V_we0),
    .d0(relu4_pipe_8_V_V_dout),
    .q0(pool4_line_buffer_V_q0)
);

maxpool3_pool3_wik0b #(
    .DataWidth( 5 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
pool4_window_buffer_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(pool4_window_buffer_s_address0),
    .ce0(pool4_window_buffer_s_ce0),
    .we0(pool4_window_buffer_s_we0),
    .d0(pool4_line_buffer_V_q0),
    .q0(pool4_window_buffer_s_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln556_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln558_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        block_0_0_reg_231 <= 6'd0;
    end else if (((icmp_ln568_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        block_0_0_reg_231 <= add_ln567_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln578_fu_576_p2 == 1'd1) & (pool4_pipe_8_V_V_full_n == 1'b0)) & (icmp_ln578_fu_576_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        c_0_0_reg_243 <= add_ln568_reg_688;
    end else if (((icmp_ln567_fu_432_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        c_0_0_reg_243 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln567_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        h3_0_0_reg_187 <= add_ln556_reg_643;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        h3_0_0_reg_187 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln561_fu_406_p2 == 1'd0) & (relu4_pipe_8_V_V_empty_n == 1'b0)) & (icmp_ln561_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        line_c_0_0_reg_220 <= add_ln561_fu_412_p2;
    end else if (((icmp_ln559_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        line_c_0_0_reg_220 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln561_fu_406_p2 == 1'd0) & (relu4_pipe_8_V_V_empty_n == 1'b0)) & (icmp_ln561_fu_406_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        line_col_0_0_reg_209 <= add_ln559_reg_664;
    end else if (((icmp_ln558_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        line_col_0_0_reg_209 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln559_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        line_row_0_0_reg_198 <= add_ln558_reg_651;
    end else if (((icmp_ln556_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        line_row_0_0_reg_198 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_0_0_reg_300 <= select_ln251_fu_632_p3;
    end else if ((~((icmp_ln578_fu_576_p2 == 1'd1) & (pool4_pipe_8_V_V_full_n == 1'b0)) & (icmp_ln578_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        p_0_0_reg_300 <= tmp_V_8_reg_276;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        pool_col_0_0_reg_312 <= add_ln579_reg_755;
    end else if ((~((icmp_ln578_fu_576_p2 == 1'd1) & (pool4_pipe_8_V_V_full_n == 1'b0)) & (icmp_ln578_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        pool_col_0_0_reg_312 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln571_fu_460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        pool_row_0_0_reg_289 <= 2'd0;
    end else if (((icmp_ln579_fu_600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        pool_row_0_0_reg_289 <= add_ln578_reg_742;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln571_fu_460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_V_8_reg_276 <= 5'd0;
    end else if (((icmp_ln579_fu_600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_V_8_reg_276 <= p_0_0_reg_300;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        window_col_0_0_reg_265 <= add_ln572_reg_724;
    end else if (((icmp_ln571_fu_460_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        window_col_0_0_reg_265 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln572_fu_518_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        window_row_0_0_reg_254 <= add_ln571_reg_706;
    end else if (((icmp_ln568_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        window_row_0_0_reg_254 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln571_fu_460_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        add_ln356_3_reg_711[7 : 3] <= add_ln356_3_fu_496_p2[7 : 3];
        zext_ln572_1_reg_716[2 : 1] <= zext_ln572_1_fu_510_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln572_fu_518_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        add_ln356_4_reg_729 <= add_ln356_4_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln558_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln356_reg_656[7 : 3] <= add_ln356_fu_371_p2[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln556_reg_643 <= add_ln556_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln558_reg_651 <= add_ln558_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln559_reg_664 <= add_ln559_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln568_reg_688 <= add_ln568_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln571_reg_706 <= add_ln571_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln572_reg_724 <= add_ln572_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln578_fu_576_p2 == 1'd1) & (pool4_pipe_8_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        add_ln578_reg_742 <= add_ln578_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln579_reg_755 <= add_ln579_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln559_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_19_cast_reg_669[13 : 6] <= tmp_19_cast_fu_398_p3[13 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln568_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln571_reg_693[6 : 0] <= zext_ln571_fu_450_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln578_fu_576_p2 == 1'd1) & (pool4_pipe_8_V_V_full_n == 1'b0)) & (icmp_ln578_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        zext_ln579_reg_747[2 : 1] <= zext_ln579_fu_596_p1[2 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln556_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln556_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        pool4_line_buffer_V_address0 = zext_ln356_10_fu_567_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        pool4_line_buffer_V_address0 = zext_ln356_4_fu_427_p1;
    end else begin
        pool4_line_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (~((icmp_ln561_fu_406_p2 == 1'd0) & (relu4_pipe_8_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        pool4_line_buffer_V_ce0 = 1'b1;
    end else begin
        pool4_line_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln561_fu_406_p2 == 1'd0) & (relu4_pipe_8_V_V_empty_n == 1'b0)) & (icmp_ln561_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        pool4_line_buffer_V_we0 = 1'b1;
    end else begin
        pool4_line_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln578_fu_576_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        pool4_pipe_8_V_V_blk_n = pool4_pipe_8_V_V_full_n;
    end else begin
        pool4_pipe_8_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln578_fu_576_p2 == 1'd1) & (pool4_pipe_8_V_V_full_n == 1'b0)) & (icmp_ln578_fu_576_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        pool4_pipe_8_V_V_write = 1'b1;
    end else begin
        pool4_pipe_8_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        pool4_window_buffer_s_address0 = zext_ln580_1_fu_621_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        pool4_window_buffer_s_address0 = zext_ln356_8_fu_572_p1;
    end else begin
        pool4_window_buffer_s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12))) begin
        pool4_window_buffer_s_ce0 = 1'b1;
    end else begin
        pool4_window_buffer_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pool4_window_buffer_s_we0 = 1'b1;
    end else begin
        pool4_window_buffer_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln561_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        relu4_pipe_8_V_V_blk_n = relu4_pipe_8_V_V_empty_n;
    end else begin
        relu4_pipe_8_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln561_fu_406_p2 == 1'd0) & (relu4_pipe_8_V_V_empty_n == 1'b0)) & (icmp_ln561_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        relu4_pipe_8_V_V_read = 1'b1;
    end else begin
        relu4_pipe_8_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln556_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln558_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln559_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((icmp_ln561_fu_406_p2 == 1'd0) & (relu4_pipe_8_V_V_empty_n == 1'b0)) & (icmp_ln561_fu_406_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((icmp_ln561_fu_406_p2 == 1'd0) & (relu4_pipe_8_V_V_empty_n == 1'b0)) & (icmp_ln561_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln567_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln568_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln571_fu_460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln572_fu_518_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if ((~((icmp_ln578_fu_576_p2 == 1'd1) & (pool4_pipe_8_V_V_full_n == 1'b0)) & (icmp_ln578_fu_576_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((icmp_ln578_fu_576_p2 == 1'd1) & (pool4_pipe_8_V_V_full_n == 1'b0)) & (icmp_ln578_fu_576_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln579_fu_600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln356_1_fu_393_p2 = (zext_ln356_2_fu_389_p1 + add_ln356_reg_656);

assign add_ln356_2_fu_422_p2 = (tmp_19_cast_reg_669 + zext_ln356_3_fu_418_p1);

assign add_ln356_3_fu_496_p2 = (zext_ln356_6_fu_492_p1 + zext_ln356_5_fu_480_p1);

assign add_ln356_4_fu_534_p2 = (zext_ln356_7_fu_530_p1 + zext_ln572_1_reg_716);

assign add_ln356_5_fu_549_p2 = (zext_ln356_9_fu_545_p1 + add_ln356_3_reg_711);

assign add_ln356_6_fu_562_p2 = (zext_ln571_reg_693 + tmp_25_cast_fu_554_p3);

assign add_ln356_fu_371_p2 = (zext_ln356_1_fu_367_p1 + zext_ln356_fu_355_p1);

assign add_ln556_fu_329_p2 = (h3_0_0_reg_187 + 4'd1);

assign add_ln558_fu_341_p2 = (line_row_0_0_reg_198 + 2'd1);

assign add_ln559_fu_383_p2 = (line_col_0_0_reg_209 + 6'd1);

assign add_ln561_fu_412_p2 = (line_c_0_0_reg_220 + 7'd1);

assign add_ln567_fu_454_p2 = (block_0_0_reg_231 + 6'd2);

assign add_ln568_fu_444_p2 = (c_0_0_reg_243 + 7'd1);

assign add_ln571_fu_466_p2 = (window_row_0_0_reg_254 + 2'd1);

assign add_ln572_fu_524_p2 = (window_col_0_0_reg_265 + 2'd1);

assign add_ln573_fu_539_p2 = (block_0_0_reg_231 + zext_ln572_fu_514_p1);

assign add_ln578_fu_582_p2 = (pool_row_0_0_reg_289 + 2'd1);

assign add_ln579_fu_606_p2 = (pool_col_0_0_reg_312 + 2'd1);

assign add_ln580_fu_616_p2 = (zext_ln579_reg_747 + zext_ln580_fu_612_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state11 = ((icmp_ln578_fu_576_p2 == 1'd1) & (pool4_pipe_8_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((icmp_ln561_fu_406_p2 == 1'd0) & (relu4_pipe_8_V_V_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln1494_fu_626_p2 = ((pool4_window_buffer_s_q0 > p_0_0_reg_300) ? 1'b1 : 1'b0);

assign icmp_ln556_fu_323_p2 = ((h3_0_0_reg_187 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln558_fu_335_p2 = ((line_row_0_0_reg_198 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln559_fu_377_p2 = ((line_col_0_0_reg_209 == 6'd40) ? 1'b1 : 1'b0);

assign icmp_ln561_fu_406_p2 = ((line_c_0_0_reg_220 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln567_fu_432_p2 = ((block_0_0_reg_231 < 6'd40) ? 1'b1 : 1'b0);

assign icmp_ln568_fu_438_p2 = ((c_0_0_reg_243 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_460_p2 = ((window_row_0_0_reg_254 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln572_fu_518_p2 = ((window_col_0_0_reg_265 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln578_fu_576_p2 = ((pool_row_0_0_reg_289 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln579_fu_600_p2 = ((pool_col_0_0_reg_312 == 2'd2) ? 1'b1 : 1'b0);

assign pool4_pipe_8_V_V_din = tmp_V_8_reg_276;

assign select_ln251_fu_632_p3 = ((icmp_ln1494_fu_626_p2[0:0] === 1'b1) ? pool4_window_buffer_s_q0 : p_0_0_reg_300);

assign start_out = real_start;

assign tmp_10_fu_484_p3 = {{window_row_0_0_reg_254}, {3'd0}};

assign tmp_11_fu_502_p3 = {{window_row_0_0_reg_254}, {1'd0}};

assign tmp_12_fu_588_p3 = {{pool_row_0_0_reg_289}, {1'd0}};

assign tmp_19_cast_fu_398_p3 = {{add_ln356_1_fu_393_p2}, {6'd0}};

assign tmp_1_fu_347_p3 = {{line_row_0_0_reg_198}, {5'd0}};

assign tmp_25_cast_fu_554_p3 = {{add_ln356_5_fu_549_p2}, {6'd0}};

assign tmp_2_fu_359_p3 = {{line_row_0_0_reg_198}, {3'd0}};

assign tmp_9_fu_472_p3 = {{window_row_0_0_reg_254}, {5'd0}};

assign zext_ln356_10_fu_567_p1 = add_ln356_6_fu_562_p2;

assign zext_ln356_1_fu_367_p1 = tmp_2_fu_359_p3;

assign zext_ln356_2_fu_389_p1 = line_col_0_0_reg_209;

assign zext_ln356_3_fu_418_p1 = line_c_0_0_reg_220;

assign zext_ln356_4_fu_427_p1 = add_ln356_2_fu_422_p2;

assign zext_ln356_5_fu_480_p1 = tmp_9_fu_472_p3;

assign zext_ln356_6_fu_492_p1 = tmp_10_fu_484_p3;

assign zext_ln356_7_fu_530_p1 = window_col_0_0_reg_265;

assign zext_ln356_8_fu_572_p1 = add_ln356_4_reg_729;

assign zext_ln356_9_fu_545_p1 = add_ln573_fu_539_p2;

assign zext_ln356_fu_355_p1 = tmp_1_fu_347_p3;

assign zext_ln571_fu_450_p1 = c_0_0_reg_243;

assign zext_ln572_1_fu_510_p1 = tmp_11_fu_502_p3;

assign zext_ln572_fu_514_p1 = window_col_0_0_reg_265;

assign zext_ln579_fu_596_p1 = tmp_12_fu_588_p3;

assign zext_ln580_1_fu_621_p1 = add_ln580_fu_616_p2;

assign zext_ln580_fu_612_p1 = pool_col_0_0_reg_312;

always @ (posedge ap_clk) begin
    add_ln356_reg_656[2:0] <= 3'b000;
    tmp_19_cast_reg_669[5:0] <= 6'b000000;
    zext_ln571_reg_693[13:7] <= 7'b0000000;
    add_ln356_3_reg_711[2:0] <= 3'b000;
    zext_ln572_1_reg_716[0] <= 1'b0;
    zext_ln572_1_reg_716[3] <= 1'b0;
    zext_ln579_reg_747[0] <= 1'b0;
    zext_ln579_reg_747[3] <= 1'b0;
end

endmodule //maxpool4
