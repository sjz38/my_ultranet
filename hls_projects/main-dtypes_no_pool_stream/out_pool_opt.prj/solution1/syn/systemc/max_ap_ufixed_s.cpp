// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "max_ap_ufixed_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic max_ap_ufixed_s::ap_const_logic_1 = sc_dt::Log_1;
const bool max_ap_ufixed_s::ap_const_boolean_1 = true;
const sc_logic max_ap_ufixed_s::ap_const_logic_0 = sc_dt::Log_0;

max_ap_ufixed_s::max_ap_ufixed_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( x_V );
    sensitive << ( y_V );
    sensitive << ( icmp_ln1494_fu_18_p2 );

    SC_METHOD(thread_icmp_ln1494_fu_18_p2);
    sensitive << ( x_V );
    sensitive << ( y_V );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "max_ap_ufixed_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_V, "(port)x_V");
    sc_trace(mVcdFile, y_V, "(port)y_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, icmp_ln1494_fu_18_p2, "icmp_ln1494_fu_18_p2");
#endif

    }
}

max_ap_ufixed_s::~max_ap_ufixed_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void max_ap_ufixed_s::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void max_ap_ufixed_s::thread_ap_return() {
    ap_return = (!icmp_ln1494_fu_18_p2.read()[0].is_01())? sc_lv<5>(): ((icmp_ln1494_fu_18_p2.read()[0].to_bool())? x_V.read(): y_V.read());
}

void max_ap_ufixed_s::thread_icmp_ln1494_fu_18_p2() {
    icmp_ln1494_fu_18_p2 = (!x_V.read().is_01() || !y_V.read().is_01())? sc_lv<1>(): (sc_biguint<5>(x_V.read()) > sc_biguint<5>(y_V.read()));
}

}

